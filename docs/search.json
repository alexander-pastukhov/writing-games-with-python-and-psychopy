[{"path":"index.html","id":"intro","chapter":"1 Introduction","heading":"1 Introduction","text":"book teach programming. Hopefully, fun way something satisfying playing video game creating one. Although written course called “Python social experimental psychology”, main aim teach Python per se. Python fantastic tool (later) just one many programming languages exist. ultimate goal help develop general programming skills, depend specific-programming language, make sure form good habits make code clear, easy read, easy maintain. last part crucial. Programming writing code works. , obviously, must true minimal requirement. Programming writing clear easy--read code others , even importantly, -two-weeks later can understand.","code":""},{"path":"index.html","id":"prerequisites","chapter":"1 Introduction","heading":"1.1 Prerequisites","text":"material assumes foreknowledge Python programming reader. purpose gradually build knowledge allow create complex games.","code":""},{"path":"index.html","id":"why-games","chapter":"1 Introduction","heading":"1.2 Why games?","text":"actual purpose course teach psychology social studies students program experiments. real research . However, little practical difference two. basic ingredients , arguably, experiments just boring games. , assured, can program game, can certainly program experiment.","code":""},{"path":"index.html","id":"why-should-a-psychologist-learn-programming","chapter":"1 Introduction","heading":"1.3 Why should a psychologist learn programming?","text":"psychologist, interested people, learn program computers? obvious answer useful skill. able program gives freedom create experiment answers research question, experiment can implemented given constraints software.importantly, least point view, learning program changes way think general. People smart computers dumb. explain experiment travel plans somebody, can fairly vague, make minor mistake, even skip certain parts. People smart fill missing information knowledge, spot correct mistake, ask information, can improvise encounter something covered. Computers dumb, must precise, gray areas, leave anything “figure happens” (won’t). personal experience, corroborated psychologists learned programming, makes realize just vague imprecise people can without realizing . Programming forces precise thorough, plan ahead eventuality might . useful skill can applied activity requires planning experimental design travel arrangements.","code":""},{"path":"index.html","id":"why-python","chapter":"1 Introduction","heading":"1.4 Why Python?","text":"many ways create experiment psychological research. can use drag--drop systems either commercial like Presentation, Experiment Builder free like PsychoPy Bulder interface. much shallower learning curve, can start creating running experiments faster. However, simplicity use price: fairly limited stimuli can use can control presentation schedule, conditions, feedback, etc. Typically, allow extend programming desired behavior need know program (knowing Python supercharges PsychoPy experiments). Thus, think systems, particular PsychoPy, great tools quickly bang simple experiment together, useful understand\ncreate underlying code program . , limited software, know can program something default drag--drop won’t allow. time, can always opt , drag--drop sufficient faster. use mix two approaches. end, options creative freedom program experiment answer research question, experiment software allows program.learn programming Python, great language combines simple clear syntax power ability tackle almost problem. seminar, concentrate desktop experiments can use online experiments (oTree PsychoPy), scientific programming (NumPy SciPy), data analysis (pandas), machine learning (keras), website programming (django), computer vision (OpenCV), etc. Thus, Python one versatile programming tools can use stages research work. , Python free, need worry whether future employer able afford license fees (real problem, use Matlab).","code":""},{"path":"index.html","id":"seminar-specific-information","chapter":"1 Introduction","heading":"1.5 Seminar-specific information","text":"material Python social experimental psychology seminar taught University Bamberg. chapter covers single game, introducing necessary ideas accompanied exercises need complete submit. pass seminar, need complete assignments, .e., write games. need complete provide correct solutions exercises pass course information points exercises converted actual grade (need one) “pass” available seminar.material structured, chapter chapter section correspond single meeting. However, different, work pace, read material submit assignments independently. provide detailed feedback assignment opportunity address issues resubmit loss points. Note feedback cover actual problems code way implemented solution clean well-documented code . Remember, task just learn program working game write nice clear easy--read--maintain code1.important: hesitate ask questions. feel missed information material, point exact location. confused, ’ll gently prod questions solve problem. need information, ’ll supply . simply want know , ask ’ll explain things way suggest read. feel able solve issue without help, ’ll tell (although, still probably ask hinting questions).","code":""},{"path":"index.html","id":"about-the-material","chapter":"1 Introduction","heading":"1.6 About the material","text":"material free use licensed Creative Commons Attribution-NonCommercial-NoDerivatives V4.0 International License.","code":""},{"path":"software.html","id":"software","chapter":"2 Software","heading":"2 Software","text":"book seminar, need installPsychoPy comes bundled Python.IDE choice. instructions Visual Studio Code, good Python support.Jupyter Notebook trying small snippets code.give detailed instructions install necessary software rather point official manuals. makes text future-proof specific details might easily change2.","code":""},{"path":"software.html","id":"install-psychopy","chapter":"2 Software","heading":"2.1 PsychoPy","text":"Download install Standalone PsychoPy version. Use whatever latest (greatest) PsychoPy version suggested (PsychoPy 2021.2.3 using Python3.6 time writing) follow instructions.Note can also install PsychoPy anaconda package install official Python distribution add PsychoPy via pip. However, find standalone easier use necessary additional libraries. Plus, additional tools GUI-based experiment programming integration Pavlovia.org.","code":""},{"path":"software.html","id":"install-vs-code","chapter":"2 Software","heading":"2.2 VS Code","text":"Visual Studio Code free lightweight open-source editor strong support Python. Download installer platform follow instructions.Next, follow Getting Started Python VS Code tutorial. Skip Install Python interpreter section, already Python installation bundled PsychoPy. interpreter use Select Python interpreter section. case path C:\\Program Files\\PsychoPy3\\python.exe.Install enable linter, software highlights syntactical stylistic problems Python source code. Follow manual VS Code website.","code":""},{"path":"software.html","id":"jupyter-notebooks","chapter":"2 Software","heading":"2.3 Jupyter Notebooks","text":"Jupyter Notebooks offer convenient way mix text, figure code single document. also make easy play various small snippets parallel without running scripts. rely first chapter occasional exercises code testing later . two way can use : 1) VS Code using Jupyter extension, 2) browser using classical interface.","code":""},{"path":"software.html","id":"jupyter-notebooks-in-vs-code","chapter":"2 Software","heading":"2.3.1 Jupyter Notebooks in VS Code","text":"Follow manual install Jupyter package use notebooks VS Code.","code":""},{"path":"software.html","id":"jupyter-notebooks-in-anaconda","chapter":"2 Software","heading":"2.3.2 Jupyter Notebooks in Anaconda","text":"simplest way use Jupyter Notebooks along lot useful data science tools via Anaconda toolkit. However, note introduce second Python distribution system. , turn, lead confusion working scripts VS Code accidentally Anaconda interpreter active instead PsychoPy one. panic, follow Select Python interpreter instructions make sure PsychoPy interpreter active one.Otherwise, download install Anaconda. website excellent Getting started section.","code":""},{"path":"software.html","id":"files-folder","chapter":"2 Software","heading":"2.4 Keeping things tidy","text":"start, suggest create folder called games--python (something along lines). opted use Jupyter Notebooks via Anaconda, create user folder Anaconda expects find . , create new subfolder chapter / game. seminar, need zip upload folder files.","code":""},{"path":"programming-tips.html","id":"programming-tips","chapter":"3 Programming tips and tricks","heading":"3 Programming tips and tricks","text":"tips writing reading code. may sound cryptic read first time (become clear cover necessary material). feel like overkill simple projects implementing. suggest read section casually first time return frequently start program earnest. Unfortunately, tricks won’t work use ! always use become good habits, like using seat belt. seat belt nothing useful (hopefully, ) days wear might suddenly urgently become extremely useful can never sure happen. coding. Quite often tempted write “quick-n-dirty” code just “simple test,” temporary solution, prototype, pilot experiment, etc. , say Russia “nothing permanent temporary solution.” often , find toy code grew full blown experiment mess. want come back pilot experiment months ago realize easier start scratch understand monster works3. Thus, resist temptation! Form good habits future-grateful!","code":""},{"path":"programming-tips.html","id":"writing-tips","chapter":"3 Programming tips and tricks","heading":"3.1 Writing the code","text":"","code":""},{"path":"programming-tips.html","id":"use-a-linter","chapter":"3 Programming tips and tricks","heading":"3.1.1 Use a linter","text":"Linter program analyses code style highlights issues finds: spaces none, spaces , wrong names, overly long lines, etc. affect code runs following linter’s advice results consistent standard boring-looking4 Python code. Try address problems linter raised. However, use better judgment sometimes lines longer linter prefer readable two shorter ones. Similarly, “bad” variable name linter standards can meaningful name psychologist. Remember, code people, linter.","code":""},{"path":"programming-tips.html","id":"document-your-code","chapter":"3 Programming tips and tricks","heading":"3.1.2 Document your code","text":"Every time create new file: document update documentation whenever add/change/delete new functions classes. Every time create new function: document . New class: document . New constant: unless super clear name alone, document . learn NumPy way book.stress important documenting code . VS Code (editor use) smart enough parse NumPy docstring, show help whenever use functions (helps help !). importantly, writing documentation forces think formulate (human language!) function class , type arguments / attributes / methods , range valid values, defaults, function return, etc. often , realize overlooked important detail may apparent code .","code":""},{"path":"programming-tips.html","id":"add-some-air","chapter":"3 Programming tips and tricks","heading":"3.1.3 Add some air","text":"Separate chunks code empty lines. Think paragraphs normal text. wouldn’t want book single paragraph nightmare? Put comment chunk explains . E.g., typical PsychoPy-based game point draw stimuli redraw window. nice self-contained chunk can described # drawing stimuli. code provides details exactly drawn, drawing order, etc. single comment help understand chunk whether relevant moment. goes # processing key presses # checking gameover conditions, etc. careful make sure comment describes code correctly. E.g., comment says # drawing stimuli stimuli-drawing code anywhere else code something else!","code":""},{"path":"programming-tips.html","id":"write-your-code-one-teeny-tiny-step-a-time","chapter":"3 Programming tips and tricks","heading":"3.1.4 Write your code one teeny-tiny step a time","text":"motto “slow steady.” way guide games. Always start something extremely simple like static rectangle image. Make sure works. Add minor functionality: Change color, position, another rectangle, storing attribute, etc. Make sure works. Never go next step unless fully understand current code 100% certain5 behaves . tortoise-speed approach may feel silly overly slow still faster writing large chunk code trying make work. much easier solve simple problems one time lot simultaneously.","code":""},{"path":"programming-tips.html","id":"there-is-nothing-wrong-with-stackoverflow","chapter":"3 Programming tips and tricks","heading":"3.1.5 There is nothing wrong with StackOverflow","text":"Yes, can always try find solution problem StackOverflow6. time! However, use provided solution understand ! copy-paste code seems solve problem like . lucky, might work. , lucky, won’t work obvious manner. lucky, (sometimes) work incorrectly subtle way. , since really know code pasted , even confused. use StackOverflow source knowledge, source copy-pastable code!## Reading code {#reading-tips}\nReading code easy computers dumb smart. means instructions give computer must necessarily simple , therefore, easy understand human. Unfortunately, reading code also hard computers dumb smart. smart don’t even need read entire code understand , just read key bits fill gaps. Unfortunately, means tend read mistakes. unique programming, ever proofraed text, now hard find tipos. brain corrects fly using context read word , actually written7.experience programming general seminar particular problems get stuck simple point dumb obvious retrospect8. despair! , just consequence wonderfully brain wired pattern-recognition. several suggestions help make reading code robust.","code":""},{"path":"programming-tips.html","id":"think-like-a-computer","chapter":"3 Programming tips and tricks","heading":"3.1.6 Think like a computer","text":"Read code line--line “execute” way compute . Use pen--paper keep track variables. Trace chunks code can reached . Slow make sure understand line able keep track variables. easy spot mistake.","code":""},{"path":"programming-tips.html","id":"pretend-that-youve-never-seen-this-code-in-your-life","chapter":"3 Programming tips and tricks","heading":"3.1.7 Pretend that you’ve never seen this code in your life","text":"Assume idea code . wrote, quite often literally see mistake brain fills-details bends reality match expectations. know chunk code , instead reading skim , unless looks obviously terribly wrong, assume . Turning expectations hard immensely helpful.","code":""},{"path":"programming-tips.html","id":"do-not-search-only-under-the-street-lamp","chapter":"3 Programming tips and tricks","heading":"3.1.8 Do not search only under the street lamp","text":"Whenever using new code need implement something feels complicated code work , tend assume problem new fancy code. Simply new, fancy, complicated. , experience, error typically hide plain sight simpler “trivial” code nearby never properly look , simple trivial. Check everything, just places expect made mistake.","code":""},{"path":"programming-tips.html","id":"use-the-debugger","chapter":"3 Programming tips and tricks","heading":"3.1.9 Use the debugger","text":"book, learn pause execution game, can investigate state. Use knowledge! Put breakpoints execute code step--step. Check values variables using “Watch” tab. Use debug console check whether functions return results . complex conditions mathematical formulas, split small bits, copy execute bits debug console check whether numbers add . Make sure code chunk checks proceed analyze next one. Debugging particularly helpful identify code reached reached wrong moment.","code":""},{"path":"programming-tips.html","id":"zen-of-python","chapter":"3 Programming tips and tricks","heading":"3.2 Zen of Python","text":"found Zen Python good inspiration approach programming.","code":""},{"path":"python-basics.html","id":"python-basics","chapter":"4 Python basics","heading":"4 Python basics","text":"Hopefully, already created special folder book. Download exercise notebook (Alt+Click download rather open ), put chapter’s folder, open (see relevant instructions. need switch explanations exercises notebook, keep open.","code":""},{"path":"python-basics.html","id":"chapter-concepts","chapter":"4 Python basics","heading":"4.1 Chapter concepts","text":"Variables.Constants.Basic value types.Printing things .Putting values strings.","code":""},{"path":"python-basics.html","id":"variables","chapter":"4 Python basics","heading":"4.2 Variables","text":"first fundamental concept need acquainted variable. Variables used store information can think box name tag, can put something . name tag box name variable value store . example, can create variable stores number legs game character . begin number typical human .Python, writeThe assignment statement simple structure:Variable name (name tag box) meaningful, can start letters _ can contain letters, numbers, _ symbol spaces, tabs, special characters, etc. Python recommends (well, actually, insists) use snake_case (lower-case, underscore spaces) format variable names. <value> right side complex story, can hard-coded (example ), computed using variables variable, returned function, etc.Using variables means can concentrate corresponding values mean rather worrying values . example, next time need compute something based number character’s legs (e.g., many pairs shoes character need), can compute based current value number_of_legs variable rather assume 1.Variables also give flexibility. values can change program run: player’s score increasing, number lives decreasing, number spells can cast grows falls depending use, etc. Yet, can always use value variable perform necessary computations. example, slightly extended number_of_shoes example.noted , can think variable labeled box can store something . means can always “throw away” old value put something new. case variables, “throwing away” part happens automatically, new value overwrites old one. Check , final value variable code ?exercise #1.Note variable (“box name tag”) exists assign something . , following code generate NameError, Python’s way tell never heard variable number_of_hands.However, can create variable hold specific value assigning None . None added language specifically mean value nothing.already seen, can compute value instead specifying . answer ?exercise #2.","code":"number_of_legs = 2<variable-name> = <value># BAD: why 1? Is it because the character has two legs or\n# because we issue one pair of shoes per character irrespective of\n# their actual number of legs?\npairs_of_shoes = 1\n\n# BETTER (but what if our character has only one leg?)\npairs_of_shoes = number_of_legs / 2number_of_legs = 2\n\n# ...\n# something happens and our character is turned into an octopus\nnumber_of_legs = 8\n# ...\n\n# the same code still works and we still can compute the correct number of pairs of shoes\npairs_of_shoes = number_of_legs / 2number_of_legs = 2\nnumber_of_legs = 5\nnumber_of_legs = 1\nnumber_of_legsnumber_of_legs = 2\nnumber_of_gloves = number_of_hands / 2number_of_hands = None # variable exists now, but holds no particular value.number_of_legs = 2 * 2\nnumber_of_legs = 7 - 2\nnumber_of_legs"},{"path":"python-basics.html","id":"assignments-are-not-equations","chapter":"4 Python basics","heading":"4.3 Assignments are not equations!","text":"important: although assignments look like mathematical equations, equations! follow important rule must keep mind understanding assignments: right side expression evaluated first final value computed, final value assigned variable specified left side (put box). means can use variable sides! Let’s take look code:happens computer evaluates last line? First, takes current values variables (2 x 5 y) puts expression. internal step, expression looks likeThen, computes expression right side , computation completed, stores new value xDo exercise #3 make sure understand .","code":"x = 2\ny = 5\nx = x + y - 4x = 2 + 5 - 4x = 3"},{"path":"python-basics.html","id":"constants","chapter":"4 Python basics","heading":"4.4 Constants","text":"Although real power variables can change value, use even value remains constant throughout program. true constants Python, rather agreement names UPPER_CASE. Accordingly, see SUCH_A_VARIABLE know change value. Technically, just recommendation, one can stop modifying value CONSTANT. However, much Python’s ease--use comes agreements (snake_case convention ). encounter agreements later, example, learning objects.Taking account, number legs stays constant throughout game, highlight constancy writeI strongly recommend using constants avoid hardcoding values. First, several identical values mean different things (2 legs, 2 eyes, 2 ears, 2 vehicles per character, etc.), seeing 2 code tell 2 mean (legs? ears? score multiplier?). can, course, figure based code uses number spare extra effort use properly named constant instead. , just read name meaning value becomes apparent meaning actual value mostly interested . Second, decide permanently change value (say, main character now tripod), using constant means one place worry , rest code stays . hard-coded number, exciting9 definitely long search--replace throughout entire code.exercise #4.","code":"NUMBER_OF_LEGS = 2"},{"path":"python-basics.html","id":"value-types","chapter":"4 Python basics","heading":"4.5 Value types","text":"far, used integer numeric values (1, 2, 5, 1000…). Although, Python supports many different value types, first concentrate small subset :integer numbers, already used, e.g. -1, 100000, 42.float numbers can take real value, e.g. 42.0, 3.14159265359, 2.71828.strings can store text. text enclosed either paired quotes \"text\" apostrophes 'text'. means can use quotes apostrophes inside string, long enclosed alternative. E.g., \"students' homework\" (enclosed \", apostrophe ' inside) '\"generalizations false, including one.\" Mark Twain' (quotation enclosed apostrophes). much much strings cover material throughout course.logical / Boolean values either True False.using variable important know type value stores mostly . cases, Python raise error, try computation using incompatible value types. cases, Python automatically convert values certain types, e.g. integer value also real value, conversion 1 1.0 mostly trivial automatic. However, cases may need use explicit conversion. Go exercise #5 try guessing code run throw error due incompatible types?exercise #5.Surprised last one? internally, True also 1 False 0!can explicitly convert one type another using special functions. example, turn number logical value string, simply write str(<value>). examples , result?exercise #6.Similarly, can convert logical/Boolean variable using bool(<value>) function. rules simple, numeric values 0 False, non-zero value converted True. string, empty string '' evaluated False non-empty string converted True. output examples ?exercise #7.Converting integer float numbers using, respectively, int(<value>) float(<value>) trickier. simplest case logical integer/float, True gives int(True) 1 float(True) 1.0 False gives 0/0.0. converting float integer, Python simply drops fractional part (proper rounding!). converting string, must valid number corresponding type error generated. E.g., can convert string like \"123\" integer float won’t work \"a123\". Moreover, can convert \"123.4\" floating-point number integer, fractional part . Given , cells work output produce?exercise #8.","code":"5 + 2.0\n'5' + 2\n'5' + '2'\n'5' + True\n5 + Truestr(10 / 2)\nstr(2.5 + True)\nstr(True)bool(-10)\nbool(0.0)\n\nsecret_message = ''\nbool(secret_message)\n\nbool('False')float(False)\nint(-3.3)\nfloat(\"67.8\")\nint(\"123+3\")"},{"path":"python-basics.html","id":"print","chapter":"4 Python basics","heading":"4.6 Printing output","text":"print value, need use print() function (talk functions general later). simplest case, pass value printed .orOf course, already know variables, rather putting value directly, can pass variable instead value printed .orYou can also pass one value/variable print function values printed one another. example, want tell user breakfast, can doWhat printed code ?exercise #9.However, probably want explicit, print information. example, imagine three variables:, course print(meal, dish, count) nicer print “10 pancakes breakfast,” items bold inserted variables’ values. , need use string formatting. Please note string formatting specific printing, can create new string value via formatting store variable without printing print without storing .","code":"print(5)\n#> 5print(\"five\")\n#> fivenumber_of_pancakes = 10\nprint(number_of_pancakes)\n#> 10breakfast = \"pancakes\"\nprint(breakfast)\n#> pancakesbreakfast = \"pancakes\"\nnumber_of_items = 10\nprint(breakfast, number_of_items)\n#> pancakes 10dinner = \"stake\"\ncount = 4\ndesert = \"cupcakes\"\n\nprint(count, dinner, count, desert)meal = \"breakfast\"\ndish = \"pancakes\"\ncount = 10"},{"path":"python-basics.html","id":"string-formatting","chapter":"4 Python basics","heading":"4.7 String formatting","text":"great resource string formatting Python pyformat.info. Python constantly evolves, now one way format strings. , introduce “old” format based classic string formatting used sprintf function C, Matlab, R, many programming languages. somewhat less flexible newer ones simple tasks difference negligible. Knowing old format useful generality. want learn alternatives, read link .general call \"string formatting\"%(tuple values used formatting). learn tuples later. now, assume just comma-separated list values enclosed round brackets: (1, 2, 3).\"string formatting\", specify want put value via % symbol followed optional formatting info required symbol defines type value. type symbols ares stringd integerf float valueg “optimally” printed float value, scientific notation used large values (e.g., 10e5 instead 100000).example formatting string using integer:limited single value can put string. can specify locations via % must make sure pass right number values right order. running , can figure call actually work (output) produce error?exercise #10.noted , case real values two options: %f %g. latter uses scientific notation (e.g. 1e10 10000000000) make representation compact.exercise #11 get better feeling difference.much formatting can read pyformat.info. However, basics sufficient us start programming first game next chapter.","code":"print(\"I had %d pancakes for breakfast\"%(10))\n#> I had 10 pancakes for breakfastprint('I had %d pancakes and either %d  or %d stakes for dinner'%(2))\nprint('I had %d pancakes and %d stakes for dinner'%(7, 10))\nprint('I had %d pancakes and %d stakes for dinner'%(1, 7, 10))"},{"path":"guess-the-number-single-round.html","id":"guess-the-number-single-round","chapter":"5 Guess the Number: a single round edition","heading":"5 Guess the Number: a single round edition","text":"previous chapter covered Python basics, now ready start developing first game! build step step lot learn input, libraries, conditional statements, indentation.start, create new folder (inside course folder) called, example, “guess--number,” download exercise notebook, copy newly created folder, open Jupyter Notebook. chapter , contain exercises reading understanding code.However, using VS Code program scripts actual game. need create separate file code practice10 (e.g., code01.py11, code02.py, etc.) efficient implementation version control certainly clutter folder. allow see solutions every step, make easier give feedback. submitting assignment, just zip folder submit zip-file.","code":""},{"path":"guess-the-number-single-round.html","id":"chapter-concepts-1","chapter":"5 Guess the Number: a single round edition","heading":"5.1 Chapter concepts","text":"Documenting code.Debuggin code.Getting input user.Using comparison conditional statements.Using indentation group statements together.Using Python libraries.Generating random numbers.","code":""},{"path":"guess-the-number-single-round.html","id":"the-game","chapter":"5 Guess the Number: a single round edition","heading":"5.2 The Game","text":"program game one participant (computer) picks number within certain range (say, 1 10) participant (human player) trying guess . every guess human, computer responds whether actual number lower guess, higher guess, matches . game player correctly guesses number (later version game) runs attempts.first version allow just one attempt overall game algorithm look like :computer generates random number 1 10prints debug purposesprompts user enter guesscompares two numbers print outs outcome: “number lower,” “number higher,” “Spot !”","code":""},{"path":"guess-the-number-single-round.html","id":"lets-pick-a-number","chapter":"5 Guess the Number: a single round edition","heading":"5.3 Let’s pick a number","text":"Let us start implementing just first two steps program. First, create variable holding number computer “picked.” name number_picked (can use meaningful name well might easier stick name). make things simpler beginning, hard-code arbitrary number 1 10 (pick one like). , let us print , know number .12 Use string formatting make things user-friendly, e.g., print something like “number ’ve picked ….” able using knowledge previous chapter. code two-liner:Try two-liner Jupyter Notebook (create empty notebook just ). happy , copy-paste code code01.py read learn run .Put code code01.py.","code":"# 1. create variable and set its value\n# 2. print out the value"},{"path":"guess-the-number-single-round.html","id":"documenting-your-code","chapter":"5 Guess the Number: a single round edition","heading":"5.4 Documenting your code","text":"Now first file Python program, document . Documenting two-lines long simple program may feel silly automatic thing. Later find using several lines comments document single line function. , code works, code can understand. sense, better clean well-documented program currently work correctly undocumented spaghetti code . can fix update former, maintaining updating latter…Python, two ways write comments multiline single lineUse multiline comments write documentation individual files, functions, classes, methods, etc. learn format documentation Numpy docstring style, learn functions. case, start code01.py file multiline comment briefly describes program contains. Minimally, write Guess Number game. probably good idea sketch game .Use single line comments explain happens particular code block. need comment every line explain code human language. comment going . moment, little code need .Document code01.py file.","code":"'''\nA \nmultiline \ncomment\n'''\n\n#  A single line comment."},{"path":"guess-the-number-single-round.html","id":"debugging","chapter":"5 Guess the Number: a single round edition","heading":"5.5 Running and debugging your game in VS Code","text":"Now two-lines-long program, can run already start learning debug . Yes, current program probably simple require actual debugging also simple enough make understanding debugging easier well. debugging crucial skill turns running program black box something transparent easy13 understand. describe debug VS Code might want consult official manual case things changed meantime.two ways run Python program VS Code. First, can use “Run Python File Terminal” play button right. runs program without debugger, use actual runs finalized code. Still, can try running see whether prints .Running code without debugger.alternative debugging tab, one little bug top run button. select , show “Run Debug”. Click button offer various choices different kinds Python projects frameworks. intents purposes, need “Python File: Debug currently active Python file”. Click execute code (run exactly way button).Selecting debugging configuration.probably want click Debugging tab → Run Debug button → Pick configuration time. better way configure use F5 key run code. First, click “create launch.json file” select “Python File: Debug currently active Python file” . see new launch.json file appearing editor look like :Debug configuration launch.json file.’s ! VS Code created configuration . Now can close launch.json file run program simple press F5 button. Try ! , work just like , go trouble? debugger pause execution code whenever encounters problem, giving chance examine variables, run snippets code, etc. contrast, running python file terminal (first option) print error message exit program. Moreover, can use breakpoints pause program line, gives opportunity examine code location need.enable breakpoints clicking left line number interested . , ’ve clicked line 6 can see red dot indicates active breakpoint.Active breakpoint.now run code via F5, program stop line executing .Program paused breakpoint.gives chance see value number_picked variable . already listed local variables (top left). also added list watched variables (Watch, lift middle) also looked value Debug Console (bottom tab) allows execute Python code program paused. explore different ways . example, see can compute number_picked + 1 number_picked * number_picked Watch tab Debug Console.done examining current state program, six buttons top decide next (hover see hints). , left rightContinue (F5): resume program.Step (F10): executes code without going functions (two following options become clearer learn writing functions).Step code (F11)Step code (Shift+F11).Restart program (Ctrl+Shift+F5).Stop program (Shift+F5).better understand works, stop program (Shift+F5) put additional breakpoint first line code (line #5 program, lines comments empty). Run program via F5 pause first line. Can figure value variable number_picked now?answer “” variable exist yet. Remember, program pauses executing line. Use F10 step code line line see variable appears information gets printed .debugging exercise may necessary solve problems current code showed future. hesitate put breakpoint pause program check reality (.e., actual values variables) matches expectations. Use stepping code slow things watch ponder.","code":""},{"path":"guess-the-number-single-round.html","id":"input-function","chapter":"5 Guess the Number: a single round edition","heading":"5.6 Asking a player for a guess","text":"takes two play Guess Number game. computer part picking number, now need ask player enter guess. , use input([prompt]) function.function isolated code accepts (optional) inputs, performs action, , optionally, returns value (output). allows split code smaller chunks easier maintain reuse code. already used print() function print things , str(), bool(), int() float() functions convert values. print() input arbitrary number values (even none, try Jupiter Notebook!), action print things , returns nothing (output). float() function takes (somewhat surprisingly) zero one value input (try giving none one Jupiter Notebook see difference), attempts convert given value float (throwing error, ), returns float value output.Similar input → action → output scheme holds input([prompt]). takes optional prompt string input. prints prompt message waits user enter string press Enter. returns string value. latter bit string important, game need player enter integer string. moment, let us assume input always valid integer number, type valid integers testing program! way can convert integer without extra checks (add future) assign value new variable called guess. Thus, need add single line assignment statement guess variable left side call input() function right side (think nice prompt message) wrapped (inside ) type-conversion integer via int(). Test code , , enter valid integers, conversion works without error.Update code01.py.","code":""},{"path":"guess-the-number-single-round.html","id":"if-statement","chapter":"5 Guess the Number: a single round edition","heading":"5.7 Conditional if statement","text":"Now two numbers: One computer picked (number_picked) one player entered (guess). need compare provide correct output message. , use conditional statement:part required, whereas elif (short “else, ”) else optional. Thus can something, condition true:can use conditional statements game, need understand (1) conditions (2) use indentation mean grouping statements together.","code":"if some_condition_is_true:\n    # do something\nelif some_other_condition_is_true:\n    # do something else\nelif yet_another_condition_is_true:\n    # do yet something else\nelse:\n    # do something only if all conditions above are false.if some_condition_is_true:\n    # do something, but OTHERWISE DO NOT DO ANYTHING \n    # and continue with code execution\n  \n# some code that is executed after the if-statement,\n# irrespective of whether the condition was true or not."},{"path":"guess-the-number-single-round.html","id":"comparisons","chapter":"5 Guess the Number: a single round edition","heading":"5.8 Conditions and comparisons","text":"Condition expression can evaluated see whether True False. straightforward example expression comparisons expressed human language : today Thursday? answer (equal ) 42? raining umbrella?. concentrate comparisons like moment later see Python expression either True False, even look like comparison14.comparison, can use following operators:“equal B” written == B.“equal B” written != B.“greater B” “smaller B” , respectively, > B < B.“greater equal B” “smaller equal B” , respectively, >= B <= B (please note order symbols => =< produce error).Go exercise #1 solve comparisons.Note Python also operator may look identical == (e.g., x == 2 looks equivalent x 2). Moreover, cases also works way. However, subtle difference: == checks whether values identical, whereas checks whether objects (“hold” values) identical. need understand classes objects can appreciate difference, now just keep mind use == (explicitly mentioned needed).can invert logical value using operator, True False False True. means != B == B , correspondingly, == B != B. see works, consider cases indeed equal B .equal B == B evaluates True. != B False, != B → False → True.equal B == B evaluates False. != B True, != B → True → False.Go exercise #2 explore inversion .can also combine several comparisons using /or15 operators. human language, means parts must true: True True → True True False → False, False True → False, False False → False. holds two conditions/comparisons linked via : must true. case one statements must true, e.g. True True → True, True False → True, False True → True, False False → False. , two comparisons/conditions least one true entire expression true.exercises #3 #4.Subtle important point: conditions evaluated left right whole expression resolved one way another. means first expression pair False, second one never evaluated. .e., first second expressions need True know first expression already false, whole expression False case. means code error, even though evaluating int(\"e123\") alone raise ValueError.However, reverse order, int(\"e123\") == 123 needs evaluated first get error messageSimilarly, expression True, need check rest.However, first condition False, need continue (stumble error):exercise #5.Finally, like simple arithmetic, can use brackets () group conditions together. Thus statement “always eat chocolate eat spinach hungry” can written food == \"chocolate\" (food == \"spinach\" hungry). , food == \"chocolate\" food == \"spinach\" hungry evaluated independently, values substituted place condition evaluated.exercise #6.Final thought comparisons: hesitate test Jupyter Notebook using various combinations values pause program condition via breakpoint evaluate comparison Watch Debug Console.","code":"2 * 2 == 5 and int(\"e123\") == 123int(\"e123\") == 123 and 2 * 2 == 4\n# Generates ValueError: invalid literal for int() with base 10: 'e123'2 * 2 == 4 or int(\"e123\") == 1232 * 2 == 5 or int(\"e123\") == 123\n# Generates ValueError: invalid literal for int() with base 10: 'e123'"},{"path":"guess-the-number-single-round.html","id":"indentation","chapter":"5 Guess the Number: a single round edition","heading":"5.9 Grouping statements via indentation","text":"Let us go back conditional -statement. Take look following code example (note : end some_condition_is_true:), statement #1 executed condition true, whereas statement #2 executed irrespective condition.statements #1 #2 appear -statement, Python now first one executed condition true one always runs? answer indentation: 4 (four!) spaces automatically added whenever press Tab VS Code removed whenever press Shift+Tab. indentation puts statement #1 inside -statement. Thus, indentation shows whether statements belong group must executed one another (indentation level statement #2) inside conditional statement, loop, function, class, etc. (statement #1). complex code , example, -statement inside -statement inside loop, express adding levels indentation. E.g.Pay close attention indentation determines statements executed together! wrong indentation level unfortunately common mistake.exercise #7.ifelse statements evaluated one turns True. following ifelse else statements simply ignored.exercise #8.","code":"if some_condition_is_true:\n    statement #1\nstatement #2 # some statements outside of the loop (0 indentation)\nwhile game_is_not_over: # (0 indentation)\n    # statements inside of the loop \n    if key_pressed: # (indentation of 4)\n        # inside loop and if-statement \n        if key == \"Space\": # (indentation of 8)\n            # inside the loop, and if-statement, and another if-statement\n            jump() # (indentation of 12)\n        else: # (indentation of 4)\n            # inside the loop, and if-statement, and else part of another if-statement\n            stand() # (indentation of 12)\n    \n    # statements inside of the loop but outside of the outermost if-statement\n    print(key) # (indentation of 4)\n    \n# some statements outside of the loop (0 indentation)"},{"path":"guess-the-number-single-round.html","id":"checking-the-answer","chapter":"5 Guess the Number: a single round edition","heading":"5.10 Checking the answer","text":"Now necessary tools finish first version game. Add conditional statements code01.py, thatif computer pick smaller player’s guess, print \"number lower!\"computer pick larger player’s guess, print \"number higher!\"two numbers identical, print \"Spot !\"Update code01.pyTest code works. , use breakpoints need better understand control flow check whether comparisons work way expect.","code":""},{"path":"guess-the-number-single-round.html","id":"using-libraries","chapter":"5 Guess the Number: a single round edition","heading":"5.11 Using libraries","text":"game “feature-complete”: computer picks number, player makes guess, computer responds appropriately. However, currently playing sides. Lets make computer pick random number . need use randint(, b). part Python distribution, even install vanilla Python distribution instead using one PsychoPy. However, use straightaway like print() input(). Type randint(1, 3) Jupyter Notebook observe NameError: name ‘randint’ defined.reason Python awful lot functions loading time clog memory things never intended use. Instead, packaged libraries, can import functions (libraries) actually need program. import via import statement go top file (comment file content). several ways can import libraries. First, can import entire library (random library function randint() need) use functions <library>.<function>. randint beI suggest preferred way using libraries forces explicitly mention name library calling function, .e. random.randint() instead just randint(). may look important just one imported library even modestly-sized project import many libraries, figuring library function belongs tricky. Even importantly, different libraries may functions name. case, function using come last library imported. may realize sort mistake really hard track . Thus, unless good reason otherwise, always import entire library use library. notation!Another less explicit option import functions use without library. prefix. can import one function listing allYou can also rename library function importing via . short, using different name library function make harder others (even future-) understand code. However, “standard” renaming patterns used universally likely encounter.Finally, bad way import functions library: random import *. asterisk means want import functions library want call names without random. prefix. Never, never, never16 ! fills environment functions may aware , potentially overwriting functions, creating conflicts, etc. Never ever! showing , point, see code uses approach might think good idea. terrible idea! Import library, functions, can explicitly show library relying calling function. Always remember Zen Python: “Explicit better implicit.”","code":"import random\n\ncomputer_pick = random.randint(1, 5)from random import randint, randrange\n\ncomputer_pick = randint(1, 5)# this is a standard way to import these two libraries\nimport numpy as np\nimport pandas as pd\n\nnp.abs(-1)\n\n# you can rename individual functions as well, if you really have to (but, please, don't!)\nfrom random import randint as random_integer\n\ncomputer_pick = random_integer(1, 5)"},{"path":"guess-the-number-single-round.html","id":"picking-a-number-randomly","chapter":"5 Guess the Number: a single round edition","heading":"5.12 Picking a number randomly","text":"Now know import library, can use randint() function. , save copy original code code02.py. Import library use randint() generate random number 1 10. Read documentation randint() understand use . Reading manuals necessary part programming, good point start practicing.implemented code02.py, run several times check computer pick different random values. , use breakpoints want double-check going .Put code code02.py.Congratulations, just programmed first computer game! Yes, simple key ingredients: random decision computer, user input, feedback. Next time, learn loops allow multiple attempts start writing functions make code modular reliable. meantime, let us solidify knowledge programming yet another game!","code":""},{"path":"guess-the-number-single-round.html","id":"one-armed-bandit-a-single-round-edition","chapter":"5 Guess the Number: a single round edition","heading":"5.13 One-armed bandit (a single round edition)","text":"know everything need program simple version “one-armed bandit” game. game logic:Import random library, use randint functionGenerate three random integers (say, 1 5) store three variables slot1, slot2, slot3.Print numbers, use string formatting make look nice.addition,\nthree values , print \"Three kind!\".\ntwo numbers match, print \"Pair!\".\nprint anyting, numbers different.\nthree values , print \"Three kind!\".two numbers match, print \"Pair!\".print anyting, numbers different.forget document new code03.py file feel three use breakpoints debug .Put code code03.py.","code":""},{"path":"guess-the-number-single-round.html","id":"submitting-for-the-seminar","chapter":"5 Guess the Number: a single round edition","heading":"5.14 Submitting for the seminar","text":"seminar, submit zipped folder exercise notebook three programs.","code":""},{"path":"guess-the-number-multi-round.html","id":"guess-the-number-multi-round","chapter":"6 Guess the Number: a multi round edition","heading":"6 Guess the Number: a multi round edition","text":"previous chapter, programmed single-attempt-“Guess Number” game. Now, expand allow multiple attempts add bells--whistles make fun. Create new subfolder download exercise notebook start!","code":""},{"path":"guess-the-number-multi-round.html","id":"chapter-concepts-2","chapter":"6 Guess the Number: a multi round edition","heading":"6.1 Chapter concepts","text":"Repeating code using loop.Making emergency exit loop.","code":""},{"path":"guess-the-number-multi-round.html","id":"while-loop","chapter":"6 Guess the Number: a multi round edition","heading":"6.2 While loop","text":"want repeat something, need use loops. two types loops: loop, repeated condition true, loop iterates items (use later).basic structure loop isThe <condition> expression evaluated either True False, just like ...elif...else conditional statement. Also, indentations rules determine code inside loop outside.exercise #1.Let us use loop allow player keep guessing finally get right. can copy-paste code programmed last seminar redo scratch (strongly recommend latter!). overall program structure followingPut code code01.py.forget document file use breakpoints step overs explore program flow.","code":"# statements before the loop\n\nwhile <condition>:\n    # statements inside are executed\n    # repeatedly for as long as\n    # the condition is True\n    \n# statements after the loop# import random library so you can use randint function\n\n# generated a random number and store in number_picked variable\n# get player input, convert it to an integer, and store in guess variable\n\n# while players guess is not equal to the value the computer picked:\n    # print out \"my number is smaller\" or \"my number is larger\" using if-else statement\n    # get player input, convert it to an integer, and store in guess variable\n    \n# print \"Spot on!\" \n# (because if we got here that means guess is equal to the computer's pick)"},{"path":"guess-the-number-multi-round.html","id":"counting-attempts","chapter":"6 Guess the Number: a multi round edition","heading":"6.3 Counting attempts","text":"Now let us add variable count total number attempts player. , create new variable (call attempts something similar) loop initialize 0. Add 1 every time player enters guess. loop, expand \"Spot !\" message adding information number attempts. Use string formatting make things look nice, e.g., \"Spot , needed just 5 attempts!\". Check number attempts required matches number attempts reported program!Put code code02.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"break","chapter":"6 Guess the Number: a multi round edition","heading":"6.4 Breaking (and exiting)","text":"Code inside loop executed repeatedly condition True , importantly, code inside executed condition evaluated . However, sometimes may need abort sooner without executing remaining code. , Python break statement causes program exit loop immediately without executing rest code inside loop, program continues code loop.exercise #2 build intuition.","code":"# this code runs before the loop\n\nwhile <somecondition>:\n  # this code runs on every iteration\n  \n    if <someothercondition>:\n        break\n  \n  # this code runs on every iteration but not when you break out of the loop\n\n# this code runs after the loop"},{"path":"guess-the-number-multi-round.html","id":"limiting-number-of-attempts-via-break","chapter":"6 Guess the Number: a multi round edition","heading":"6.5 Limiting number of attempts via break","text":"Let’s put player pressure! Decide maximal number attempts allow stores CONSTANT. Pick appropriate name (e.g. MAX_ATTEMPTS) REMEMBER, CAPITAL LETTERS constant name! Now, use break quit loop, current attempt number greater MAX_ATTEMPTS. Think (within code inside loop) check .Put code code03.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"correct-end-of-game-message","chapter":"6 Guess the Number: a multi round edition","heading":"6.6 Correct end-of-game message","text":"Let us update final message. Currently says “Spot …” assumed program exited loop player gave correct answer. limited attempts necessarily case. Now two reasons exited loop:player answered correctlyThe player ran attempts.Use -else conditional statement print appropriate message. E.g., print \"Better luck next time!, player lost (ran attempts).Put code code04.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"limiting-number-of-attempts-without-a-break","chapter":"6 Guess the Number: a multi round edition","heading":"6.7 Limiting number of attempts without a break","text":"Although idea add break statement, use sparingly. Without break single place code need check understand program exit loop: condition. However, add break, now two places need examined. every additional break keeps adding . mean avoid costs! use , makes code easier understand. always check modified condition also trick.Let us try exactly . Modify code work without break statement. need complicated condition loop. repeats player’s guess incorrect number attempts still less maximally allowed. Test code works win lose.Put code code05.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"show-remaining-attempts","chapter":"6 Guess the Number: a multi round edition","heading":"6.8 Show remaining attempts","text":"user interface! Modify input prompt message include number remaining attempts. E.g. \"Please enter guess, X attempts remaining\".Put code code06.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"guess-the-number-repeat-game","chapter":"6 Guess the Number: a multi round edition","heading":"6.9 Repeating the game","text":"Let us give option player play . means putting current code inside another loop (called nested loops) repeated long player wants keep playing. code look following:Pay extra attention indentations group code properly!Put code code07.py.","code":"# import random library so you can use randint function\n\n# define MAX_ATTEMPTS\n\n# define a variable called \"want_to_play\" and set to True\n# while the player still wants to play\n  \n  # your current working game code goes here\n  \n  # ask user whether via input function. E.g. \"Want to play again? Y/N\"\n  # want_to_play should be True if user input is equal to \"Y\" or \"y\"\n  \n# very final message, e.g. \"Thank you for playing the game!\""},{"path":"guess-the-number-multi-round.html","id":"you-do-not-need-a-comparison-if-you-already-have-the-value","chapter":"6 Guess the Number: a multi round edition","heading":"6.10 You do not need a comparison, if you already have the value","text":"updated code, want_to_play variable either True False. used loop repeats value True. Sometimes, people write want_to_play == True express . technically correct certaintly work correctly, also redundant. Since want_to_play can True False comparison turns True == True (course True) False == True (False). comparing either value True produces exactly value. Thus, can just write want_to_play: use logical value directly.","code":""},{"path":"guess-the-number-multi-round.html","id":"best-score","chapter":"6 Guess the Number: a multi round edition","heading":"6.11 Best score","text":"“proper” game typically keeps track players’ performance. Let us record fewest number attempts player needed guess number. , create new variable fewest_attempts set MAX_ATTEMPTS (bad player can ). Think, need create . update game round. Add information “Best far” round-message.Put code code08.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"counting-game-rounds","chapter":"6 Guess the Number: a multi round edition","heading":"6.12 Counting game rounds","text":"Let us count many rounds player played. idea implementation counting attempts. Create new variable, initialize 0, increment 1 whenever new round starts. Include total number rounds final message, e.g. “Thank playing game X times!”Put code code09.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"wrap-up","chapter":"6 Guess the Number: a multi round edition","heading":"6.13 Wrap up","text":"excellent, now proper working computer game game rounds, limited attempts, best score, ! Zip folder submit.","code":""},{"path":"guess-the-number-ai.html","id":"guess-the-number-ai","chapter":"7 Guess the Number: AI takes a turn","heading":"7 Guess the Number: AI takes a turn","text":"Let us program Guess Number game again17 reverse roles. Now pick number computer guess. Think algorithm computer use reading next paragraph18.optimal way use middle interval guess. way rule half numbers either greater smaller guess (guess number correctly, course). , know number 1 10, split things middle, picking 5 6, pick 5.5 (assume can use integers). opponent tells number greater pick, know must somewhere guess original upper limit, e.g., 5 10. Conversely, opponent responds “lower,” number lower limit guess, e.g., 1 5. next attempt, pick split interval either guess number correctly end interval contains just one number. need guess anymore.implement program, need learn functions, document like pro, use libraries.","code":""},{"path":"guess-the-number-ai.html","id":"chapter-concepts.","chapter":"7 Guess the Number: AI takes a turn","heading":"7.1 Chapter concepts.","text":"Writing functions.Understanding variable scopes.Adopting standard ways document code.Using libraries.","code":""},{"path":"guess-the-number-ai.html","id":"guess-the-number-players-response","chapter":"7 Guess the Number: AI takes a turn","heading":"7.2 Player’s response","text":"Let us warm writing code allow player respond computer’s guess. Recall just three options: number greater, smaller, equal computer’s guess. suggest using, respectively, >, <, = symbols communicate . need write code prompt player response enter one symbols. .e., prompt repeatedly repeated enter anything else. Thus, definitely need use input([prompt]) loop. Think useful informative prompt message . Test works. Using breakpoints might useful .Put code code01.py.","code":""},{"path":"guess-the-number-ai.html","id":"function","chapter":"7 Guess the Number: AI takes a turn","heading":"7.3 Functions","text":"already now use function, now turn learn care. purpose function isolate certain code performs single computation making testable reusable. Let us go first sentence bit bit using examples.","code":""},{"path":"guess-the-number-ai.html","id":"function-performs-a-single-computation","chapter":"7 Guess the Number: AI takes a turn","heading":"7.3.1 Function performs a single computation","text":"already told reading code easy every action spelled-computers simple clear way. However, lot simple things can overwhelming confusing. Think final code previous seminar: two loops conditional statements nested inside. Add many branches trace, never quite sure happen. cognition working memory, use trace branches, limited just four items19.Thus, function perform one computation / action conceptually clear purpose understood directly name , , single sentence describes it20. name function typically verb function action. need sentence explain function , consider splitting code . mean entire description / documentation must fit single sentence. full description can lengthy, particularly underlying computation complex many parameters consider. However, optional details tell reader function job behavior can modified. Still, able understand job just name single sentence. repeating stressing much conceptually simple single-job functions foundation clear robust reusable code. future-grateful work easy--understand isolated reliable code wrote.","code":""},{"path":"guess-the-number-ai.html","id":"function-isolates-code-from-the-rest-of-the-program","chapter":"7 Guess the Number: AI takes a turn","heading":"7.3.2 Function isolates code from the rest of the program","text":"Isolation means code runs separate scope things exist function arguments (limited number values pass outside fixed meaning) local variables define inside function. access variables defined outside script21 variables defined inside functions. Conversely, neither global script functions access variables values use inside. means need study code inside function understand works. Accordingly, write code independent global context function can used . isolation practical (run-time access variables outside means fewer chance things go terribly wrong) conceptual (context required understand code).","code":""},{"path":"guess-the-number-ai.html","id":"function-makes-code-easier-to-test","chapter":"7 Guess the Number: AI takes a turn","heading":"7.3.3 Function makes code easier to test","text":"can build even moderately complex programs can certain individual chunks code every possible condition. produce correct results? fail clearly raise correct error, inputs wrong? use defaults required? However, testing chunks together means running extreme number runs need test possible combinations conditions one chunk given possible conditions chunk, etc. Functions make life much easier. single point entry, fixed number parameters, single return value, isolated (see ), can test one time independent functions rest code. called unit testing heavy use automatic unit testing22 ensures reliable code absolute majority programs apps use23.","code":""},{"path":"guess-the-number-ai.html","id":"function-makes-code-reusable","chapter":"7 Guess the Number: AI takes a turn","heading":"7.3.4 Function makes code reusable","text":"Sometimes, given primary reason use functions. Turning code function means can call function instead copy-pasting code. latter approach terrible idea means maintain code many places might even sure just many. problem even code extremely simple. , define standard way compute initial taking first symbol string (learn indexing slicing details later). code simple gets.Imagine decided change use first two symbols. , computation complicated, use just replace [0] [:2]. code computation. use Replace option sometimes might use first element purposes. edit code, bound forget locations (time) making things even less consistent confusing. Turning code function means need modify test just one location. original code implemented via function.“alternative” initial computation. Note code uses function stays sameThus, turning code function particularly useful reused code complex pays even computation simple trivial example . function single code chunk worry can sure computation performed whenever call function (several copies code might might identical).Note put reusable code last least reason use functions. three reasons far important. conceptually clear isolated testable code advantageous even call function . still makes code easier understand test helps reduce complexity replacing chunks code meaning. Take look example . first code takes first symbol action (taking first symbol) mean anything , just mechanical computation. original context initial_for_file = filename[0] additional comments give meaning. contrast, calling function called compute_initial tells happening, disambiguates purpose. suspect future-pro-disambiguation anti-confusion.","code":"...\ninitial = \"test\"[0]\n...\ninitial_for_file = filename[0]\n...\ninitial_for_website = first_name[0]\n...def generate_initial(full_string):\n    \"\"\"Generates an initial using first symbol.\n    \n    Parameters\n    ----------\n    full_string : str\n    \n    Returns\n    ----------\n    str : single symbol\n    \"\"\"\n    return full_string[0]\n\n...\ninitial = generate_initial(\"test\")\n...\ninitial_for_file = generate_initial(filename)\n...\ninitial_for_website = generate_initial(first_name)\n...def generate_initial(full_string):\n    \"\"\"Generates an initial using first TWO symbols.\n    \n    Parameters\n    ----------\n    full_string : str\n    \n    Returns\n    ----------\n    str : two symbols long\n    \"\"\"\n    return full_string[:2]\n\n...\ninitial = generate_initial(\"test\")\n...\ninitial_for_file = generate_initial(filename)\n...\ninitial_for_website = generate_initial(first_name)\n...if filename[0] == \"A\":\n    ...\n    \nif compute_initial(filename) == \"A\":\n    ..."},{"path":"guess-the-number-ai.html","id":"functions-in-python","chapter":"7 Guess the Number: AI takes a turn","heading":"7.4 Functions in Python","text":"","code":""},{"path":"guess-the-number-ai.html","id":"defining-a-function-in-python","chapter":"7 Guess the Number: AI takes a turn","heading":"7.4.1 Defining a function in Python","text":"function Python looks like (note indentation : end first line)parameters optional, return value. Thus minimal function beYou must define function (!) calling (one times). Thus, create functions code uses .exercise #1.must also keep mind redefining function (defining technically different function name) overwrites original definition, latest version retained can used.exercise #2.Although example exercise makes problem easy spot, large code spans multiple files uses various libraries, solving problem may straightforward!","code":"def <function name>(param1, param2, ...):\n    some internal computation\n    if somecondition:\n        return some value\n    return some other valuedef minimal_function():\n    pass # pass means \"do nothing\"def do_something():\n    \"\"\"\n    This is a function called \"do_something\". It actually does nothing.\n    It requires no input and returns no value.\n    \"\"\"\n    return\n    \ndef another_function():\n    ...\n    # We call it in another function.\n    do_something()\n    ...\n\n# This is a function call (we use this function)\ndo_something()\n\n# And we use it again!\ndo_something()\n\n# And again but via another_function call\nanother_function()"},{"path":"guess-the-number-ai.html","id":"function-arguments","chapter":"7 Guess the Number: AI takes a turn","heading":"7.4.2 Function arguments","text":"function may need arguments (also called parameters), perform fixed action:However, may need pass information function via arguments order influence function performs action. Python, simply list arguments within round brackets function name (bells whistles keep simple now). example, write function computes prints person’s age given two parameters 1) birth year, 2) current year:good idea give meaningful names functions, parameters, variables. following code produce exactly result understanding much harder (always use meaningful names!):calling function, must pass correct number parameters pass correct order, another reason function arguments meaningful names24.exercise #3.call function, values pass function assigned parameters used local variables (local bit later). However, matter came values, whether variable, hard-coded, returned another function. using numeric, logical, string values (immutable types), can assume link original variable function produced gone (’ll deal mutable types, like lists, later). Thus, writing function reading code, just assume set value call can ignore context call made","code":"def ping():\n    \"\"\"\n    Machine that goes \"ping!\"\n    \"\"\"\n    print(\"ping!\")def print_age(birth_year, current_year):\n    \"\"\"\n    Prints age given birth year and current year.\n    \n    Parameters\n    ----------\n    birth_year : int\n    current_year : int\n    \"\"\"\n    print(current_year - birth_year)def x(a, b):\n    print(b - a)# hardcoded\nprint_age(1976, 2020)\n\n# using values from variables\ni_was_born = 1976\ntoday_is = 2020\nprint_age(i_was_born, today_is)\n\n# using value from a function\ndef get_current_year():\n    return 2020\n\nprint_age(1976, get_current_year())"},{"path":"guess-the-number-ai.html","id":"functions-returned-value-output","chapter":"7 Guess the Number: AI takes a turn","heading":"7.4.3 Functions’ returned value (output)","text":"function may perform action without returning value caller (print_age function ). However, may need return value instead. example, make things general, might want write new function called compute_age returns age instead printing (can always print ).Note even function returns value, retained actually used (stored variable, used value, etc.). Thus, just calling store returned value anywhere!exercise #4.","code":"def compute_age(birth_year, current_year):\n    \"\"\"\n    Computes age given birth year and current year.\n\n    Parameters\n    ----------\n    birth_year : int\n    current_year : int\n    \n    Returns\n    ----------\n    int : age\n    \"\"\"\n    return current_year - birth_year"},{"path":"guess-the-number-ai.html","id":"scopes-for-immutable-values","chapter":"7 Guess the Number: AI takes a turn","heading":"7.4.4 Scopes (for immutable values)","text":"discussed , turning code function isolates , makes run scope. Python, variable exists scope defined . defined global script, exists global scope global variable. However, accessible (least without special effort via global operator) within function. Conversely, function’s parameters variables defined inside function, exists accessible inside function. fully invisible outside world accessed global script another function. Conversely, changes make function parameter local variable effect outside world25.purpose scopes isolate individual code segments , modifying variables within one scope effect scopes. means writing debugging code, need worry code scopes concentrate code working . scopes isolated, may identically named variables , however, relationship exists parallel universes. Thus, want know value variable , must look within scope ignore scopes (even names match!).exercise #5.","code":"# this is variable `x` in the global scope\nx  = 5 \n\ndef f1():\n  # This is variable `x` in the scope of function f1\n  # It has the same name as the global variable but\n  # has no relation to it: many people are called Sasha \n  # but they are still different people. Whatever you\n  # happens to `x` in f1, stays in f1's scope.\n  x = 3\n  \n  \ndef f2(x):\n  # This is parameter `x` in the scope of function f2.\n  # Again, no relation to other global or local variables.\n  # It is a completely separate object, it just happens to \n  # have the same name (again, just namesakes)\n  print(x)"},{"path":"guess-the-number-ai.html","id":"players-response-as-a-function","chapter":"7 Guess the Number: AI takes a turn","heading":"7.5 Player’s response as a function","text":"Let us put theory functions practice. Use code created acquire player’s response turn function. suggest call input_response (something along lines). Test code works calling function main script.Put code code02.py.","code":""},{"path":"guess-the-number-ai.html","id":"debugging-a-function","chapter":"7 Guess the Number: AI takes a turn","heading":"7.6 Debugging a function","text":"Now first function, can make sense three step //buttons debugger offers . Copy-paste following code separate file (call test01.py, example).First, put break point line main script calls function f2(). Run debugger via F5 program pause line. now press F10 (step ), program go next line print(z). However, press F11 (step ) instead, program step function go x = x + 5 line. inside function, two choices just looked also, can press Shift+F11 step function. , program run code reach next line outside function (end print(z) ). Experiment putting breakpoints various lines stepping //get hang useful debugging tools.Now, put breakpoint inside f1() function run code via F5. Take look left pane, see Call Stack tab. yellow highlighted line editor shows currently (inside f1() function), Call Stack shows get . case show:calls stacked bottom top, means function called main module line 9, ended function f2 line 7, function f1 line 2. Experiment stepping functions keeping eye . might need information frequently useful later projects multiple nested function calls.","code":"def f1(x, y):\n  return x / y\n  \ndef f2(x, y):\n  x = x + 5\n  y = y * 2\n  return f1(x, y)\n  \nz = f2(4, 2)\nprint(z)"},{"path":"guess-the-number-ai.html","id":"numpy-docstring","chapter":"7 Guess the Number: AI takes a turn","heading":"7.7 Documenting your function","text":"Writing function half job. need document ! Remember, good habit makes code easy use reuse. different ways document code use NumPy docstring convention. example documented functionTake look manual document input_response function. need Parameters section currently accepts inputs.Update code code02.py.","code":"def generate_initial(full_string):\n    \"\"\"Generates an initial using first symbol.\n    \n    Parameters\n    ----------\n    full_string : str\n    \n    Returns\n    ----------\n    str : single symbol\n    \"\"\"\n    return full_string[0]"},{"path":"guess-the-number-ai.html","id":"using-prompt","chapter":"7 Guess the Number: AI takes a turn","heading":"7.8 Using prompt","text":"future, asking specific number current guess computer, thus use fixed prompt message. Modify input_response function adding guess parameter. , modify prompt used input() include number. Update functions’ documentation. Test calling different values guess parameter.Put code code03.py.","code":""},{"path":"guess-the-number-ai.html","id":"splitting-interval-in-the-middle","chapter":"7 Guess the Number: AI takes a turn","heading":"7.9 Splitting interval in the middle","text":"Let us practice writing functions bit . Recall computer use middle interval guess. Create function (let us call split_interval() something like ) takes two parameters — lower_limit upper_limit — returns integer closest middle interval. tricky part convert potentially float number (e.g, trying find interval 1..10) integer. can use function int() . However, read documentation carefully, perform proper rounding (? read docs!). Thus, round() number closest integer converting .Write function, document , test checking numbers correct.Put split_interval() function testing code code04.py.","code":""},{"path":"guess-the-number-ai.html","id":"single-round","chapter":"7 Guess the Number: AI takes a turn","heading":"7.10 Single round","text":"functions need, let us write code initialize game play single round. initialization boils creating two variables correspond lower upper limits game range (used 1 10 far, can always change ). Next, computer generate guess (split_interval() function ) ask player guess (input_response() function). response (stored separate variable, think name ), can update upper lower limit using ..elif..else statement. Print joyous message, computer’s guess correct.Put functions script code code05.py.","code":""},{"path":"guess-the-number-ai.html","id":"multiple-rounds","chapter":"7 Guess the Number: AI takes a turn","heading":"7.11 Multiple rounds","text":"Extend game, computer keeps guessing finally wins. already know use loop, just think can use participant’s response loop condition variable. Also, think initial value variable use call input_response() one location.Put updated code code06.py.","code":""},{"path":"guess-the-number-ai.html","id":"playing-again","chapter":"7 Guess the Number: AI takes a turn","heading":"7.12 Playing again","text":"Modify code, can play game several times. already know thing need consider exactly perform initialization round. already implemented last game, might tempted look , even, copy-paste code. However, recommend writing scratch. Remember, aim write program learn , therefore, journey important destination.Put updated code code07.py.","code":""},{"path":"guess-the-number-ai.html","id":"best-score-1","chapter":"7 Guess the Number: AI takes a turn","heading":"7.13 Best score","text":"Add code count number attempts computer required round \nreport best score (fewest number attempts) game . need one variable count number attempts one keep best score. , try writing without looking previous game.Put updated code code08.py.","code":""},{"path":"guess-the-number-ai.html","id":"using-you-own-libraries","chapter":"7 Guess the Number: AI takes a turn","heading":"7.14 Using you own libraries","text":"already know use existing libraries can also create use . Take two functions developed put new file called utils.py (forget put multiline comment top file remind inside!) . Copy remaining code (global script) code09.py. work current state won’t find two functions (try see error message), need import utils module. Importing works exactly way libraries. Note even though file utils.py, module name utils (without extension).Put function utils.py, remaining code code09.py.","code":""},{"path":"guess-the-number-ai.html","id":"keep-imports-tidy","chapter":"7 Guess the Number: AI takes a turn","heading":"7.15 Ordnung muss sein!","text":"far, imported one library . However, Python highly modular, common many imports single file. several rules make easier track imports. import libraries, import statements top file avoid putting random order. recommended order 1) system libraries, like os random; 2) third-party libraries, like psychopy; 3) project modules . , within section put libraries alphabetically, soThis may look particularly useful simple code projects grow, need include libraries. Keeping order makes easy understand libraries use non-standard. Alphabetic order means can quickly check whether library included, can quickly find location import statement appear.","code":"import os\nimport random"},{"path":"guess-the-number-ai.html","id":"putting-video-into-videogames","chapter":"7 Guess the Number: AI takes a turn","heading":"7.16 Putting video into videogames","text":"Submit files ready excitement moving onto “proper” videogames PsychoPy.","code":""},{"path":"psychopy-basics.html","id":"psychopy-basics","chapter":"8 Gettings started with PsychoPy","heading":"8 Gettings started with PsychoPy","text":"program first game using PsychoPy, need spend time figuring basics. suitable library writing games, might want use Python Arcade PyGame. However, currently best Python library developing psychophysical experiments ().","code":""},{"path":"psychopy-basics.html","id":"chapter-concepts-3","chapter":"8 Gettings started with PsychoPy","heading":"8.1 Chapter concepts","text":"Understanding use classes objects.Using named parameters functions.Understanding PsychoPy units system.Using basic Psycho visual stimuli handling user inputs.","code":""},{"path":"psychopy-basics.html","id":"minimal-psychopy","chapter":"8 Gettings started with PsychoPy","heading":"8.2 Minimal PsychoPy code","text":"Copy-paste following code code01.py file (remember create new folder chapter?):Run check PsychoPy work. get error saying psychopy library found, check active Python interpreter. get gray window PsychoPy title. Press key (click window, switched another one, registers key press) close. exciting show everything works .Put code code01.py.code simple packs quite novel bits. First line easy, simply import visual event modules psychopy library (library can organized sublibraries make things even modular). , create object win using class Window custom size. Third line uses function waitKeys() event module wait key press. last one closes window calling close method. little trouble lines #1 #3 need learn object-oriented programming understand #2 #4.","code":"\"\"\"\nA minimal PsychoPy code.\n\"\"\"\n\n# this imports two modules from psychopy\n# visual has all the visual stimuli, including the Window class\n# that we need to create a program window\n# event has function for working with mouse and keyboard\nfrom psychopy import visual, event\n\n# creating a 800 x 600 window\nwin = visual.Window(size=(800, 600))\n\n# waiting for any key press\nevent.waitKeys()\n\n# closing the window\nwin.close()"},{"path":"psychopy-basics.html","id":"classes-and-objects","chapter":"8 Gettings started with PsychoPy","heading":"8.3 Classes and objects","text":"PsychoPy library collection classes use create objects, approach called object-oriented programming. core idea name: Instead keeping variables (data) separate functions (actions), combine object attributes26 (variables) methods (functions). approach utilizes natural tendency perceive world collection interacting objects.First, need understand important distinction classes objects. class “blueprint” describes properties behavior objects class. “blueprint” used create instance class, called object. example, Homo sapiens class describes species certain properties, height, can certain things, running. However, Homo sapiens class concept height specific height . E.g., ask “height Homo sapiens?” average (mean, median, etc.) height individuals class. Similarly, say “Run, Homo sapiens! Run!” abstract concepts trouble performing real actions like . Instead, Alexander Pastukhov instance Homo sapiens class specific height specific (particularly good) ability run. instances Homo sapiens (people) different height different (typically better) ability run. Thus, class describes common properties methods instances class (objects) . individual object behave differently different values properties. means whenever meet Homo sapien, sure height per se need look individual instance figure height .Window class describes properties PsychoPy window must actions can perform (can see complete list manual). create object, use class definition store result variable. code call Window class27 passing custom parameters (size=(800, 600)) store object returns variable win.Attributes , essentially, variables belong class , therefore, variables object possess. example, Window class size attribute determines -screen size pixels. also (background) color, attribute determines whether shown full screen mode, etc. Thus, win object attributes specific values.understand properties class/object distinction better, put breakpoint third line code (event.waitKeys()) fire debugger via F5. window created, execution pause find win object Variables/Locals. Click expand show attributes values, including size (check [800, 600]). Note see Window list. class, abstract concept, whereas win instance object class.Methods, Window.close() , essentially, functions belong class/object perform certain actions object. example, method close() closes window, flip() updates finished drawing , etc. important remember method act object belongs instances class. means can create two windows (win1 win2) calling win1.close() close first second window (try !). goes attributes, changing one object affect objects class, just like changing value one variable affect ones.Although barely scratch surface object-oriented programming, enough us able use classes defined us PsychoPy library.","code":""},{"path":"psychopy-basics.html","id":"arguments-by-position-or-name","chapter":"8 Gettings started with PsychoPy","heading":"8.4 Function parameters: default values, passing by position or by name","text":"curious bits visual.Window(size=(800, 600)) call need discuss. curiosities related functions (, therefore, methods) classes per se. First, constructor method Window class lot arguments (construct object, call constructor method class, talking functions). yet, passed one . can specify default values individual parameters. case, parameter omitted, default value used insteadIf look documentation, see Window class constructor parameters default value. part PsychoPy’s philosophy combining rich customization (just look sheer number parameters!) simplicity use sensible defaults (specify nothing window still work).Second, just pass value specified parameter value via size=(800, 600). notation called keyword arguments. advantage making explicit parameter passing value . Plus, allows put parameters order, relevant given context28. use names, values assigned individual parameters based position (.k.. positional parameters). can even mix two, positional parameters must come first, see documentation want know .","code":"def divide(x1, x2=2):\n  \"\"\"\n  Divides numbers, uses 2 as a second value if a second term is omitted.\n  \n  Parameters:\n  ----------\n  x1 : number\n  x2 : number, defaults to 2\n  \n  Returns:\n  ----------\n  number\n  \"\"\"\n  return x1 / x2\nprint(divide(2))\n#> 1.0\nprint(divide(2, 4))\n#> 0.5# using positional parameters\nprint(divide(2, 4))\n#> 0.5# using keyword arguments\nprint(divide(x2=4, x1=2))\n#> 0.5# mixing positional and keyword arguments\nprint(divide(2, x2=4))\n#> 0.5"},{"path":"psychopy-basics.html","id":"adding-main-loop","chapter":"8 Gettings started with PsychoPy","heading":"8.5 Adding main loop","text":"Currently, much happening program. One thing need add loop can repeatedly draw window (update via flip() method), check user input, perform necessary actions.First, let us add loop handling user inputs (fun drawing part next). loop goes opening closing window:loop repeated user presses escape key , therefore, need variable signals . approach create variable gameover initializing False repeat loop long game . , loop, use function event.getKeys() check whether escape button pressed (, need pass keyList=['escape']). function returns list keys, pressed meantime empty list, keys keyList pressed. Store returned value temporary variable (tend call keys). learn lists next chapter, now use ready-made: len(keys) > 0 comparison True list empty. list indeed empty, means user pressed escape (key specified function call) game . Think can without statement, computing logical value directly?Put code code02.py.","code":"importing libraries\nopening the window\n\n--> our main loop <--\n\nclosing the window"},{"path":"psychopy-basics.html","id":"adding-text-message","chapter":"8 Gettings started with PsychoPy","heading":"8.6 Adding text message","text":"Although now running nice game loop, still boring gray window look . Let us create text stimulus, say “Press escape exit” display loop. use visual.TextStim class PsychoPy library.First, need create press_escape_text object (instance TextStim) main loop. quite parameters can play minimally, need pass window text displayed (win variable) actual text want display (text=\"Press escape exit\"). settings PsychoPy use defaults (default font family, color size, placed right windows’ center).show visuals PsychoPy, first draw element calling draw() method update window flipping29 . Note call flip() stimuli drawn. typically organize code separate chunk prepend comment line # drawing stimuli.# drawing stimuli chunk goes inside main loop either before30 keyboard check. Organize latter also separate code chunk brief comment.Put code code03.py.Now, nice, although static, message positioned window’s center tells can exit game. Check manual page visual.TextStim try changing passing additional parameters class call. example can change color, whether text bold /italic, aligned, etc. However, want change text displayed, read .","code":"press_escape_text = visual.TextStim(win, \"Press escape to exit\")"},{"path":"psychopy-basics.html","id":"adding-a-square-and-placing-it-not-at-the-center-of-the-window","chapter":"8 Gettings started with PsychoPy","heading":"8.7 Adding a square and placing it not at the center of the window","text":"Now, let us figure create move visuals arbitrary location screen. principle, straightforward every visual stimulus (including TextStim just used) pos property specifies (guessed !) position within window. However, make life easier, PsychoPy first complicates five (5!) different position units systems.start exploring units, let us create simple white square. visual class need visual.Rect. Just like TextStim , requires win variable (knows window belongs ), width (defaults 0.5 mysterious units), height (also defaults 0.5), pos (defaults (0,0)), lineColor (defaults white) fillColor (defaults None). Thus, get “standard” white outline square size (0.5, 0.5) units (0, 0) location need pass win variable: white_square = visual.Rect(win). However, computers curious bug prevents PsychoPy drawing outline correctly. end staring empty screen, add fillColor=\"white\" call see filled white square.draw square just like drew text stimulus, via draw() method. Create code (either keep text draw , drop text), run see white square.Put code code04.py.? square really square? Well, ’ve warned : Five units systems!","code":""},{"path":"psychopy-basics.html","id":"psychopy-units","chapter":"8 Gettings started with PsychoPy","heading":"8.8 Five units systems","text":"","code":""},{"path":"psychopy-basics.html","id":"psychopy-units-height","chapter":"8 Gettings started with PsychoPy","heading":"8.8.1 Height units","text":"height units everything specified units window height. center window (0,0) window goes vertically -0.5 0.5. However, horizontal limits depend aspect ratio. 800×600 window (4:3 aspect ratio), go -0.666 0.666 (window 1.3333 window heights wide). 600×800 window (3:4 aspect ratio) -0.375 0.375 (window 0.75 window heights wide), square window 600×600 (aspect ratio 1:1) -0.5 0.5 (, cases goes -0.5 0.5 vertically). means actual -screen distance units axes. square size=(0.5, 0.5) actually square (spans distance vertically horizontally). Thus, height units make sizing objects easier placing horizontal axis correctly harder (need know aspect ratio).Modify code specifying unit system create window: win = visual.Window(..., units=\"height\"). Play code specifying position square create . just need pass extra parameter pos=(<x>, <y>).Put code code05.py.way, way : y zero? Unfortunately, unlike x-axis, y-axis can go ways. PsychoPy y-axis points (negative values move square positive ). However, use Eyelink eye tracker record participants looked screen, assumes y-axis starts top screen points (confusing, forget overlaying gaze data image used study wondering Earth participants ).Now, modify size square (turn non-square rectangle) passing width=<-width-value> height=<-height-value>.Put code code06.py.","code":""},{"path":"psychopy-basics.html","id":"psychopy-units-norm","chapter":"8 Gettings started with PsychoPy","heading":"8.8.2 Normalized units","text":"Normalized units default units assume window goes -1 1 along x- x-axis. , (0,0) center screen bottom-left corner (-1, -1) whereas top-right (1, 1). makes placing objects easier sizing harder (need know aspect ratio ensure square square).Modify code, uses \"norm\" units create window size white square stimulus, look like square.Put code code07.py.","code":""},{"path":"psychopy-basics.html","id":"pixels-on-screen","chapter":"8 Gettings started with PsychoPy","heading":"8.8.3 Pixels on screen","text":"pixels screen (https://psychopy.org/general/units.html#pixels--screen) units, window center still (0,0) goes -<width--pixels>/2 <width--pixels>/2 horizontally (-400 400 case) -<height--pixels>/2 <height--pixels>/2 vertically (-300 300). units intuitive working fixed sized window, span along axes (like height units). However, spell trouble window size changed using full screen window monitor unknown resolution. short, use dramatically simplify code.Modify code use \"pix\" units briefly test sizing placing square within window.Put code code08.py.","code":""},{"path":"psychopy-basics.html","id":"degrees-of-visual-angle","chapter":"8 Gettings started with PsychoPy","heading":"8.8.4 Degrees of visual angle","text":"Unlike three units , using degrees visual angle requires knowing physical size screen, resolution, viewing distance (far eyes away screen). measurement units used visual psychophysics describe stimulus size appears retina (see Wikipedia details). Thus, units want use running actual experiment lab.","code":""},{"path":"psychopy-basics.html","id":"centimeters-on-screen","chapter":"8 Gettings started with PsychoPy","heading":"8.8.5 Centimeters on screen","text":", need know physical size screen resolution. fairly exotic units specific usage cases31.","code":""},{"path":"psychopy-basics.html","id":"make-your-square-jump","chapter":"8 Gettings started with PsychoPy","heading":"8.9 Make your square jump","text":"far, fixed location square created . However, can move time assigning new (<x>, <y>) coordinates pos property. E.g., white_square.pos = (-0.1, 0.2). Let us experiment moving square random location every iteration loop (cause lot flashing, photosensitive epilepsy can triggered flashing lights, probably just loop). Use units choice generate new position using random.uniform(, b) function, generates random value within ..b range32. Generate two values (one x, one y). use \"norm\" units, range (-1 1) two dimensions. However, used \"height\" units, need take account aspect ratio window (4:3 using 800×600 pix window).Put code code09.py.","code":""},{"path":"psychopy-basics.html","id":"make-the-square-jump-on-your-command","chapter":"8 Gettings started with PsychoPy","heading":"8.10 Make the square jump on your command","text":"flashy, let us make square jump press space button. , need expand code processes keyboard input. far, restricted just escape button checked whether (hence, escape) button pressed.learn lists indexes next chapter, another ready-made. First, add \"space\" keyList parameter. Next, use conditional statement check whether event.getKeys() returned key press. (len(keys) > 0), can now check whether keys[0] equal \"space\" \"escape\"33. latter, game . \"space\" move square new random position (move every frame!)Hint, debuggingPut code code10.py.","code":""},{"path":"psychopy-basics.html","id":"basics-covered","chapter":"8 Gettings started with PsychoPy","heading":"8.11 Basics covered","text":"plenty learn PsychoPy ’ve got basics covered. Submit files get ready Whack Mole!","code":""},{"path":"whack-a-mole.html","id":"whack-a-mole","chapter":"9 Whack-a-Mole","heading":"9 Whack-a-Mole","text":"Today create first video game Whack--Mole. game much reaction time experiment: moles/targets appear random delay one predefined locations, player’s task whack (press corresponding button) mole/target disappears. final game look approximately like one video: Circles (moles) turn white, hit correct button time.","code":""},{"path":"whack-a-mole.html","id":"chapter-concepts-4","chapter":"9 Whack-a-Mole","heading":"9.1 Chapter concepts","text":"Storing many items lists.Iterating items use loop.Generating list number using range().Making pause limiting time wait key.","code":""},{"path":"whack-a-mole.html","id":"lists","chapter":"9 Whack-a-Mole","heading":"9.2 Lists","text":"far, using variables store single values: computer’s pick, player’s guess, number attempts, PsychoPy window object, etc. sometimes need handle one value. already problem computer-based Guess--Number game needed store remaining number range. got away using two variables, one lower one upper limit. However, approach clearly scale well , sometimes, might even know many values need store. Python’s lists solution problem.list mutable34 sequence items individual elements can accessed via zero-based index. Extending idea variable---box, can think lists box numbered slots. store retrieve particular piece need know variable name index item interested within box. , work variable-plus-index exactly way work normal variable, accessing changing value via syntax .list defined via square brackets <variable> = [<value1>, <value2>, ... <valueN>]. individual slot within list also accessed via square brackets <variable>[<index>] index , , zero-based35. means first items variable[0] , N items list, last one variable[N-1]. can figure total number items list getting length via special len() function. Thus, can access last item via variable[len(variable)-1]36. Note -1: list 3 items, index last one 2, 100, 99, etc. spending much time fairly common source confusion.exercise #1 see lists defined indexed.Lists also allow access one slot/index time via slicing. can specify index elements via <start>:<stop> notation. example, x[1:3] give access two items indexes 1 2. Yes, two items: Slicing index goes start including stop. Thus, want get items list, need write x[0:length(x)] , yet, get last item alone still write x[len(x)-1]. Confusing? think . understand logic find stop---included counterintuitive still consciously remind . Unfortunately, standard way define sequences numbers Python, need memorize .exercise #2 build intuition.slicing, can omit either start stop. case, Python assume missing start means 0 (index first element) missing stop means len(<list>) (, last item included). omit , e.g., my_pretty_numbers[:] return values, equivalent my_pretty_numbers[0:len(my_pretty_numbers)].37Do exercise #3.can also use negative indexes computed relative length list. example, want get last element list, can say my_pretty_numbers[len(my_pretty_numbers)-1] just my_pretty_numbers[-1]. last--one element my_pretty_numbers[-2], etc. can use negative indexes slicing keep mind including start excluding stop catch: my_pretty_numbers[:-1] return last element list entire list!exercise #4.Slicing can extended specifying step via stop:start:step notation. step can negative, allowing build indexes reverse order:However, must pay attention sign step. goes wrong direction stop reached, Python return empty list.Steps can combined omitted negative indexes. get every odd element list, write my_pretty_numbers[::2]:exercise #5.try access indexes outside valid range, Python raise IndexError38. Thus, trying get 6th element (index 5) five-element-long list generate simple straightforward error. However, slice larger range, truncated without extra warning error. , five-element list my_pretty_numbers[:6] my_pretty_numbers[:600] return numbers (effectively, equivalent my_pretty_numbers[:]). Moreover, slice empty (2:2, include 2 stop value, even though starts 2 well) entire slice outside range, Python return empty list, , neither warning error generated.exercise #6.Python lists dynamic, can always add remove elements , see [list methods ]](https://docs.python.org/3/tutorial/datastructures.html#--lists). can add new item end list via append(<new_value>) methodOr, can insert(<index>, <new_value>) element index. Unfortunately, means can use arbitrary large index insert new value last element without generating error.can remove item using index via pop(<index>), note item returned well. omit index, pop() removes last element list. , can use valid indexes.exercise #7.","code":"my_pretty_numbers = [1, 2, 3, 4, 5, 6, 7]\nmy_pretty_numbers[4:0:-1]\n#> [5, 4, 3, 2]my_pretty_numbers = [1, 2, 3, 4, 5, 6, 7]\nmy_pretty_numbers[4:0:1]\n#> []my_pretty_numbers = [1, 2, 3, 4, 5, 6, 7]\nmy_pretty_numbers[::2]\n#> [1, 3, 5, 7]my_pretty_numbers = [1, 2, 3, 4, 5, 6, 7]\nmy_pretty_numbers.append(10)\nmy_pretty_numbers\n#> [1, 2, 3, 4, 5, 6, 7, 10]my_pretty_numbers = [1, 2, 3, 4, 5, 6, 7]\nmy_pretty_numbers.insert(2, 10)\nmy_pretty_numbers.insert(500, 20)\nmy_pretty_numbers\n#> [1, 2, 10, 3, 4, 5, 6, 7, 20]my_pretty_numbers = [1, 2, 3, 4, 5, 6, 7]\nmy_pretty_numbers.pop(-1)\n#> 7\nmy_pretty_numbers.pop(3)\n#> 4\nmy_pretty_numbers\n#> [1, 2, 3, 5, 6]"},{"path":"whack-a-mole.html","id":"basic-game-scaffolding","chapter":"9 Whack-a-Mole","heading":"9.3 Basic game scaffolding","text":"Phew lot lists39. However, work play makes Jack dull boy! let us start basic PsychoPy scaffolding. code structure:Try scratch. left hints help can always consult online documentation. forget document file split code meaningful chunks comments (needed).Put code code01.py.","code":"import libraries from [psychopy]\ncreate the PsychoPy window (visual.Window())\nflip the window (.flip())\nwait for a player to press the escape key (event.waitKeys())\nclose the window (.close())"},{"path":"whack-a-mole.html","id":"three-moles","chapter":"9 Whack-a-Mole","heading":"9.4 Three moles","text":"Let us create three moles represented circles. Create new list variable moles put three circles . One go left, one dead center, one right. Watch video see mean. Think reasonable size (units make keeping circle circle easier?) position. can also use different colors , ).can either create empty list append() circles one time. can use square brackets put three list one go. draw() circles flip window wait key press. Note draw one time. Therefore, need add three lines next section show easier way.Put code code02.py.","code":""},{"path":"whack-a-mole.html","id":"for-loop","chapter":"9 Whack-a-Mole","heading":"9.5 For loop","text":"code , needed iterate three moles (circles) list. Python tool just : \nloop iterates items sequence (list sequence!). example:, code inside loop repeated three times three items list. iteration, next value list gets assigned temporary variable a_number (see output). value assigned variable, can use just like variable. can print (first print), can modify (second line within loop), use value calling functions, etc. better appreciate , copy-paste code temporary file (call test01.py), put breakpoint onto first print statement use F10 step loop see value a_number variable changes iteration gets modified second line within loop.Note can use break statement loop.exercise #8.","code":"numbers = [2, 4, 42]\nfor a_number in numbers:\n    print(\"Value of a_number variable on this iteration is %d\"%(a_number))\n    a_number = a_number + 3\n    print(\"  Now we incremented it by 3: %d\"%(a_number))\n    print(\"  Now we use in a formula a_number / 10: %g\"%(a_number / 10))\n#> Value of a_number variable on this iteration is 2\n#>   Now we incremented it by 3: 5\n#>   Now we use in a formula a_number / 10: 0.5\n#> Value of a_number variable on this iteration is 4\n#>   Now we incremented it by 3: 7\n#>   Now we use in a formula a_number / 10: 0.7\n#> Value of a_number variable on this iteration is 42\n#>   Now we incremented it by 3: 45\n#>   Now we use in a formula a_number / 10: 4.5"},{"path":"whack-a-mole.html","id":"drawing-in-a-loop","chapter":"9 Whack-a-Mole","heading":"9.6 Drawing in a loop","text":"Now learned loop, easy draw moles. Just iterate list (come good temporary variable name) draw() current item (temporary variable).Put code code03.py.","code":""},{"path":"whack-a-mole.html","id":"range","chapter":"9 Whack-a-Mole","heading":"9.7 range() function: Repeating code N times","text":"Sometimes, might need repeat code several times. example, imagine 40 trials experiment. Thus, need repeat trial-related code 40 times. can, course, build list 40 items long hand iterate Python handy range() function . range(N) yields N integers 0 N-1 (----including rule slicing) can iterate loop.can modify range() function behavior providing starting value step size. simplest form range(N) handy tool repeat code many times. Note always need temporary variable loop, sometimes may use . cases like , use _ (underscore symbol) variable name indicate lack use.Alternatively, can use range() loop indexes list (remember, can always access individual list item via var[index]). exactly that40! Modify code use range() function loop (can compute number iterations length list?), use temporary variable index list draw item41. doubt, put breakpoint inside (just ) loop step code understand values temporary loop variable gets used.Put modified code code04.py.","code":"for x in range(3):\n    print(\"Value of x is %d\"%(x))\n#> Value of x is 0\n#> Value of x is 1\n#> Value of x is 2for _ in range(2):\n    print(\"I will be repeated twice!\")\n#> I will be repeated twice!\n#> I will be repeated twice!"},{"path":"whack-a-mole.html","id":"random-mole","chapter":"9 Whack-a-Mole","heading":"9.8 A random mole","text":"Drawing three moles served practical exercise loops real game need shown one random target time. create three targets draw one . However, later like change color target indicate player hit , simpler (bit wasteful) create single mole every time need one., define one CONSTANT list three colors used another one three horizontal locations (vertical location , need worry ). Next, randomly pick target three want create, .e., need generate index target. can either via random.randrange() via random.choice() building range via function name just learned (remember organize imports alphabetically). Store index variable meaningful name42 use constants create target corresponding color corresponding location. , need draw single target waiting key press.code, put breakpoint check value index variable matches shown screen43.Put modified code code05.py.","code":""},{"path":"whack-a-mole.html","id":"clock-wait","chapter":"9 Whack-a-Mole","heading":"9.9 Random time","text":"makes Whack--Mole game fun know mole appear also know appear much time whack . Thus, need modify presentation schedule. need blank period random duration (suggest 0.75 s 1.5 s) limited presentation duration (0.5 0.75 s). First, need define ranges constants. Now know lists can use single variable hold ends range. , need generate two numbers (one blank another presentation) coming uniform distrubition within range. Finally, need time blank presentation using wait() function clock module.Now time update structure code. approximate outline (note dropped wait keys):Note response processing moment window close right stimulus presented.Put code code06.py.","code":"\"\"\"Document your file\n\"\"\"\nimport all libaries you need in an alphabetical order\n\ndefine CONSTANTS\n\ncreate window\n\n# generating random parameters for the trial\npick random index for the mole\ncreate the mole\ngenerate random durations for blank and presentation interval\n\n# blank\nclear window (win.flip() alone)\nwait for \"blank duration\" seconds\n\n# presentation\ndraw the mole\nwait for \"presentation duration\" seconds\n\nclose the window"},{"path":"whack-a-mole.html","id":"repeating-trials","chapter":"9 Whack-a-Mole","heading":"9.10 Repeating trials","text":"already know repeat code many times. Decide number trials / rounds (define constant) repeat single round many times. Think code goes inside loop stay outside randomization work properly.Put code code07.py.","code":""},{"path":"whack-a-mole.html","id":"waitKeys-maxwait","chapter":"9 Whack-a-Mole","heading":"9.11 Exit strategy","text":"hope used small number trials (advice, yes!) program possibility exit game via escape key. put , replace wait() calls waitKeys() function. maxWait parameter default set infinity can set duration require. player press key, work just like wait() . player presses key (allow \"escape\" now), means want abort game (possible action moment). Thus, assign returned value temporary variable (keys?) check whether equal None44. equal None, break loop!Put code code08.py.","code":""},{"path":"whack-a-mole.html","id":"whacking-that-mole","chapter":"9 Whack-a-Mole","heading":"9.12 Whacking that mole","text":"moles appear random location random delay random period time. Now just need add ability whack ’em! whack mole present. Thus, need modify handle waitKeys() call presentation interval.First, create new constant three keys correspond three locations. suggest using [\"left\", \"\", \"right\"], cursor keys45. Next, need use keyList parameter. However, use list directly, also need escape key. simplest way put “escape” list concatenate two lists via +: [\"escape\"] + YOUR_CONSTANT_WITH_KEYS. concatenation directly set value keyList function call. continue, run code test can abort program presentation (blank interval) pressing three keys. Also check escape still works!Now keys press, need sophisticated processing (gonna quite nested conditional statements). still need check whether waitKeys() returned None first. , must returned list pressed keys. Actually, list just single item46, can work directly via keys[0]. Use conditional -else statement break loop player pressed escape. Otherwise, one three “whack” keys.next step establish index key corresponds . Python makes extremely easy lists .index(value) method returns index value within list. (CONSTANT) list keys, pressed key: Figure index check whether matches index target (imole variable code). , let us provide visual feedback success: change mole (circle) fillColor white, draw , wait 300 ms (setup constant feedback duration). way, mole turn white remain briefly screen hit disappear immediately, missed.Put code code09.py.","code":""},{"path":"whack-a-mole.html","id":"you-did-it","chapter":"9 Whack-a-Mole","heading":"9.13 You did it!","text":"Congratulations first video game! use bells--whistles like score, combos cool, proper mole images instead circle, etc. works fun (feel challenged, reduce presentation time)! Submit files next time ditch keyboard learn handle mouse Memory game.","code":""},{"path":"memory-game.html","id":"memory-game","chapter":"10 Memory game","heading":"10 Memory game","text":"Today, write good old Memory game: Eight cards lying “face ,” can turn two , identical, taken table. different, cards turn “face ” .start, create new folder game create subfolder Images . , download images chicken47 use game unzip Images subfolder.","code":""},{"path":"memory-game.html","id":"chapter-concepts-5","chapter":"10 Memory game","heading":"10.1 Chapter concepts","text":"Mutable vs. immutable objectsShowing images.Working files via os library.Using dictionary containers.List operations.Looping index item via list enumeration.","code":""},{"path":"memory-game.html","id":"variables-as-boxes-immutable-objects","chapter":"10 Memory game","heading":"10.2 Variables as Boxes (immutable objects)","text":"game, use dictionaries. mutable, like lists constrant “normal” immutable values (integers, floats, strings). need learn distinction two kinds objects (values) behave differently circumstances, good (power!) bad (weird unexpected behavior!) news.may remember variable---box metaphor used introduce variables. short, variable can thought “box” variable name written value stored “inside.” use value assign different variable, can assume Python makes copy it48 puts copy different variable “box.” replace value variable, take old value, destroy (throwing nearest black hole, assume), create new one, put variable “box.” change variable based current state, thing happens. take value, create new value (adding original one operation), destroy old one, put new one back variable “box.” important point although variable can different immutable values (changed imole variable every round), immutable value never changes. gets replaced another immutable value never changes49.box metaphor explains scopes work way . scope set boxes whenever pass information scopes, e.g., global script function, copy value (variable) created put new box (e.g., parameter) inside function. function returns value, copied put one boxes global script (variable assigned returned value ), etc.However, true immutable objects (values) numbers, strings, logical values, etc. also tuples (see ). guessed name, means mutable objects behave differently.","code":""},{"path":"memory-game.html","id":"mutable-objects","chapter":"10 Memory game","heading":"10.3 Variables as post-it stickers (mutable objects)","text":"Mutable objects lists, dictionaries50, classes, .e., things can change. key difference immutable objects can thought fixed size. number takes many bytes store, goes given string (although different string require fewer bytes). Still, change, created destroyed unneeded never truly updated.Mutable objects can changed51. example, can add elements list, remove , shuffle . goes dictionaries. Making object immutable computationally inefficient: Every time add value (long) list destroyed recreated just one additional value. Python simply updates original object. computation efficiency, objects copied assign different variable use parameter value passed reference. means variable longer “box” “sticker” put object (list, dictionary). can put many stickers object want still object!Earth mean? Keeping mind variable just sticker (one many) mutable object, try figuring output :exercise #1.Huh? precisely meant “stickers object.” First, create list put x sticker . , assign y list, words, put y sticker list. Since x y stickers object, , effectively, synonyms. specific situation, set x = y, matter variable name use change object, just two stickers hanging side--side list. , just reminder, happen immutable values, like numbers, things behaved way expect behave.variable---sticker, .k.. “passing value reference,” important implications function calls, breaks scope without ever giving warning. Look code try figuring output .exercise #2.manage modify global variable inside function? Didn’t change local parameter function? Yep, exactly problem passing reference. function parameter yet another sticker object, even though looks like need worry global variables (’s wrote function learned scopes!), still . perplexed , good company. one unexpected confusing bits Python routinely catches people52 surprise. Let us exercises, show solve scope problem mutable objects.exercise #3.","code":"x = [1, 2, 3]\ny = x\ny.append(4)\nprint(x)def change_it(y):\n    y.append(4)\n\nx = [1, 2, 3]\nchange_it(x)\nprint(x)"},{"path":"memory-game.html","id":"tuple-a-frozen-list-tuple","chapter":"10 Memory game","heading":"10.4 Tuple: a frozen list (#tuple)","text":"wise people created Python acutely aware problem variable---sticker creates. , added immutable version list, called tuple. “frozen” list values, can loop , access items index, figure many items , modify . appending, removing, replacing values, etc. means variable frozen list box rather sticker behaves just like “normal” immutable object. can create tuple using round brackets.can loop , e.g.,, said, appending throw mistake (try code Jupyter Notebook)goes trying change itThis means need pass list values function want link original variable, instead pass tuple values function. function still list values link original list object now broken. can turn list tuple using tuple(). Keeping mind tuple() creates frozen copy list, happen ?exercise #4.probably figured , y = tuple(x), Python creates copy list values, freezes (immutable now), puts “y” box. Hence, whatever original list, effect immutable “y.”Conversely, “unfreeze” tuple turning list via list(). Please note creates new list, relation existing list, even values originally taken !exercise #5.Remember just said list() creates new list? means can use create copy list directly, without intermediate tuple step. way can two different lists identical values. can also achieve results slicing entire list, e.g. list(x), x[:].exercise #6., y = list(x) created new list (carbon copy one “x” sticker ) “y” sticker put new list, “x” remained hanging original.Confusing? bet! feel overwhelmed whole immutable/mutable, tuple/list, copy/reference confusion, just normal human . understand (computational) reasons things way, aware difference useful can still catches surprise time time!","code":"i_am_a_tuple = (1, 2, 3)i_am_a_tuple = (1, 2, 3)\nfor number in i_am_a_tuple:\n    print(number)\n#> 1\n#> 2\n#> 3i_am_a_tuple = (1, 2, 3)\n\n# throws AttributeError: 'tuple' object has no attribute 'append'\ni_am_a_tuple.append(4)i_am_a_tuple = (1, 2, 3)\n\n# throws TypeError: 'tuple' object does not support item assignment\ni_am_a_tuple[1] = 1 x = [1, 2, 3]\ny = tuple(x)\nx.append(4)\nprint(y)"},{"path":"memory-game.html","id":"minimal-code","chapter":"10 Memory game","heading":"10.5 Minimal code","text":"Enough theory, let us get busy writing game. usual, let us start minimal code (try scratch instead copy-pasting last game):first thing need decide window size pixels units sizing placing cards easier. chicken image 240×400 pixels , game, need place exactly 4×2 images, .e. window must 4 cards wide 2 cards high. forget document file!Put code code01.py.","code":"importing psychopy modules that we need\n \ncreating a window of a useful size and useful units\n\nwaiting for a key press\n\nclosing the window"},{"path":"memory-game.html","id":"imagestim","chapter":"10 Memory game","heading":"10.6 Drawing an image","text":"used (abstracta boring) circles represent moles today use actual images chicken (see instructions downloading ). Using image stimulus PsychoPy straightforward behaves mcu like visual stimuli already know. First, need create new object calling visual.ImageStim(...). can find complete list parameters documentation initial intents purposes, need pass three :window variable: win.image file name: image=\"Images/r01.png\" (images subfolder therefore need use relative path).size: size=(???, ???). one compute. picked norm units, , window 2 units wide 2 units high height 1 units height aspect-ratio units wide. want 4×2 images, size (width height) image units choice?Draw chicken image (appear center screen).Put code code02.py.","code":""},{"path":"memory-game.html","id":"placing-an-image-index-to-position","chapter":"10 Memory game","heading":"10.7 Placing an image (index to position)","text":"default, image placed center screen, surprisingly useful default typical psychophysical experiment shows stimuli fixation (also, typically, center screen). However, need draw eight images, designated location. need create function takes image index (goes 0 7) returns list pair values location screen. sketch index correspond location. Note image location (pos corresponds center image.Card location indexName function position_from_index. take one argument (index) return list (<x>, <y>) coordinates PsychoPy units (now assume norm). can use value pos argument ImageStim().computation might look complicated, let get started. can compute x coordinate top row? Concentrating top row alone makes things simpler column index overall index: left-column 0, next one 1, etc. need simple algebra \\(x = a_x + b_x \\cdot column\\). can easily deduce \\(a_x\\) \\(b_x\\) figure locations first second cards hand. goes y coordinate. Assuming know row, either 0 (top row) 1 (bottom row), can compute \\(y = a_y + b_y \\cdot row\\)., hear say, row column indexes, overall index! compute need keep mind row four cards. , can make use two special division operators: floor division operator // modulos, divison remainder % operators. former returns integer part division, 4 // 3 1 (4/3 1.33333) 1 // 4 0 (1/4 0.25). latter returns remaining integers, 4 % 3 1 1 % 4 0.suggestion first play individual formulas Jupyter Notebook, makes easier try (dividing) things seeing result, putting various values formulas, etc. confident code working, turn function, document , put separate file (utilities.py, forget put comment top file well!). can import main script use place card. Try different indexes make sure card appears . Remember, put breakpoint step program watching variables, things work expected.Put position_from_index utilities.py.\nPut update code code03.py","code":""},{"path":"memory-game.html","id":"backside-of-the-card","chapter":"10 Memory game","heading":"10.8 Backside of the card","text":"chicken image card face game starts cards face , player see backs. use plain rectangle backside. Pick nice looking combination fillColor (inside) lineColor (contour) colors. Modify code, draw image (face card) rectangle (back card) side--side (e.g., face position index 0, rectangle position 1 4). way can check sizes match positioned correctly.Put code code04.py.","code":""},{"path":"memory-game.html","id":"dictionaries","chapter":"10 Memory game","heading":"10.9 Dictionaries","text":"card use plenty properties: front (image), backside (rectangle), properties side shown whether card already taken screen. calls container, put relevant bits single variable. put list use numerical indexes access individual elements (e.g., card[0] front image card[2] indicate active side) indexes meaning per se, figuring card[0] different card[2] tricky. Python solution cases like : dictionaries.dictionary container stores information using key : value pairs. similar look meaning translation (value) word (key) real dictionary, hence name. create dictionary, use curly brackets {<key1> : <value1>}, {<key2> : <value2>, ...} create via dict(<key1>=<value1>, <key2>=<value2>, ...).created dictionary, can access modify field using key, e.g. print(book[\"Author\"]) book[\"Author\"] = \"Moers, W.\". can also add new fields assigning values , e.g., book[\"Publication year\"] = 1999. short, can use combination <dictionary-variable>[<key>] just like use normal variable. similar using list[index] combination, difference index must integer, whereas key can hashable53 value.","code":"book = {\"Author\" : \"Walter Moers\",\n        \"Title\": \"Die 13½ Leben des Käpt'n Blaubär\"}"},{"path":"memory-game.html","id":"using-a-dictionary-to-represent-a-card","chapter":"10 Memory game","heading":"10.10 Using a dictionary to represent a card","text":"card following properties, key-value entries dictionary\"front\": front side (image chicken).\"back\": back side (rectangle).\"filename\": identity card use later check whether player opened two identical cards (filenames match) two different ones.\"side\": can either \"front\" \"back\", information side (drawn screen). Set \"back\" , initially, cards face . However, can always set temporarily \"front\" see cards distributed.\"show\": logical value, set True. use later mark cards table , therefore, shown. Initially, cards shown, cards created \"show\" equal True.Create dictionary variable (name card) fill relevant values (use either \"front\" “back\" \"side\" key) stimuli (can put PsychoPy stimuli dictionary just like put list earlier). Modify code draws correct image based value \"side\" entry. Note need -statement ! Think key need access two sides value \"side\" key.Put code code05.py.","code":""},{"path":"memory-game.html","id":"card-factory","chapter":"10 Memory game","heading":"10.11 Card factory","text":"code create one card need eight . definitely calls function. Write function (put utilities.py declutter main file) takes three parametersa window variable (need create PsychoPy stimuli),filename,card position index,returns dictionary, just like one created. much code, need wrap function document . Call function create_card use main script create card dictionary. Think libraries now need import utilities.py.Put create_card utilities.py. \nPut code code06.py.","code":""},{"path":"memory-game.html","id":"getting-a-list-of-files","chapter":"10 Memory game","heading":"10.12 Getting a list of files","text":"single card, simply hard-coded name image file, well location. However, real game (experiment) like flexible automatically determine files Images folder. covered os library contains various utilities working operating system , particular, files directories. Specifically, os.listdir(path=“.”) returns list filenames files folder specified path. default, current path (path=\".\"). However, can use either relative path - os.listdir(\"Images\"), assuming Images subfolder current directory - absolute path os.listdir(\"E:/Teaching/Python/MemoryGame/Images\") (case)54.Try Jupyter Notebook (forget import os library). get list 8 files coded [r|l][index].png, r l denote direction chicken looking. However, game need four images (4 × 2 = 8 cards). Therefore, need select subset , e.g., four random cards, chicken looking left right . , let us work chicken looking left, meaning need pick files start “l.” make filtering easier, use cool Python trick called list comprehensions.","code":""},{"path":"memory-game.html","id":"list-comprehension","chapter":"10 Memory game","heading":"10.13 List comprehension","text":"List comprehension provides elegant easy--read way create, modify /filter elements list creating new list. general structure isLet us look examples understand works. Imagine list numbers = [1, 2, 3] need increment number 155. can creating new list adding 1 item  part:Note equivalent toOr, imagine need convert item string. can simply asWhat equivalent form using normal loop? Write versions code Jupiter cells check results .exercise #7 Jupyter notebook.Now, implement code using list comprehension. Check results match.exercise #8 Jupyter notebook.noted , can also use conditional statement filter items passed new list. numbers example, can retain numbers greater 1Sometimes, statement written three lines, instead one, make reading easier:can course combine transformation filtering single statement. Create code filters items 2 adds 4 .exercise #9 Jupyter notebook.","code":"new_list = [<transform-the-item> for item in old_list if <condition-given-the-item>]numbers = [1, 2, 3]\nnumbers_plus_1 = [item + 1 for item in numbers]numbers = [1, 2, 3]\nnumbers_plus_1 = []\nfor item in numbers:\n    numbers_plus_1.append(item + 1)numbers = [1, 2, 3]\nnumbers_as_strings = [str(item) for item in numbers]strings = ['1', '2', '3']\nnumbers = []\nfor astring in strings:\n    numbers.append(int(astring) + 10)numbers = [1, 2, 3]\nnumbers_greater_than_1 = [item for item in numbers if item > 1]numbers = [1, 2, 3]\nnumbers_greater_than_1 = [item \n                          for item in numbers\n                          if item > 1]"},{"path":"memory-game.html","id":"getting-list-of-relevant-files","chapter":"10 Memory game","heading":"10.14 Getting list of relevant files","text":"Use list comprehension create list files chicken looking left, .e. filenames start “l.” Use .startswith() check whether starts “l,” store list filenames variable. Test code Jupyter Notebook. get list four files.","code":""},{"path":"memory-game.html","id":"list-operations","chapter":"10 Memory game","heading":"10.14.1 List operations","text":"list consists four unique filenames game card appear twice. several ways duplicating lists. , use opportunity learn list operations. Python lists implement two operations:Adding two lists together: <list1> + <list2>.Note produces new list , therefore, equivalent extend method .extend(b)! + creates new list, .extend() extends original list .56List replication:: <list> * <integer-value> creates new list replicating original one <integer-value> times. example:Use either operation .extend() method create list filename repeated twice. Hint, can apply list multiplication directly filenames list created via list comprehension (, replicate line). Try code Jupyter Notebook.","code":"a = [1, 2, 3]\nb = [4, 5, 6]\na + b\n#> [1, 2, 3, 4, 5, 6]a = [1, 2, 3]\nb = 4\na * b\n#> [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]"},{"path":"memory-game.html","id":"enumerate","chapter":"10 Memory game","heading":"10.15 Looping over both index and item via list enumeration","text":"Now list filenames, can create list cards . dictionary function requires index filename. latter item list, former index item. loop build index using range() function Python better solution : enumerate() function! , instead iterating list, iterate enumerate(), get tuple57 (index, value). example:can use enumerate() list comprehension.","code":"letters = ['a', 'b', 'c']\nfor index, letter in enumerate(letters):\n    print('%d: %s'%(index, letter))\n#> 0: a\n#> 1: b\n#> 2: cletters = ['a', 'b', 'c']\n[\"%d: %s\"%(index, letter) for index, letter in enumerate(letters)]\n#> ['0: a', '1: b', '2: c']"},{"path":"memory-game.html","id":"os-library","chapter":"10 Memory game","heading":"10.16 Computing path","text":"Originally, specified image file name \"Images/r01.png\". job now many filenames need join folder name form path string. top , major operating systems disagree Windows / (forward slash) \\ (backslash) used paths. make code platform-independent , therefore, robust, need construct filename string using join function path submodule. Thus, can import os library call os.path.join(...) (personal preference). , can use approach PsychoPy modules import path os, shortening code. , course, can even import join directly find lack library information use makes things harder understand (even though code even shorter).join takes path components parameters joins match OS format. E.g., os.path.join(\"Python seminar\", \"Memory game\", \"memory01.py\") Windows return 'Python seminar\\\\Memory game\\\\memory01.py'. need load multiple files, filename part vary. However, folder images located , per usual, good idea turn formally declared CONSTANT.Modify create_card function assumes filename parameter just filename folder name , therefore, build path join folder name (defined constant module!). now need drop \"Images/\" value pass . Test code works !Update create_card utilities.py\nPut updated code code07.py.","code":""},{"path":"memory-game.html","id":"a-deck-of-cards","chapter":"10 Memory game","heading":"10.17 A deck of cards","text":"Let us put together code need figuring cards’ filenames, duplicating , creating cards using filename index.Copy code building duplicated list filenames tested Jupyter notebook main script (’ll code09.py). , use enumerate list comprehension enumerated duplicate filenames create cards (plural, replacing singular card variable) via create_card function wrote earlier. Update drawing code loop draw cards. default \"side\" \"back\", things look pretty boring. Change ’“front”` cards see faces.Put code code08.py.","code":""},{"path":"memory-game.html","id":"shuffle","chapter":"10 Memory game","heading":"10.18 Shuffling cards","text":"draw cards faces, notice duplicating filenames list produces orderly sequence makes playing game easy (boring). need shuffle() filename list create cards. Note shuffle() shuffles list item place using fact list mutable. means simply call function pass list argument. list gets modified, nothing returned nothing need assigned back filenames variable.Put code code09.py.","code":""},{"path":"memory-game.html","id":"lets-have-a-break","chapter":"10 Memory game","heading":"10.19 Let’s have a break!","text":"covered lot ground, might good point take break submit code review.","code":""},{"path":"memory-game.html","id":"adding-main-game-loop","chapter":"10 Memory game","heading":"10.20 Adding main game loop","text":"point, shuffle deck cards show player presses key. Modify code main presentation loop, similar one experimented PsychoPy stimuli. Previously, used logical gameover variable control loop. , two reasons exit loop: player pressed escape key won game. Therefore, let us use string game_state variable initialized \"running\". Repeat loop game_state equal \"running\" change \"abort\" player pressed escape. also need replace waitKeys) (getKeys.Put code code10.py.","code":""},{"path":"memory-game.html","id":"psychopy-mouse","chapter":"10 Memory game","heading":"10.21 Detecting a mouse click","text":"game, player click individual cards turn . can use mouse PsychoPy, must create via mouse = event.Mouse(visible=True, win=win) call, win PsychoPy window already created. code appear immediately line create window .Now, can check whether left button pressed using mouse.getPressed() method. returns three-item tuple True/False values indicating whether three buttons currently pressed. Use main loop, player presses left button (index returned list 0), change \"side\" first card (, card index 0 list) \"front\". assumes initialized card \"back\" shown, course. run code click anywhere, flip first card.Put mouse-click-processing code drawing cards. moment, makes difference useful later , allow us draw latest state card (.e., right flipped player).Put code code11.py.","code":""},{"path":"memory-game.html","id":"position-to-index","chapter":"10 Memory game","heading":"10.22 Position to index","text":"Currently, first card flipped click anywhere. card flip card player clicked . need implement function index_from_position inverse position_from_index. take argument pos, tuple (<x>, <y>) values (mouse position within window), return integer card index. float values (decimal points) pos argument (ranges -1 1 norm units) default values compute also float. However, index must integer, need wrap int() function call, returning .Going backwards — position index — (IMHO) easier. First, need think can convert x coordinate (goes -1 1) column index (goes 0 3) given 4 columns (draw sketch paper make figuring math simpler). Similarly, translate y (-1 1) raw index given two rows. know row column index, can compute index , keeping mind four card row. position_from_index, think easier first play formulas Jupyter Notebook, turning code function, documenting , putting utilities.py.Put index_from_position utilities.py.","code":""},{"path":"memory-game.html","id":"flip-a-selected-card-on-click","chapter":"10 Memory game","heading":"10.23 Flip a selected card on click","text":"Now function returns index position (don’t forget import ), can flip card player clicked . , need extend card-flipping code inside left-mouse button pressed code. Get position mouse within window calling mouse.getPos(). return pair (x, y) values, can pass index_from_position() function. , turn return index card player click . Change \"side\" card index \"front\". Test code turning different cards , make sure card clicked gets turned. usual reminder, hesitate put breakpoint inside -statement check actual mouse position values translated index, things work.Put code code12.py.","code":""},{"path":"memory-game.html","id":"keeping-track-of-open-cards","chapter":"10 Memory game","heading":"10.24 Keeping track of open cards","text":"actual game, player allowed flop two cards time. match, removed. , flipped backs . means need keep track many cards face . can always figure list comprehension scanning cards \"side\" \"face\". , mutable nature dictionaries presents us simpler solution. create new list (let us call face_up) add cards . Mutable dictionary copied rather reference present lists (card dictionary two stickers , one cards list, one face_up list). way know cards face (list) know many (length face_up list).However, need careful add card (mess “many cards face ” number). two ways . Assuming icard index card, computed via position_to_index() mouse position, can simply check whether card \"side\" \"front\". Alternatively, can check whether card already face_up list. Either way tell whether card face . , set \"side\" \"front\" add face_up list.Implement code, open cards. , use breakpoint pause program check face_up list contains exactly (many) cards. face-checks work. Put breakpoint step code see happens.Put code code13.py.","code":""},{"path":"memory-game.html","id":"opening-only-two-cards","chapter":"10 Memory game","heading":"10.25 Opening only two cards","text":"Now need check whether player open already two cards. code, mouse checks drawing code. means cards drawn face immediately click. drawn, check length face_up, equal 2:pause program ~0.5 s58 via wait, player can see cards.flip cards back (.e., set \"side\" \"back\").remove face_up list (see .clear() method).Put code code14.py.","code":""},{"path":"memory-game.html","id":"taking-a-matching-pair-off-the-table","chapter":"10 Memory game","heading":"10.26 Taking a matching pair off the table","text":"code turns cards back even found matching pair need take table. two cards face_up list, need check whether chicken , .e., filenames . , set \"show\" field False. , set \"side\" \"back\" (code already ). Either way, still need pause program allow player see clear face_up list (either table face , definitely face ).also need modify code handle \"show\" field correctly. First, modify drawing code draw cards shown. Second, handling mouse click, need check card face shown (otherwise can “open” invisible cards).Put code code15.py.","code":""},{"path":"memory-game.html","id":"game-over-once-all-the-cards-are-off-the-table","chapter":"10 Memory game","heading":"10.27 Game over once all the cards are off the table","text":"code works correctly, can take card table, gray screen remains. However, point game finishes congratulates success. Write function remaining_cards take list cards (.e., cards list) return many cards still shown (\"show\" field True). definitely need implementation can different. use extra counter variable initialize 0 increment one (see += shortcut). Alternatively, can use list comprehensions filter cards shown return length list (single line solution). Implement function utilities.py use exit loop setting game_state \"victory\". loop, can check game_state variable player victorious, show congratulatory message (TextStim, note don’t even need create variable , can create object call .draw() , .e., visual.TextStim(...).draw()) wait key press close window.Put code code16.py.","code":""},{"path":"memory-game.html","id":"do-it-fast","chapter":"10 Memory game","heading":"10.28 Do it fast!","text":"different ways can quantify speed game. look number pairs player open clearing (fewer, better). , measure fast player seconds. (use combination two measures) Let us use second option — total time taken — opportunity learn using PsychoPy clocks.two classes primarily interested Clock CountdownTimer. difference two Clock starts (resets ) 0 start counting elapsed time, getTime() method return positive values. contrast, CountdownTimer start (resets ) value initialized starts counting remaining time . Importantly, stop reaches 0, eventually end negative remaining time. Thus, Clock check whether elapsed time longer predefined value, whereas CountdownTimer start predefined value check remaining time zero. Note guaranteed remaining time exactly zero. anything, extremely unlikely ever happen, never test exact equality zero59!, interested elapsed time, Clock obvious choice. Create clock game loop use elapsed time congratulatory message.Put code code17.py.","code":""},{"path":"currently-unused-bits.html","id":"currently-unused-bits","chapter":"11 Currently unused bits","heading":"11 Currently unused bits","text":"","code":""},{"path":"currently-unused-bits.html","id":"clock-module","chapter":"11 Currently unused bits","heading":"11.1 Clock Module","text":"two classes primarily interested Clock CountdownTimer. difference two Clock starts (resets ) 0 start counting elapsed time, getTime() method return positive values. contrast, CountdownTimer start (resets ) value initialized starts counting remaining time . Importantly, stop reaches 0, eventually end negative remaning time. Thus, Clock check whether elapsed time longer predefined value (blank presentation durations generated), whereas CountdownTimer start values check remaining time zero. Note guaranteed remaining time exactly zero. anything, extremely unlikely ever happen, never test exact equality zero60!","code":""}]
