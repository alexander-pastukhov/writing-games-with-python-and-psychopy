[{"path":"index.html","id":"intro","chapter":"1 Introduction","heading":"1 Introduction","text":"book teach programming. Hopefully, fun way something satisfying playing video game creating one. Although written course called “Python social experimental psychology”, main aim teach Python per se. Python fantastic tool (later) just one many programming languages exist. ultimate goal help develop general programming skills, depend specific programming language, make sure form good habits make code clear, easy read, easy maintain. last part crucial. Programming writing code works. , obviously, must true minimal requirement. Programming writing clear easy--read code others , even importantly, -two-weeks later can understand.","code":""},{"path":"index.html","id":"goal-of-the-book","chapter":"1 Introduction","heading":"1.1 Goal of the book","text":"goal able program sophisticated experiment can multiple blocks trials, various conditions, complicated visual presentation, automatic logging data exception handling. sound ambitious, proceed small steps process learnCore Python concepts including\nvariables constants\nimmutable data types integers, floats, strings, logical values, tuples\nmutable types lists dictionaries\nfunctions\ncontrol structures -else conditional statements loops\nobject-oriented programming including concepts inheritance, duck-typing, mixing\nexceptions\nfile operations\nvariables constantsimmutable data types integers, floats, strings, logical values, tuplesmutable types lists dictionariesfunctionscontrol structures -else conditional statements loopsobject-oriented programming including concepts inheritance, duck-typing, mixingexceptionsfile operationsPsychoPy: core Python prime library psychophysical experiments learn key tools required programming experiment.Good programming style including\nWriting clear code iterative manner\nReading () code\nDocumenting code\nDebugging program VS Code\nWriting clear code iterative mannerReading () codeDocumenting codeDebugging program VS CodeI tried present concepts within context requires , therefore, best explain presents typical usage scenarios. means material spread around presented need--now basis. example, concept lists presented first operations presented later chapter need later keep feeling overwhelmed within reason. makes book harder use reference (excellent references , starting official Python documentation) hope giving bite-sized chunks new information, make easier understand material integrate whatever already know.“distributed” logic applies exercises. Rather listed end chapter, embedded text time point. lot designed clarify concepts presented using illustrative examples, immediately helpful. goes coding practice, although case, can read entire material get “bird’s eye view” entire program read text , coding practice.","code":""},{"path":"index.html","id":"prerequisites","chapter":"1 Introduction","heading":"1.2 Prerequisites","text":"material assumes foreknowledge Python programming reader. purpose gradually build knowledge allow create complex games.","code":""},{"path":"index.html","id":"why-games","chapter":"1 Introduction","heading":"1.3 Why games?","text":"actual purpose course teach psychology social studies students program experiments. real research . However, little practical difference two. basic ingredients , arguably, experiments just boring games. , assured, can program game, can certainly program experiment.","code":""},{"path":"index.html","id":"why-should-a-psychologist-learn-programming","chapter":"1 Introduction","heading":"1.4 Why should a psychologist learn programming?","text":"psychologist, interested people, learn program computers? obvious answer useful skill. able program gives freedom create experiment answers research question, experiment can implemented given constraints software.importantly, least point view, learning program changes way think general. People smart computers dumb1. explain experiment travel plans somebody, can fairly vague, make minor mistake, even skip certain parts. People smart fill missing information knowledge, spot correct mistake, ask information, can improvise encounter something covered. Computers dumb, must precise, gray areas, leave anything “figure happens” (won’t). personal experience, corroborated psychologists learned programming, makes realize just vague imprecise people can without realizing (without realizing well). Programming forces precise thorough, plan ahead eventuality might . useful skill can applied activity requires planning experimental design travel arrangements.","code":""},{"path":"index.html","id":"why-python","chapter":"1 Introduction","heading":"1.5 Why Python?","text":"many ways create experiment psychological research. can use drag--drop systems either commercial like Presentation, Experiment Builder free like PsychoPy Bulder interface. much shallower learning curve, can start creating running experiments faster. However, simplicity use price: fairly limited stimuli can use can control presentation schedule, conditions, feedback, etc. Typically, allow extend programming desired behavior need know program (knowing Python supercharges PsychoPy experiments). Thus, think systems, particular PsychoPy, great tools quickly bang simple experiment together, useful understand create underlying code program . , limited software, know can program something default drag--drop won’t allow. time, can always opt , drag--drop sufficient faster use mix two approaches. end, options creative freedom program experiment answer research question, experiment software allows program.learn programming Python, great language combines simple clear syntax power ability tackle almost problem. seminar, concentrate desktop experiments can use online experiments (oTree PsychoPy), scientific programming (NumPy SciPy), data analysis (pandas), machine learning (scikit-learn), deep learning (keras), website programming (django), computer vision (OpenCV), etc. Thus, Python one versatile programming tools can use stages research work. , Python free, need worry whether future employer able afford license fees (real problem, use Matlab).","code":""},{"path":"index.html","id":"seminar-specific-information","chapter":"1 Introduction","heading":"1.6 Seminar-specific information","text":"material Python social experimental psychology seminar taught University Bamberg. chapter covers single game, introducing necessary ideas accompanied exercises need complete submit. pass seminar, need complete assignments, .e., write games. need complete provide correct solutions exercises pass course information points exercises converted actual grade (need one) “pass” available seminar.material structured, chapter chapter section typically correspond single meeting. However, different, work pace, read material submit assignments independently. provide detailed feedback assignment opportunity address issues resubmit loss points. Note feedback cover actual problems code way implemented solution clean well-documented code . Remember, task just learn program working game write nice clear easy--read--maintain code2.important: hesitate ask questions. feel missed information material, point exact location. confused, ’ll gently prod questions solve problem. need information, ’ll supply . simply want know , ask ’ll explain things way suggest read. feel able solve issue without help, ’ll tell (although, still probably ask hinting questions).","code":""},{"path":"index.html","id":"about-the-material","chapter":"1 Introduction","heading":"1.7 About the material","text":"material free use licensed Creative Commons Attribution-NonCommercial-NoDerivatives V4.0 International License.","code":""},{"path":"software.html","id":"software","chapter":"2 Software","heading":"2 Software","text":"book seminar, need installPsychoPy.IDE choice. instructions Visual Studio Code, good Python support.Jupyter Notebook trying small snippets code.give detailed instructions install necessary software rather point official manuals. makes text future-proof specific details might easily change3.","code":""},{"path":"software.html","id":"install-psychopy","chapter":"2 Software","heading":"2.1 PsychoPy","text":"using Windows, download install Standalone PsychoPy version. Use whatever latest (greatest) PsychoPy version suggested (PsychoPy 2023.2.2 using Python 3.8 time writing) follow instructions.using Mac Linux, installing PsychoPy via pip Anaconda options. Please follow --date instructions.","code":""},{"path":"software.html","id":"install-vs-code","chapter":"2 Software","heading":"2.2 VS Code","text":"Visual Studio Code free lightweight open-source editor strong support Python. Download installer platform follow instructions.Next, follow Getting Started Python VS Code tutorial. using Windows standalone PsychoPy installation, skip Install Python interpreter section, already Python installation bundled PsychoPy. interpreter use Select Python interpreter section. case path C:\\Program Files\\PsychoPy3\\python.exe.Install enable linter, software highlights syntactical stylistic problems Python source code. Follow manual VS Code website.","code":""},{"path":"software.html","id":"jupyter-notebooks","chapter":"2 Software","heading":"2.3 Jupyter Notebooks","text":"Jupyter Notebooks offer convenient way mix text, figure code single document. also make easy play various small snippets parallel without running scripts. rely first chapter occasional exercises code testing later . two way can use : 1) VS Code using Jupyter extension, 2) browser using classical interface.","code":""},{"path":"software.html","id":"jupyter-notebooks-in-vs-code","chapter":"2 Software","heading":"2.3.1 Jupyter Notebooks in VS Code","text":"Follow manual install Jupyter package use notebooks VS Code.","code":""},{"path":"software.html","id":"jupyter-notebooks-in-anaconda","chapter":"2 Software","heading":"2.3.2 Jupyter Notebooks in Anaconda","text":"simplest way use Jupyter Notebooks along lot useful data science tools via Anaconda toolkit. However, note introduce second Python distribution system. , turn, lead confusion working scripts VS Code accidentally Anaconda interpreter active instead PsychoPy one. panic, follow Select Python interpreter instructions make sure PsychoPy interpreter active one.Otherwise, download install Anaconda. website excellent Getting started section.","code":""},{"path":"software.html","id":"files-folder","chapter":"2 Software","heading":"2.4 Keeping things tidy","text":"start, suggest create folder called games--python (something along lines). opted use Jupyter Notebooks via Anaconda, create user folder Anaconda expects find . , create new subfolder chapter / game. seminar, need zip upload folder files.","code":""},{"path":"programming-tips.html","id":"programming-tips","chapter":"3 Programming tips and tricks","heading":"3 Programming tips and tricks","text":"start writing first code, need talk art programming. already mentioned, code works, code easy comprehend. Correctly working code nice plus choose spaghetti code presently works correctly clearly written documented code needs fixing, choose latter day. can fix things understand, can hope, don’t.tips writing reading code. may sound cryptic read first time (become clear cover necessary material). feel like overkill simple projects implementing. suggest read section casually first time return frequently start program earnest. Unfortunately, tricks won’t work use ! always use become good habits, like using seat belt. seat belt nothing useful (hopefully, ) days wear might suddenly urgently become extremely useful can never sure happen. coding. Quite often tempted write “quick-n-dirty” code just “simple test”, temporary solution, prototype, pilot experiment, etc. say “nothing permanent temporary solution”. often , find toy code grew full blown experiment mess. want come back pilot experiment months ago realize easier start scratch understand monster works4. Thus, resist temptation! Form good habits future-grateful!","code":""},{"path":"programming-tips.html","id":"writing-tips","chapter":"3 Programming tips and tricks","heading":"3.1 Writing the code","text":"","code":""},{"path":"programming-tips.html","id":"use-a-linter","chapter":"3 Programming tips and tricks","heading":"3.1.1 Use a linter","text":"Linter program analyses code style highlights issues finds: spaces none, spaces , wrong names, overly long lines, etc. affect code runs following linter’s advice results consistent standard boring-looking5 Python code. Try address problems linter raised. However, use better judgment sometimes lines longer linter prefer readable two shorter ones. Similarly, “bad” variable name linter standards can meaningful name psychologist. Remember, code people, linter.","code":""},{"path":"programming-tips.html","id":"document-your-code","chapter":"3 Programming tips and tricks","heading":"3.1.2 Document your code","text":"Every time create new file: document update documentation whenever add/change/delete new functions classes. Every time create new function: document . New class: document . New constant: unless super clear name alone, document . learn NumPy way book.stress important documenting code . VS Code (editor use) smart enough parse NumPy docstring, show help whenever use functions (helps help !). importantly, writing documentation forces think formulate (human language!) function class , type arguments / attributes / methods , range valid values, defaults, function return, etc. often , realize overlooked important detail may apparent code .","code":""},{"path":"programming-tips.html","id":"add-some-air","chapter":"3 Programming tips and tricks","heading":"3.1.3 Add some air","text":"Separate chunks code empty lines. Think paragraphs normal text. wouldn’t want book single paragraph nightmare? Put comment chunk explains . E.g., typical PsychoPy-based game point draw stimuli update window. nice self-contained chunk can described # drawing stimuli. code provides details exactly drawn, drawing order, etc. single comment help understand chunk whether relevant moment. goes # processing key presses # checking gameover conditions, etc. careful make sure comment describes code correctly. E.g., comment says # drawing stimuli stimuli-drawing code anywhere else code something else!","code":""},{"path":"programming-tips.html","id":"write-your-code-one-teeny-tiny-step-a-time","chapter":"3 Programming tips and tricks","heading":"3.1.4 Write your code one teeny-tiny step a time","text":"motto “slow steady”. way guide games. Always start something extremely simple like static rectangle image. Make sure works. Add minor functionality: Change color, position, another rectangle, storing attribute, etc. Make sure works. Never go next step unless fully understand current code 100% certain behaves . mean 100% seriously! even shadow doubt, check . Otherwise, shadow grow make progressively uncertain code. tortoise-speed approach may feel silly overly slow still faster writing large chunk code trying make work. much easier solve simple problems one time lot simultaneously.","code":""},{"path":"programming-tips.html","id":"there-is-nothing-wrong-with-stackoverflow","chapter":"3 Programming tips and tricks","heading":"3.1.5 There is nothing wrong with StackOverflow","text":"Yes, can always try find solution problem StackOverflow6. time! However, use provided solution understand ! copy-paste code seems solve problem like . lucky, might work. , lucky, won’t work obvious manner. lucky, (sometimes) work incorrectly subtle way. , since really know code pasted , even confused. use StackOverflow source knowledge, source copy-pastable code!","code":""},{"path":"programming-tips.html","id":"reading-tips","chapter":"3 Programming tips and tricks","heading":"3.2 Reading the code","text":"Reading code easy computers dumb smart. means instructions give computer must necessarily simple , therefore, easy understand human. Reading code also hard computers dumb smart. smart don’t even need read entire code understand , just read key bits fill gaps. Unfortunately, means tend read mistakes. unique programming, ever proofraed text, now hard find tipos. brain corrects fly using context read word , actually written7.experience programming general seminar particular problems get stuck simple point dumb obvious retrospect8. despair! , just consequence wonderfully brain wired pattern-recognition. several suggestions help make reading code robust.","code":""},{"path":"programming-tips.html","id":"think-like-a-computer","chapter":"3 Programming tips and tricks","heading":"3.2.1 Think like a computer","text":"Read code line--line “execute” way compute . Use pen--paper keep track variables. Trace chunks code can reached . Slow make sure understand line able keep track variables. easy spot mistake.","code":""},{"path":"programming-tips.html","id":"pretend-that-youve-never-seen-this-code-in-your-life","chapter":"3 Programming tips and tricks","heading":"3.2.2 Pretend that you’ve never seen this code in your life","text":"Assume idea code . wrote, quite often literally see mistake brain fills-details bends reality match expectations9. know chunk code , instead reading skim , unless looks obviously terribly wrong, assume . Turning expectations hard immensely helpful.","code":""},{"path":"programming-tips.html","id":"do-not-search-only-under-the-street-lamp","chapter":"3 Programming tips and tricks","heading":"3.2.3 Do not search only under the street lamp","text":"Whenever using new code need implement something feels complicated code work , tend assume problem new fancy code. Simply new, fancy, complicated. , experience, error typically hide plain sight simpler “trivial” code nearby never properly look simple trivial. Check everything, just places expect made mistake.","code":""},{"path":"programming-tips.html","id":"use-the-debugger","chapter":"3 Programming tips and tricks","heading":"3.2.4 Use the debugger","text":"book, learn pause execution game, can investigate state. Use knowledge! Put breakpoints execute code step--step. Check values variables using “Watch” tab. Use debug console check whether functions return results . complex conditions mathematical formulas, split small bits, copy execute bits debug console check whether numbers add . Make sure code chunk checks proceed analyze next one. Debugging particularly helpful identify code reached reached wrong moment.","code":""},{"path":"programming-tips.html","id":"zen-of-python","chapter":"3 Programming tips and tricks","heading":"3.3 Zen of Python","text":"found Zen Python good inspiration approach programming.","code":""},{"path":"python-basics.html","id":"python-basics","chapter":"4 Python basics","heading":"4 Python basics","text":"Hopefully, already created special folder book. Download exercise notebook (Alt+Click download rather open ), put chapter’s folder, open , see relevant instructions. need switch explanations exercises notebook, keep open.","code":""},{"path":"python-basics.html","id":"chapter-concepts","chapter":"4 Python basics","heading":"4.1 Chapter concepts","text":"Variables.Constants.Basic value types.Printing things .Putting values strings.","code":""},{"path":"python-basics.html","id":"variables","chapter":"4 Python basics","heading":"4.2 Variables","text":"first fundamental concept need acquainted variable. Variables used store information can think box name tag, can put something . name tag box name variable value store . example, can create variable stores number legs game character . begin number typical human .Python, writeThe assignment statement simple structure:Variable name (name tag box) meaningful, can start letters _ can contain letters, numbers, _ symbol spaces, tabs, special characters, etc. Python recommends10 use snake_case (lower-case, underscore spaces) format variable names. <value> right side complex story, can hard-coded (example ), computed using variables variable, returned function, etc.Using variables means can concentrate corresponding values mean rather worrying values . example, next time need compute something based number character’s legs (e.g., many pairs shoes character need), can compute based current value number_of_legs variable rather assume 1.Variables also give flexibility. values can change program run: player’s score increasing, number lives decreasing, number spells can cast grows falls depending use, etc. Yet, can always use value variable perform necessary computations. example, slightly extended number_of_shoes example.noted , can think variable labeled box can store something . means can always “throw away” old value put something new. case variables, “throwing away” part happens automatically, new value overwrites old one. Check , final value variable code ?exercise #1.Note variable (“box name tag”) exists assign something . , following code generate NameError, Python’s way tell never heard variable number_of_hands.However, can create variable hold specific value assigning None . None added language specifically mean value nothing.already seen, can compute value instead specifying . answer ?exercise #2.","code":"number_of_legs = 2<variable-name> = <value># BAD: why 1? Is it because the character has two legs or\n# because we issue one pair of shoes per character irrespective of\n# their actual number of legs?\npairs_of_shoes = 1\n\n# BETTER (but what if our character has only one leg?)\npairs_of_shoes = number_of_legs / 2number_of_legs = 2\n\n# ...\n# something happens and our character is turned into an octopus\nnumber_of_legs = 8\n# ...\n\n# the same code still works and we still can compute the correct number of pairs of shoes\npairs_of_shoes = number_of_legs / 2number_of_legs = 2\nnumber_of_legs = 5\nnumber_of_legs = 1\nnumber_of_legsnumber_of_legs = 2\nnumber_of_gloves = number_of_hands / 2number_of_hands = None # variable exists now, but holds no particular value.number_of_legs = 2 * 2\nnumber_of_legs = 7 - 2\nnumber_of_legs"},{"path":"python-basics.html","id":"assignments-are-not-equations","chapter":"4 Python basics","heading":"4.3 Assignments are not equations!","text":"important: although assignments look like mathematical equations, equations! follow important rule must keep mind understanding assignments: right side expression evaluated first final value computed, final value assigned variable specified left side (put box). means can use variable sides! Let’s take look code:happens computer evaluates last line? First, takes current values variables (2 x 5 y) puts expression. internal step, expression looks likeThen, computes expression right side , computation completed, stores new value xDo exercise #3 make sure understand .","code":"x = 2\ny = 5\nx = x + y - 4x = 2 + 5 - 4x = 3"},{"path":"python-basics.html","id":"constants","chapter":"4 Python basics","heading":"4.4 Constants","text":"Although real power variables can change value, use even value remains constant throughout program. true constants Python, rather agreement names UPPER_CASE. Accordingly, see SUCH_A_VARIABLE know change value. Technically, just recommendation, one can stop modifying value CONSTANT. However, much Python’s ease--use comes agreements (snake_case convention ). encounter agreements later, example, learning objects.Taking account, number legs stays constant throughout game, highlight constancy writeI strongly recommend using constants avoid hardcoding values. First, several identical values mean different things (2 legs, 2 eyes, 2 ears, 2 vehicles per character, etc.), seeing 2 code tell 2 mean (legs? ears? score multiplier?). can, course, figure based code uses number spare extra effort use properly named constant instead. , just read name meaning value becomes apparent meaning actual value mostly interested . Second, decide permanently change value (say, main character now tripod), using constant means one place worry , rest code stays . hard-coded number, exciting11 definitely long search--replace throughout entire code.exercise #4.","code":"NUMBER_OF_LEGS = 2"},{"path":"python-basics.html","id":"value-types","chapter":"4 Python basics","heading":"4.5 Value types","text":"far, used integer numeric values (1, 2, 5, 1000…). Although, Python supports many different value types, first concentrate small subset :integer numbers, already used, e.g. -1, 100000, 42.float numbers can take real value, e.g. 42.0, 3.14159265359, 2.71828.strings can store text. text enclosed either paired quotes \"text\" apostrophes 'text'. means can use quotes apostrophes inside string, long enclosed alternative. E.g., \"students' homework\" (enclosed \", apostrophe ' inside) '\"generalizations false, including one.\" Mark Twain' (quotation enclosed apostrophes). much much strings cover material throughout course.logical / Boolean values either True False.using variable important know type value stores mostly . cases, Python raise error, try computation using incompatible value types. cases, Python automatically convert values certain types, e.g. integer value also real value, conversion 1 1.0 mostly trivial automatic. However, cases may need use explicit conversion. Go exercise #5 try guessing code run throw error due incompatible types?exercise #5.Surprised last one? internally, True also 1 False 0!can explicitly convert one type another using special functions. example, turn number logical value string, simply write str(<value>). examples , result?exercise #6.Similarly, can convert logical/Boolean variable using bool(<value>) function. rules simple, numeric values 0 False, non-zero value converted True. string, empty string '' evaluated False non-empty string converted True. output examples ?exercise #7.Converting integer float numbers using, respectively, int(<value>) float(<value>) trickier. simplest case logical integer/float, True gives int(True) 1 float(True) 1.0 False gives 0/0.0. converting float integer, Python simply drops fractional part (proper rounding!). converting string, must valid number corresponding type error generated. E.g., can convert string like \"123\" integer float won’t work \"a123\". Moreover, can convert \"123.4\" floating-point number integer, fractional part . Given , cells work output produce?exercise #8.","code":"5 + 2.0\n'5' + 2\n'5' + '2'\n'5' + True\n5 + Truestr(10 / 2)\nstr(2.5 + True)\nstr(True)bool(-10)\nbool(0.0)\n\nsecret_message = ''\nbool(secret_message)\n\nbool('False')float(False)\nint(-3.3)\nfloat(\"67.8\")\nint(\"123+3\")"},{"path":"python-basics.html","id":"print","chapter":"4 Python basics","heading":"4.6 Printing output","text":"print value, need use print() function (talk functions general later). simplest case, pass value printed .orOf course, already know variables, rather putting value directly, can pass variable instead value printed .orYou can also pass one value/variable print function values printed one another. example, want tell user breakfast, can doWhat printed code ?exercise #9.However, probably want explicit, print information. example, imagine three variables:, course print(meal, dish, count) nicer print “10 pancakes breakfast”, items bold inserted variables’ values. , need use string formatting. Please note string formatting specific printing, can create new string value via formatting store variable without printing print without storing .","code":"print(5)\n#> 5print(\"five\")\n#> fivenumber_of_pancakes = 10\nprint(number_of_pancakes)\n#> 10breakfast = \"pancakes\"\nprint(breakfast)\n#> pancakesbreakfast = \"pancakes\"\nnumber_of_items = 10\nprint(breakfast, number_of_items)\n#> pancakes 10dinner = \"steak\"\ncount = 4\ndesert = \"cupcakes\"\n\nprint(count, dinner, count, desert)meal = \"breakfast\"\ndish = \"pancakes\"\ncount = 10"},{"path":"python-basics.html","id":"string-formatting","chapter":"4 Python basics","heading":"4.7 String formatting","text":"great resource string formatting Python pyformat.info. Python constantly evolves, now one way format strings. , introduce “old” format based classic string formatting used sprintf function C, Matlab, R, many programming languages. somewhat less flexible newer ones simple tasks difference negligible. Knowing old format useful generality. want learn alternatives, read link .general call \"string formatting\"%(tuple values used formatting). learn tuples later. now, assume just comma-separated list values enclosed round brackets: (1, 2, 3).\"string formatting\", specify want put value via % symbol followed optional formatting info required symbol defines type value. type symbols ares stringd integerf float valueg “optimally” printed float value, scientific notation used large values (e.g., 10e5 instead 100000).example formatting string using integer:limited single value can put string. can specify locations via % must make sure pass right number values right order. running , can figure call actually work (output) produce error?exercise #10.noted , case real values two options: %f %g. latter uses scientific notation (e.g. 1e10 10000000000) make representation compact.exercise #11 get better feeling difference.much formatting can read pyformat.info. However, basics sufficient us start programming first game next chapter.","code":"print(\"I had %d pancakes for breakfast\"%(10))\n#> I had 10 pancakes for breakfastprint('I had %d pancakes and either %d  or %d steaks for dinner'%(2))\nprint('I had %d pancakes and %d steaks for dinner'%(7, 10))\nprint('I had %d pancakes and %d steaks for dinner'%(1, 7, 10))"},{"path":"guess-the-number-single-round.html","id":"guess-the-number-single-round","chapter":"5 Guess the Number: a single round edition","heading":"5 Guess the Number: a single round edition","text":"previous chapter covered Python basics, now ready start developing first game! build step step lot learn input, libraries, conditional statements, indentation.start, create new folder (inside course folder) called, example, “guess--number”, download exercise notebook, copy newly created folder, open Jupyter Notebook. chapter , contain exercises reading understanding code.However, using VS Code program scripts actual game. need create separate file code practice12 (e.g., code01.py13, code02.py, etc.) efficient implementation version control certainly clutter folder. allow see solutions every step, make easier give feedback. submitting assignment, just zip folder submit zip-file.","code":""},{"path":"guess-the-number-single-round.html","id":"chapter-concepts-1","chapter":"5 Guess the Number: a single round edition","heading":"5.1 Chapter concepts","text":"Documenting code.Debugging code.Getting input user.Using comparison conditional statements.Using indentation group statements together.Using Python libraries.Generating random numbers.","code":""},{"path":"guess-the-number-single-round.html","id":"the-game","chapter":"5 Guess the Number: a single round edition","heading":"5.2 The Game","text":"program game one participant (computer) picks number within certain range (say, 1 10) participant (human player) trying guess . every guess human, computer responds whether actual number lower guess, higher guess, matches . game player correctly guesses number (later version game) runs attempts.first version allow just one attempt overall game algorithm look like :computer generates random number 1 10prints debugging purposesprompts user enter guesscompares two numbers print outs outcome: “number lower”, “number higher”, “Spot !”","code":""},{"path":"guess-the-number-single-round.html","id":"lets-pick-a-number","chapter":"5 Guess the Number: a single round edition","heading":"5.3 Let’s pick a number","text":"Let us start implementing just first two steps program. First, create variable holding number computer “picked”. name number_picked (can use meaningful name well might easier stick name). make things simpler beginning, hard-code arbitrary number 1 10 (pick one like). , let us print , know number ourselves14. Use string formatting make things user-friendly, e.g., print something like “number ’ve picked …”. able using knowledge previous chapter. code two-liner:Try two-liner Jupyter Notebook (create empty notebook just ). happy , copy-paste code code01.py read learn document run .Put code code01.py.","code":"# 1. create variable and set its value\n# 2. print out the value"},{"path":"guess-the-number-single-round.html","id":"documenting-your-code","chapter":"5 Guess the Number: a single round edition","heading":"5.4 Documenting your code","text":"Now first file Python program, document . Documenting two-lines long simple program may feel silly automatic thing. Later find using several lines comments document single line function. , code works, code can understand. sense, better clean well-documented program currently work correctly undocumented spaghetti code . can fix update former, maintaining updating latter…Python, two ways write comments: multiline single lineUse multiline comments write documentation individual files, functions, classes, methods, etc. learn format documentation Numpy docstring style, learn functions. case, start code01.py file multiline comment briefly describes program contains. Minimally, write Guess Number game. probably good idea sketch game .Use single line comments explain happens particular code block. need comment every line replicate code human language. comment going . already single chunk code, document single sentence.Document code01.py file.","code":"'''A \nmultiline \ncomment\n'''\n\n#  A single line comment."},{"path":"guess-the-number-single-round.html","id":"debugging","chapter":"5 Guess the Number: a single round edition","heading":"5.5 Running and debugging your game in VS Code","text":"Now two-lines-long program, can run already start learning debug . Yes, current program probably simple require actual debugging also simple enough make understanding debugging easier well. debugging crucial skill turns running program black box something transparent easy15 understand. describe debug VS Code might want consult official manual case things changed meantime.two ways run Python program VS Code. First, can use “Run Python File Terminal” play button right. runs program without debugger, use actual runs finalized code. Still, can try running see whether prints .alternative debugging tab, one little bug top run button. select , show “Run Debug”. Click button offer various choices different kinds Python projects frameworks. intents purposes, need “Python File: Debug currently active Python file”. Click execute code (run exactly way button).probably want click Debugging tab → Run Debug button → Pick configuration time. better way configure use F5 key run code. First, click “create launch.json file” select “Python File: Debug currently active Python file” . see new launch.json file appearing editor look like :’s ! VS Code created configuration . Now can close launch.json file run program simple press F5 button. Try ! , work just like , go trouble? debugger pause execution code whenever encounters problem, giving chance examine variables, run snippets code, etc. contrast, running python file terminal (first option) print error message exit program. Moreover, can use breakpoints pause program line, gives opportunity examine code location need.enable breakpoints clicking left line number interested . , ’ve clicked line 6 can see red dot indicates active breakpoint.now run code via F5, program stop line executing .gives chance see value number_picked variable . already listed local variables (top left). also added list watched variables (Watch, left middle) also looked value Debug Console (bottom tab) allows execute Python code program paused. explore different ways . example, see can compute number_picked + 1 number_picked * number_picked Watch tab Debug Console.done examining current state program, six buttons top decide next (hover see hints). , left rightContinue (F5): resume program.Step (F10): executes code without going functions (two following options become clearer learn writing functions).Step code (F11)Step code (Shift+F11).Restart program (Ctrl+Shift+F5).Stop program (Shift+F5).better understand works, stop program (Shift+F5) put additional breakpoint first line code (line #5 program, lines comments empty). Run program via F5 pause first line. Can figure value variable number_picked now?answer “” variable exist yet. Remember, program pauses executing line. Use F10 step code line line see variable appears information gets printed .debugging exercise may necessary solve problems current code showed future. hesitate put breakpoint pause program check reality (.e., actual values variables) matches expectations. Use stepping code slow things watch ponder.","code":""},{"path":"guess-the-number-single-round.html","id":"input-function","chapter":"5 Guess the Number: a single round edition","heading":"5.6 Asking a player for a guess","text":"takes two play Guess Number game. computer part picking number, now need ask player enter guess. , use input() function.function isolated code accepts (optional) inputs, performs action, , optionally, returns value (output). allows split code smaller chunks easier maintain reuse code. already used print() function print things , str(), bool(), int() float() functions convert values. print() input arbitrary number values (even none, try Jupiter Notebook!), action print things , returns nothing (output). float() function takes (somewhat surprisingly) zero one value input (try giving none one Jupiter Notebook see difference), attempts convert given value float (throwing error, ), returns float value output.Similar input → action → output scheme holds input(prompt). takes optional prompt string input. prints prompt message waits user enter string press Enter. returns string value. latter bit string important, game need player enter integer string. moment, let us assume input always valid integer number, type valid integers testing program! way can convert integer without extra checks (add future) assign value new variable called guess. Thus, need add single line assignment statement guess variable left side call input() function right side (think nice prompt message) wrapped (inside ) type-conversion integer via int(). Test code , , enter valid integers, conversion works without error.Update code01.py.","code":""},{"path":"guess-the-number-single-round.html","id":"if-statement","chapter":"5 Guess the Number: a single round edition","heading":"5.7 Conditional if statement","text":"Now two numbers: One computer picked (number_picked) one player entered (guess). need compare provide correct output message. , use conditional statement:part required, whereas elif (short “else, ”) else optional. Thus can something, condition true:can use conditional statements game, need understand (1) conditions (2) use indentation mean grouping statements together.","code":"if some_condition_is_true:\n    # do something\nelif some_other_condition_is_true:\n    # do something else\nelif yet_another_condition_is_true:\n    # do yet something else\nelse:\n    # do something only if all conditions above are false.if some_condition_is_true:\n    # do something, but OTHERWISE DO NOT DO ANYTHING \n    # and continue with code execution\n  \n# some code that is executed after the if-statement,\n# irrespective of whether the condition was true or not."},{"path":"guess-the-number-single-round.html","id":"comparisons","chapter":"5 Guess the Number: a single round edition","heading":"5.8 Conditions and comparisons","text":"Condition expression can evaluated see whether True False. straightforward example expression comparisons expressed human language : today Thursday? answer (equal ) 42? raining umbrella? concentrate comparisons like moment later see Python expression either True False, even look like comparison16.comparison, can use following operators:“equal B” written == B.“equal B” written != B.“greater B” “smaller B” , respectively, > B < B.“greater equal B” “smaller equal B” , respectively, >= B <= B (please note order symbols => =< produce error).Go exercise #1 solve comparisons.Note Python also operator may look identical == (e.g., x == 2 looks equivalent x 2). Moreover, cases also works way. However, subtle difference: == checks whether values identical, whereas checks whether objects (“hold” values) identical. need understand classes objects can appreciate difference, now just keep mind use == (explicitly mentioned needed).can invert logical value using operator, True False False True. means != B == B , correspondingly, == B != B. see works, consider cases indeed equal B .equal B == B evaluates True. != B False, != B → False → True.equal B == B evaluates False. != B True, != B → True → False.Go exercise #2 explore inversion .can also combine several comparisons using /or17 operators. human language, means parts must true: True True → True True False → False, False True → False, False False → False. holds two conditions/comparisons linked via : must true. case one statements must true, e.g. True True → True, True False → True, False True → True, False False → False. , two comparisons/conditions least one true entire expression true.exercises #3 #4.Subtle important point: conditions evaluated left right whole expression resolved one way another. means first expression False, second one (rest ) never evaluated. .e., first second expressions need True know first expression already false, whole expression False case. means code error, even though evaluating int(\"e123\") alone raise ValueError.However, reverse order, int(\"e123\") == 123 needs evaluated first get error messageSimilarly, expression True, need check rest.However, first condition False, need continue (stumble error):exercise #5.Finally, like simple arithmetic, can use brackets () group conditions together. Thus statement “always eat chocolate eat spinach hungry” can written food == \"chocolate\" (food == \"spinach\" hungry). , food == \"chocolate\" food == \"spinach\" hungry evaluated independently, values substituted place condition evaluated.exercise #6.Final thought comparisons: hesitate test Jupyter Notebook using various combinations values pause program condition via breakpoint evaluate comparison Watch Debug Console.","code":"2 * 2 == 5 and int(\"e123\") == 123\n#> Falseint(\"e123\") == 123 and 2 * 2 == 4\n#> invalid literal for int() with base 10: 'e123'2 * 2 == 4 or int(\"e123\") == 123\n#> True2 * 2 == 5 or int(\"e123\") == 123\n#> invalid literal for int() with base 10: 'e123'"},{"path":"guess-the-number-single-round.html","id":"indentation","chapter":"5 Guess the Number: a single round edition","heading":"5.9 Grouping statements via indentation","text":"Let us go back conditional -statement. Take look following code example (note : end some_condition_is_true:), statement #1 executed condition true, whereas statement #2 executed irrespective condition.statements #1 #2 appear -statement, Python know first one executed condition true one always runs? answer indentation: 4 (four!) spaces automatically added whenever press Tab VS Code removed whenever press Shift+Tab. indentation puts statement #1 inside -statement. Thus, indentation shows whether statements belong group must executed one another (indentation level statement #2) inside conditional statement, loop, function, class, etc. (statement #1). complex code , example, -statement inside -statement inside loop, express adding levels indentation. E.g.Pay close attention indentation determines statements executed together! wrong indentation level unfortunately common mistake.exercise #7.ifelse statements evaluated one turns True. following ifelse else statements simply ignored.exercise #8.","code":"if some_condition_is_true:\n    statement #1\nstatement #2 # some statements outside of the loop (0 indentation)\nwhile game_is_not_over: # (0 indentation)\n    # statements inside of the loop \n    if key_pressed: # (indentation of 4)\n        # inside loop and if-statement \n        if key == \"Space\": # (indentation of 8)\n            # inside the loop, and if-statement, and another if-statement\n            jump() # (indentation of 12)\n        else: # (indentation of 4)\n            # inside the loop, and if-statement, and else part of another if-statement\n            stand() # (indentation of 12)\n    \n    # statements inside of the loop but outside of the outermost if-statement\n    print(key) # (indentation of 4)\n    \n# some statements outside of the loop (0 indentation)"},{"path":"guess-the-number-single-round.html","id":"checking-the-answer","chapter":"5 Guess the Number: a single round edition","heading":"5.10 Checking the answer","text":"Now necessary tools finish first version game. Add conditional statements code01.py, thatif computer pick smaller player’s guess, print \"number lower!\"computer pick larger player’s guess, print \"number higher!\"two numbers identical, print \"Spot !\"First, save copy original code code02.py add comparison printing.\n::: {.rmdnote .program}\nExtend program comparison incode02.py\n:::Test code works. , use breakpoints need better understand control flow check whether comparisons work way expect.","code":""},{"path":"guess-the-number-single-round.html","id":"using-libraries","chapter":"5 Guess the Number: a single round edition","heading":"5.11 Using libraries","text":"game “feature-complete”: computer picks number, player makes guess, computer responds appropriately. However, currently playing sides. Lets make computer pick random number . need use randint(, b) function. part Python distribution, even install vanilla Python distribution instead using one PsychoPy. However, use straightaway like print() input(). Type randint(1, 3) Jupyter Notebook observe NameError: name ‘randint’ defined.reason Python awful lot functions loading time clog memory things never intended use. Instead, packaged libraries, can import functions (libraries) actually need program. import via import statement go top file (comment file content). several ways can import libraries. First, can import entire library (random library function randint() need) use functions <library>.<function>. randint beI suggest preferred way using libraries forces explicitly mention name library calling function, .e. random.randint() instead just randint(). may look important just one imported library even modestly-sized project import many libraries, figuring library function belongs tricky. Even importantly, different libraries may functions name. case, function using come last library imported. may realize sort mistake really hard track . Thus, unless good reason otherwise, always import entire library use library. notation!Another less explicit option import functions use without library. prefix. can import one function listing allYou can also rename library function importing via . short, using different name library function make harder others (even future-) understand code. However, “standard” renaming patterns used universally likely encounter.Finally, bad way import functions library: random import *. asterisk means want import functions library want call names without random. prefix. Never, never, never18 ! fills environment functions may aware , potentially overwriting functions, creating conflicts, etc. Never ever! showing , point, see code uses approach might think good idea. terrible idea! Import library, functions, can explicitly show library relying calling function. Always remember Zen Python: “Explicit better implicit.”","code":"import random\n\ncomputer_pick = random.randint(1, 5)from random import randint, randrange\n\ncomputer_pick = randint(1, 5)# this is a standard way to import these two libraries\nimport numpy as np\nimport pandas as pd\n\nnp.abs(-1)\n\n# you can rename individual functions as well, if you really have to (but, please, don't!)\nfrom random import randint as random_integer\n\ncomputer_pick = random_integer(1, 5)"},{"path":"guess-the-number-single-round.html","id":"picking-a-number-randomly","chapter":"5 Guess the Number: a single round edition","heading":"5.12 Picking a number randomly","text":"Now know import library, can use randint() function. , save copy previous code code03.py. Import library use randint() generate random number 1 10. Read documentation randint() understand use . Reading manuals necessary part programming, good point start practicing.implemented code02.py, run several times check computer pick different random values. , use breakpoints want double-check going .Put code code03.py.Congratulations, just programmed first computer game! Yes, simple key ingredients: random decision computer, user input, feedback. Next time, learn loops allow multiple attempts start writing functions make code modular reliable. meantime, let us solidify knowledge programming yet another game!","code":""},{"path":"guess-the-number-single-round.html","id":"one-armed-bandit-a-single-round-edition","chapter":"5 Guess the Number: a single round edition","heading":"5.13 One-armed bandit (a single round edition)","text":"know everything need program simple version “one-armed bandit” game. game logic:Import random library, use randint functionGenerate three random integers (say, 1 5) store three variables slot1, slot2, slot3.Print numbers, use string formatting make look nice.addition,\nthree values , print \"Three kind!\".\ntwo numbers match, print \"Pair!\".\nprint anything, numbers different.\nthree values , print \"Three kind!\".two numbers match, print \"Pair!\".print anything, numbers different.forget document new code03.py file feel free use breakpoints debug .Put code code04.py.","code":""},{"path":"guess-the-number-single-round.html","id":"submitting-for-the-seminar","chapter":"5 Guess the Number: a single round edition","heading":"5.14 Submitting for the seminar","text":"seminar, submit zipped folder exercise notebook four programs.","code":""},{"path":"guess-the-number-multi-round.html","id":"guess-the-number-multi-round","chapter":"6 Guess the Number: a multi round edition","heading":"6 Guess the Number: a multi round edition","text":"previous chapter, programmed single-attempt-“Guess Number” game. Now, expand allow multiple attempts add bells--whistles make fun. Create new subfolder download exercise notebook start!","code":""},{"path":"guess-the-number-multi-round.html","id":"chapter-concepts-2","chapter":"6 Guess the Number: a multi round edition","heading":"6.1 Chapter concepts","text":"Repeating code using loop.Making emergency exit loop.","code":""},{"path":"guess-the-number-multi-round.html","id":"while-loop","chapter":"6 Guess the Number: a multi round edition","heading":"6.2 While loop","text":"want repeat something, need use loops. two types loops: loop, repeated condition true, loop iterates items (use later).basic structure loop isThe <condition> expression evaluated either True False, just like ...elif...else conditional statement. Also, indentations rules determine code inside loop outside.exercise #1.Let us use loop allow player keep guessing finally get right. can copy-paste code programmed last seminar redo scratch (strongly recommend latter!). overall program structure followingPut code code01.py.forget document file use breakpoints step overs explore program flow.","code":"# statements before the loop\n\nwhile <condition>:\n    # statements inside are executed\n    # repeatedly for as long as\n    # the condition is True\n    \n# statements after the loop# import random library so you can use randint function\n\n# generated a random number and store in number_picked variable\n# get player input, convert it to an integer, and store in guess variable\n\n# while players guess is not equal to the value the computer picked:\n    # print out \"my number is smaller\" or \"my number is larger\" using if-else statement\n    # get player input, convert it to an integer, and store in guess variable\n    \n# print \"Spot on!\" \n# (because if we got here that means guess is equal to the computer's pick)"},{"path":"guess-the-number-multi-round.html","id":"counting-attempts","chapter":"6 Guess the Number: a multi round edition","heading":"6.3 Counting attempts","text":"Now let us add variable count total number attempts player. , create new variable (call attempts something similar) loop initialize 1 (first attempt player enter loop). Add 1 every time player enters guess. loop, expand \"Spot !\" message adding information number attempts. Use string formatting make things look nice, e.g., \"Spot , needed just 5 attempts!\". Check number attempts required matches number attempts reported program!Put code code02.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"break","chapter":"6 Guess the Number: a multi round edition","heading":"6.4 Breaking (and exiting)","text":"Code inside loop executed repeatedly condition True , importantly, code inside executed condition evaluated . However, sometimes may need abort sooner without executing remaining code. , Python break statement causes program exit loop immediately without executing rest code inside loop, program continues code loop.exercise #2 build intuition.","code":"# this code runs before the loop\n\nwhile <some_condition>:\n  # this code runs on every iteration\n  \n    if <some_other_condition>:\n        break\n  \n  # this code runs on every iteration but not when you break out of the loop\n\n# this code runs after the loop"},{"path":"guess-the-number-multi-round.html","id":"limiting-number-of-attempts-via-break","chapter":"6 Guess the Number: a multi round edition","heading":"6.5 Limiting number of attempts via break","text":"Let’s put player pressure! Decide maximal number attempts allow stores CONSTANT. Pick appropriate name (e.g. MAX_ATTEMPTS) REMEMBER, CAPITAL LETTERS constant name! Now, use break quit loop, current attempt number greater MAX_ATTEMPTS. Think (within code inside loop) check .Put code code03.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"correct-end-of-game-message","chapter":"6 Guess the Number: a multi round edition","heading":"6.6 Correct end-of-game message","text":"Let us update final message. Currently says “Spot …” assumed program exited loop player gave correct answer. limited attempts necessarily case. Now two reasons exited loop:player answered correctlyThe player ran attempts.Use -else conditional statement print appropriate message. E.g., print \"Better luck next time!\", player lost (ran attempts).Put code code04.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"limiting-number-of-attempts-without-a-break","chapter":"6 Guess the Number: a multi round edition","heading":"6.7 Limiting number of attempts without a break","text":"Although idea add break statement, use sparingly. Without break single place code need check understand program exit loop: condition. However, add break, now two places need examined. every additional break keeps adding . mean avoid costs! use , makes code easier understand. always check modified condition also trick.Let us try exactly . Modify code work without break statement. need complicated condition loop. repeats player’s guess incorrect number attempts still less maximally allowed. Test code works win lose.Put code code05.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"show-remaining-attempts","chapter":"6 Guess the Number: a multi round edition","heading":"6.8 Show remaining attempts","text":"user interface! Modify input prompt message include number remaining attempts. E.g. \"Please enter guess, X attempts remaining\".Put code code06.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"guess-the-number-repeat-game","chapter":"6 Guess the Number: a multi round edition","heading":"6.9 Repeating the game","text":"Let us give option player play . means putting current code inside another loop (called nested loops) repeated long player wants keep playing. code look follows:Pay extra attention indentations group code properly!Put code code07.py.","code":"# import random library so you can use randint function\n\n# define MAX_ATTEMPTS\n\n# define a variable called \"want_to_play\" and set to True\n# while the player still wants to play\n  \n  # your current working game code goes here\n  \n  # ask user whether via input function. E.g. \"Want to play again? Y/N\"\n  # want_to_play should be True if user input is equal to \"Y\" or \"y\"\n  \n# very final message, e.g. \"Thank you for playing the game!\""},{"path":"guess-the-number-multi-round.html","id":"you-do-not-need-a-comparison-if-you-already-have-the-value","chapter":"6 Guess the Number: a multi round edition","heading":"6.10 You do not need a comparison, if you already have the value","text":"updated code, want_to_play variable either True False. used loop repeats value True. Sometimes, people write want_to_play == True express . technically correct certainly work correctly, also redundant. Since want_to_play can True False comparison turns True == True (course True) False == True (False). comparing either value True produces exactly value. Thus, can just write want_to_play: use logical value directly.","code":""},{"path":"guess-the-number-multi-round.html","id":"best-score","chapter":"6 Guess the Number: a multi round edition","heading":"6.11 Best score","text":"“proper” game typically keeps track players’ performance. Let us record fewest number attempts player needed guess number. , create new variable fewest_attempts set MAX_ATTEMPTS (bad player can ). Think, need create . update game round. Add information “Best far” round-message.Put code code08.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"counting-game-rounds","chapter":"6 Guess the Number: a multi round edition","heading":"6.12 Counting game rounds","text":"Let us count many times player played game. idea implementation counting attempts. Create new variable, initialize 0, increment 1 whenever new round starts. Include total number games played final message, e.g. “Thank playing game X times!”Put code code09.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"multi-round-one-armed-bandit","chapter":"6 Guess the Number: a multi round edition","heading":"6.13 Multi round one-armed bandit","text":"end previous chapter, programmed single round one-armed bandit game. already know everything need implement multiple round version structure similar (simpler) multi-round guess--number game just implemented.Let player start initial pot money, say 10 coins. Playing round costs 1 coin, getting three kind pays 10 coins, getting pair pays 2 coins (can change payoffs see fit). round:Take one coin pot (price playing game).Roll dice (already implemented ).Tell player outcome (implemented well).Add coins pot, necessary.Print amount coins left pot.Ask player want continue.Special case, player runs coins, game definitely .Put code code10.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"wrap-up","chapter":"6 Guess the Number: a multi round edition","heading":"6.14 Wrap up","text":"excellent, now two proper working computer games game rounds, limited attempts, best score, ! Zip folder submit.","code":""},{"path":"guess-the-number-ai.html","id":"guess-the-number-ai","chapter":"7 Guess the Number: AI takes a turn","heading":"7 Guess the Number: AI takes a turn","text":"Let us program Guess Number game again19 reverse roles. Now pick number computer guess. Think algorithm computer use reading next paragraph20.optimal way use middle interval guess. way rule half numbers either greater smaller guess (guess number correctly, course). , know number 1 10, split things middle, picking 5 6, pick 5.5 (assume can use integers). opponent tells number greater pick, know must somewhere guess original upper limit, e.g., 5 10. Conversely, opponent responds “lower”, number lower limit guess, e.g., 1 5. next attempt, pick split new interval repeat either guess number correctly end interval contains just one number. need guess anymore.implement program, need learn functions, document , use libraries. Grab exercise notebook start!","code":""},{"path":"guess-the-number-ai.html","id":"chapter-concepts.","chapter":"7 Guess the Number: AI takes a turn","heading":"7.1 Chapter concepts.","text":"Writing functions.Understanding variable scopes.Adopting standard ways document code.Using libraries.","code":""},{"path":"guess-the-number-ai.html","id":"guess-the-number-players-response","chapter":"7 Guess the Number: AI takes a turn","heading":"7.2 Player’s response","text":"Let us warm writing code allow player respond computer’s guess. Recall just three options: number greater, smaller, equal computer’s guess. suggest using >, <, = symbols communicate . need write code prompt player response enter one symbols. .e., prompt input repeated enter anything else. Thus, definitely need use input([prompt]) loop. Think useful informative prompt message . Test works. Using breakpoints might useful .Put code code01.py.","code":""},{"path":"guess-the-number-ai.html","id":"function","chapter":"7 Guess the Number: AI takes a turn","heading":"7.3 Functions","text":"already now use functions, now turn learn care. purpose function isolate certain code performs single computation making testable reusable. Let us go last sentence bit bit using examples.","code":""},{"path":"guess-the-number-ai.html","id":"function-performs-a-single-computation","chapter":"7 Guess the Number: AI takes a turn","heading":"7.3.1 Function performs a single computation","text":"already told reading code easy every action spelled-computers simple clear way. However, lot simple things can overwhelming confusing. Think final code previous seminar: two loops conditional statements nested inside. Add many branches trace, never quite sure happen. cognition working memory, use trace branches, limited just four items21.Thus, function perform one computation / action conceptually clear purpose understood directly name , , single sentence describes it22. name function typically verb function performing action. need sentence explain function , consider splitting code . mean entire description / documentation must fit single sentence. full description can lengthy, particularly underlying computation complex many parameters consider. However, optional details tell reader function job behavior can modified. Still, able understand job just name single sentence. repeating stressing much conceptually simple single-job functions foundation clear robust reusable code. future-grateful work easy--understand isolated reliable code wrote.","code":""},{"path":"guess-the-number-ai.html","id":"function-isolates-code-from-the-rest-of-the-program","chapter":"7 Guess the Number: AI takes a turn","heading":"7.3.2 Function isolates code from the rest of the program","text":"Isolation means code runs separate scope things exist function arguments (limited number values pass outside fixed meaning) local variables define inside function. access variables defined outside script23 variables defined inside functions. Conversely, neither global script functions access variables values use inside. means need study code inside function understand works. Accordingly, write code independent global context function can used . isolation practical (run-time access variables outside means fewer chances things go terribly wrong) conceptual (context required understand code).","code":""},{"path":"guess-the-number-ai.html","id":"function-makes-code-easier-to-test","chapter":"7 Guess the Number: AI takes a turn","heading":"7.3.3 Function makes code easier to test","text":"can build even moderately complex programs can certain individual chunks code every possible condition. produce correct results? fail clearly raise correct error, inputs wrong? use defaults required? However, testing chunks together means running extreme number runs need test possible combinations conditions one chunk given possible conditions chunk, etc. Functions make life much easier. single point entry, fixed number parameters, single return value, isolated (see ), can test one time independent functions rest code. called unit testing heavy use automatic unit testing24 ensures reliable code absolute majority programs apps use25.","code":""},{"path":"guess-the-number-ai.html","id":"function-makes-code-reusable","chapter":"7 Guess the Number: AI takes a turn","heading":"7.3.4 Function makes code reusable","text":"Sometimes, given primary reason use functions. Turning code function means can call function instead copy-pasting code. latter approach terrible idea means maintain code many places might even sure just many. problem even code extremely simple. , define standard way compute initial taking first symbol string (learn indexing slicing later). code simple gets.Imagine decided change use first two symbols. , computation complicated, use just replace [0] [:2]. code computation. use Replace option sometimes might use first element purposes. edit code, bound forget locations (time) making things even less consistent confusing. Turning code function means need modify test just one location. original code implemented via function.“alternative” initial computation. Note code uses function stays sameThus, turning code function particularly useful reused code complex pays even computation simple trivial example . function single code chunk worry can sure computation performed whenever call function (several copies code might might identical).Note put reusable code last least reason use functions. three reasons far important. conceptually clear isolated testable code advantageous even call function . still makes code easier understand test helps reduce complexity replacing chunks code meaning. Take look example . first code takes first symbol action (taking first symbol) mean anything , just mechanical computation. original context initial_for_file = filename[0] additional comments give meaning. contrast, calling function called compute_initial tells happening, disambiguates purpose. suspect future-pro-disambiguation anti-confusion.","code":"...\ninitial = \"test\"[0]\n...\ninitial_for_file = filename[0]\n...\ninitial_for_website = first_name[0]\n...def generate_initial(full_string):\n    \"\"\"Generate an initial using first symbol.\n    \n    Parameters\n    ----------\n    full_string : str\n    \n    Returns\n    ----------\n    str : single symbol\n    \"\"\"\n    return full_string[0]\n\n...\ninitial = generate_initial(\"test\")\n...\ninitial_for_file = generate_initial(filename)\n...\ninitial_for_website = generate_initial(first_name)\n...def generate_initial(full_string):\n    \"\"\"Generate an initial using first TWO symbols.\n    \n    Parameters\n    ----------\n    full_string : str\n    \n    Returns\n    ----------\n    str : two symbols long\n    \"\"\"\n    return full_string[:2]\n\n...\ninitial = generate_initial(\"test\")\n...\ninitial_for_file = generate_initial(filename)\n...\ninitial_for_website = generate_initial(first_name)\n...if filename[0] == \"A\":\n    ...\n    \nif compute_initial(filename) == \"A\":\n    ..."},{"path":"guess-the-number-ai.html","id":"functions-in-python","chapter":"7 Guess the Number: AI takes a turn","heading":"7.4 Functions in Python","text":"","code":""},{"path":"guess-the-number-ai.html","id":"defining-a-function-in-python","chapter":"7 Guess the Number: AI takes a turn","heading":"7.4.1 Defining a function in Python","text":"function Python looks like (note indentation : end first line)parameters optional, return value. Thus, minimal function beYou must define function (!) calling (one times). Thus, create functions code uses .exercise #1.must also keep mind redefining function (defining technically different function name) overwrites original definition, latest version retained can used.exercise #2.Although example exercise makes problem easy spot, large code spans multiple files uses various libraries, solving problem may straightforward!","code":"def <function name>(param1, param2, ...):\n    some internal computation\n    if somecondition:\n        return some value\n    return some other valuedef minimal_function():\n    pass # pass means \"do nothing\"def do_something():\n    \"\"\"\n    This is a function called \"do_something\". It actually does nothing.\n    It requires no input and returns no value.\n    \"\"\"\n    return\n    \ndef another_function():\n    ...\n    # We call it in another function.\n    do_something()\n    ...\n\n# This is a function call (we use this function)\ndo_something()\n\n# And we use it again!\ndo_something()\n\n# And again but via another_function call\nanother_function()"},{"path":"guess-the-number-ai.html","id":"function-arguments","chapter":"7 Guess the Number: AI takes a turn","heading":"7.4.2 Function arguments","text":"functions may need arguments (also called parameters), perform fixed action:However, may need pass information function via arguments order influence function performs action. Python, simply list arguments within round brackets function name (bells whistles keep simple now). example, write function computes prints person’s age given two parameters 1) birth year, 2) current year:good idea give meaningful names functions, parameters, variables. following code produce exactly result understanding much harder (always use meaningful names!):calling function, must pass correct number parameters pass correct order, another reason function arguments meaningful names26.exercise #3.call function, values pass function assigned parameters used local variables (local bit later). However, matter came values, whether variable, hard-coded, returned another function. using numeric, logical, string values (immutable types), can assume link original variable function produced gone (’ll deal mutable types, like lists, later). Thus, writing function reading code, just assume set value call can ignore context call made","code":"def ping():\n    \"\"\"\n    Machine that goes \"ping!\"\n    \"\"\"\n    print(\"ping!\")def print_age(birth_year, current_year):\n    \"\"\"\n    Print age given birth year and current year.\n    \n    Parameters\n    ----------\n    birth_year : int\n    current_year : int\n    \"\"\"\n    print(current_year - birth_year)def x(a, b):\n    print(b - a)# hardcoded\nprint_age(1976, 2020)\n\n# using values from variables\ni_was_born = 1976\ntoday_is = 2023\nprint_age(i_was_born, today_is)\n\n# using value from a function\ndef get_current_year():\n    return 2023\n\nprint_age(1976, get_current_year())"},{"path":"guess-the-number-ai.html","id":"functions-returned-value-output","chapter":"7 Guess the Number: AI takes a turn","heading":"7.4.3 Functions’ returned value (output)","text":"function may perform action without returning value caller (print_age function ). However, may need return value instead. example, make things general, might want write new function called compute_age returns age instead printing (can always print ).Note even function returns value, retained actually used (stored variable, used value, etc.). Thus, just calling store returned value anywhere!exercise #4.","code":"def compute_age(birth_year, current_year):\n    \"\"\"\n    Computes age given birth year and current year.\n\n    Parameters\n    ----------\n    birth_year : int\n    current_year : int\n    \n    Returns\n    ----------\n    int : age\n    \"\"\"\n    return current_year - birth_year"},{"path":"guess-the-number-ai.html","id":"scopes-for-immutable-values","chapter":"7 Guess the Number: AI takes a turn","heading":"7.4.4 Scopes (for immutable values)","text":"discussed , turning code function isolates , makes run scope. Python, variable exists scope defined . defined global script, exists global scope global variable. However, accessible (least without special effort via global operator) within function. Conversely, function’s parameters variables defined inside function, exists accessible inside function. fully invisible outside world accessed global script another function. Conversely, changes make function parameter local variable effect outside world.purpose scopes isolate individual code segments , modifying variables within one scope effect scopes. means writing debugging code, need worry code scopes concentrate code working . scopes isolated, may identically named variables , however, relationship exists parallel universes27. Thus, want know value variable , must look within scope ignore scopes (even names match!).exercise #5.","code":"# this is variable `x` in the global scope\nx  = 5 \n\ndef f1():\n  # This is variable `x` in the scope of function f1\n  # It has the same name as the global variable but\n  # has no relation to it: many people are called Sasha \n  # but they are still different people. Whatever\n  # happens to `x` in f1, stays in f1's scope.\n  x = 3\n  \n  \ndef f2(x):\n  # This is parameter `x` in the scope of function f2.\n  # Again, no relation to other global or local variables.\n  # It is a completely separate object, it just happens to \n  # have the same name (again, just namesakes)\n  print(x)"},{"path":"guess-the-number-ai.html","id":"players-response-as-a-function","chapter":"7 Guess the Number: AI takes a turn","heading":"7.5 Player’s response as a function","text":"Let us put theory functions practice. Use code created acquire player’s response turn function. parameters (now) return player’s response. suggest call input_response (something along lines). Test code works calling function main script.Put code code02.py.","code":""},{"path":"guess-the-number-ai.html","id":"debugging-a-function","chapter":"7 Guess the Number: AI takes a turn","heading":"7.6 Debugging a function","text":"Now first function, can make sense three step /step /step buttons debugger offers . Copy-paste following code separate file (call test01.py, example).First, put break point line main script calls function f2(). Run debugger via F5 program pause line. now press F10 (step ), program go next line print(z). However, press F11 (step ) instead, program step function go x = x + 5 line. inside function, two choices just looked also, can press Shift+F11 step function. , program run code reach next line outside function (end print(z) ). Experiment putting breakpoints various lines stepping //get hang useful debugging tools.Now, put breakpoint inside f1() function run code via F5. Take look left pane, see Call Stack tab. yellow highlighted line editor shows currently (inside f1() function), Call Stack shows get . case show:calls stacked bottom top, means function called main module line 9, ended function f2 line 7, function f1 line 2. Experiment stepping functions keeping eye . might need information frequently useful later projects multiple nested function calls.","code":"def f1(x, y):\n  return x / y\n  \ndef f2(x, y):\n  x = x + 5\n  y = y * 2\n  return f1(x, y)\n  \nz = f2(4, 2)\nprint(z)"},{"path":"guess-the-number-ai.html","id":"numpy-docstring","chapter":"7 Guess the Number: AI takes a turn","heading":"7.7 Documenting your function","text":"Writing function half job. need document ! Remember, good habit makes code easy use reuse. different ways document code use NumPy docstring convention. example documented functionTake look manual document input_response function. need Parameters section currently accepts inputs.Update code code02.py.","code":"def generate_initial(full_string):\n    \"\"\"Generate an initial using first symbol.\n    \n    Parameters\n    ----------\n    full_string : str\n    \n    Returns\n    ----------\n    str : single symbol\n    \"\"\"\n    return full_string[0]"},{"path":"guess-the-number-ai.html","id":"using-prompt","chapter":"7 Guess the Number: AI takes a turn","heading":"7.8 Using prompt","text":"future, asking specific number current guess computer, thus use fixed prompt message. Modify input_response function adding guess parameter. , modify prompt used input() include value parameter. Update functions’ documentation. Test calling different values guess parameter seeing different prompt response.Put code code03.py.","code":""},{"path":"guess-the-number-ai.html","id":"splitting-interval-in-the-middle","chapter":"7 Guess the Number: AI takes a turn","heading":"7.9 Splitting interval in the middle","text":"Let us practice writing functions bit . Recall computer use middle interval guess. Create function (let us call split_interval() something like ) takes two parameters — lower_limit upper_limit — returns integer closest middle interval. tricky part convert potentially float number (e.g, trying find interval 1..10) integer. can use function int() . However, read documentation carefully, perform proper rounding (? read docs!). Thus, round() number closest integer converting .Write function, document , test checking numbers correct.Put split_interval() function testing code code04.py.","code":""},{"path":"guess-the-number-ai.html","id":"single-round","chapter":"7 Guess the Number: AI takes a turn","heading":"7.10 Single round","text":"functions need, let us write code initialize game play single round. initialization boils creating two variables correspond lower upper limits game range (used 1 10 far, can always change ). Next, computer generate guess (split_interval() function ) ask player guess (input_response() function). response (stored separate variable, think name ), update either upper lower limit using ..elif..else statement based player’s response (player said number higher, means new interval guess upper_limit, vice versa lower). Print joyous message, computer’s guess correct.Put functions script code code05.py.","code":""},{"path":"guess-the-number-ai.html","id":"multiple-rounds","chapter":"7 Guess the Number: AI takes a turn","heading":"7.11 Multiple rounds","text":"Extend game, computer keeps guessing finally wins. already know use loop, just think can use participant’s response loop condition variable. Also, think initial value variable use call input_response() one location.Put updated code code06.py.","code":""},{"path":"guess-the-number-ai.html","id":"playing-again","chapter":"7 Guess the Number: AI takes a turn","heading":"7.12 Playing again","text":"Modify code, can play game several times. already know thing need consider exactly perform initialization game. already implemented last game, might tempted look , even, copy-paste code. However, recommend writing scratch. Remember, aim write program learn , therefore, journey important destination.Put updated code code07.py.","code":""},{"path":"guess-the-number-ai.html","id":"best-score-1","chapter":"7 Guess the Number: AI takes a turn","heading":"7.13 Best score","text":"Add code count number attempts computer required round report best score (fewest number attempts) game . need one variable count number attempts one keep best score. , try writing without looking previous game.Put updated code code08.py.","code":""},{"path":"guess-the-number-ai.html","id":"using-you-own-libraries","chapter":"7 Guess the Number: AI takes a turn","heading":"7.14 Using you own libraries","text":"already know use existing libraries can also create use . Take two functions developed put new file called utils.py (forget put multiline comment top file remind inside!) . Copy remaining code (global script) code09.py. work current state won’t find two functions (try see error message), need import utils module. Importing works exactly way libraries. Note even though file utils.py, module name utils (without extension).Put function utils.py, remaining code code09.py.","code":""},{"path":"guess-the-number-ai.html","id":"keep-imports-tidy","chapter":"7 Guess the Number: AI takes a turn","heading":"7.15 Ordnung muss sein!","text":"far, imported one library . However, Python highly modular, common many imports single file. several rules make easier track imports. import libraries, import statements top file avoid putting random order. recommended order 1) system libraries, like os random; 2) third-party libraries, like psychopy; 3) project modules. , within section put libraries alphabetically, soThis may look particularly useful simple code projects grow, need include libraries. Keeping order makes easy understand libraries use non-standard. Alphabetic order means can quickly check whether library included, can quickly find location import statement appear.","code":"import os\nimport random"},{"path":"guess-the-number-ai.html","id":"putting-video-into-videogames","chapter":"7 Guess the Number: AI takes a turn","heading":"7.16 Putting video into videogames","text":"Submit files ready excitement moving onto “proper” videogames PsychoPy.","code":""},{"path":"psychopy-basics.html","id":"psychopy-basics","chapter":"8 Gettings started with PsychoPy","heading":"8 Gettings started with PsychoPy","text":"program first game using PsychoPy, need spend time figuring basics. suitable library writing games, might want use Python Arcade PyGame. However, currently best Python library developing psychophysical experiments ().","code":""},{"path":"psychopy-basics.html","id":"chapter-concepts-3","chapter":"8 Gettings started with PsychoPy","heading":"8.1 Chapter concepts","text":"Understanding use classes objects.Using named parameters functions.Understanding PsychoPy units system.Using basic Psycho visual stimuli handling user inputs.","code":""},{"path":"psychopy-basics.html","id":"minimal-psychopy","chapter":"8 Gettings started with PsychoPy","heading":"8.2 Minimal PsychoPy code","text":"Copy-paste following code code01.py file (remember create new folder chapter?):Run check PsychoPy work. get error saying psychopy library found, check active Python interpreter. get gray window PsychoPy title. Press key (click window, switched another one, registers key press) close. exciting show everything works .Put code code01.py.code simple packs quite novel bits. First line easy, simply import visual event modules psychopy library (library can organized sublibraries make things even modular). , create object win using class Window custom size. Third line uses function waitKeys() event module wait key press. last one closes window calling close method. little trouble lines #1 #3 need learn object-oriented programming understand #2 #4.","code":"\"\"\"\nA minimal PsychoPy code.\n\"\"\"\n\n# this imports two modules from psychopy\n# visual has all the visual stimuli, including the Window class\n# that we need to create a program window\n# event has function for working with mouse and keyboard\nfrom psychopy import visual, event\n\n# creating a 800 x 600 window\nwin = visual.Window(size=(800, 600))\n\n# waiting for any key press\nevent.waitKeys()\n\n# closing the window\nwin.close()"},{"path":"psychopy-basics.html","id":"classes-and-objects","chapter":"8 Gettings started with PsychoPy","heading":"8.3 Classes and objects","text":"PsychoPy library collection classes use create objects, approach called object-oriented programming. core idea name: Instead keeping variables (data) separate functions (actions), combine object attributes28 (variables) methods (functions). approach utilizes natural tendency perceive world collection interacting objects.First, need understand important distinction classes objects. class “blueprint” describes properties behavior objects class. “blueprint” used create instance class, called object. example, Homo sapiens class describes species certain properties, height, can certain things, running. However, Homo sapiens class concept height specific height . E.g., ask “height Homo sapiens?” average (mean, median, etc.) height individuals class. Similarly, say “Run, Homo sapiens! Run!” abstract concepts trouble performing real actions like . Instead, Alexander Pastukhov instance Homo sapiens class specific (average) height specific (average) ability run. instances Homo sapiens (people) different height different (typically better) ability run. Thus, class describes common properties methods instances class (objects) . individual object behave differently different values properties. means whenever meet Homo sapien, sure height per se need look individual instance figure height .Window class describes properties PsychoPy window must actions can perform (can see complete list manual). create object, use class definition store result variable. code call Window class29 passing custom parameters (size=(800, 600)) store object returns variable win.Attributes , essentially, variables belong class , therefore, variables object possess. example, Window class size attribute determines -screen size pixels. also (background) color, attribute determines whether shown full screen mode, etc. Thus, win object attributes specific values.understand properties class/object distinction better, put breakpoint third line code (event.waitKeys()) fire debugger via F5. window created, execution pause find win object Variables/Locals. Click expand show attributes values, including size (check [800, 600]). Note see Window list. class, abstract concept, whereas win instance object class.Methods, Window.close() , essentially, functions belong class/object perform certain actions object. example, method close() closes window, flip() updates finished drawing , etc. important remember method act object belongs instances class. means can create two windows (win1 win2) calling win1.close() close first second window (try !). goes attributes, changing one object affect objects class, just like changing value one variable affect ones.Although barely scratched surface object-oriented programming, enough us able use classes defined us PsychoPy library.","code":""},{"path":"psychopy-basics.html","id":"arguments-by-position-or-name","chapter":"8 Gettings started with PsychoPy","heading":"8.4 Function parameters: default values, passing by position or by name","text":"curious bits visual.Window(size=(800, 600)) call need discuss. curiosities related functions (, therefore, methods functions belong class) classes per se. First, constructor method Window class lot arguments (construct object, call constructor method class, talking functions). yet, passed one . can specify default values individual parameters. case, parameter omitted, default value used insteadIf look documentation, see Window class constructor parameters default value. part PsychoPy’s philosophy combining rich customization (just look sheer number parameters!) simplicity use sensible defaults (specify nothing window still work).Second, just pass value specified parameter value via size=(800, 600). notation called keyword arguments. advantage making explicit parameter passing value . Plus, allows put parameters order, relevant given context30. use names, values assigned individual parameters based position (.k.. positional parameters). can even mix two, positional parameters must come first, see documentation want know .","code":"def divide(x1, x2=2):\n  \"\"\"\n  Divides numbers, uses 2 as a second value if a second term is omitted.\n  \n  Parameters:\n  ----------\n  x1 : number\n  x2 : number, defaults to 2\n  \n  Returns:\n  ----------\n  number\n  \"\"\"\n  return x1 / x2\nprint(divide(2))\n#> 1.0\nprint(divide(2, 4))\n#> 0.5# using positional parameters\nprint(divide(2, 4))\n#> 0.5# using keyword arguments\nprint(divide(x2=4, x1=2))\n#> 0.5# mixing positional and keyword arguments\nprint(divide(2, x2=4))\n#> 0.5print(divide(2, x1=4))\n#> divide() got multiple values for argument 'x1'"},{"path":"psychopy-basics.html","id":"adding-main-loop","chapter":"8 Gettings started with PsychoPy","heading":"8.5 Adding main loop","text":"Currently, much happening program. One thing need add loop can repeatedly draw window (update via flip() method), check user input, perform necessary actions.First, let us add loop handling user inputs (fun drawing part next). loop goes opening closing window:loop repeated user presses escape key , therefore, need variable signals . approach create variable gameover initializing False repeat loop long game . , loop, use function event.getKeys() check whether escape button pressed (, need pass keyList=['escape']). function returns list keys, pressed meantime empty list, keys keyList pressed. Store returned value temporary variable (tend call keys). learn lists next chapter, now use ready-made: len(keys) > 0 comparison True list empty. list indeed empty, means user pressed escape (key specified function call) game . Think can without statement, computing logical value directly?Put code code02.py.","code":"importing libraries\nopening the window\n\n--> our main loop <--\n\nclosing the window"},{"path":"psychopy-basics.html","id":"adding-text-message","chapter":"8 Gettings started with PsychoPy","heading":"8.6 Adding text message","text":"Although now running nice game loop, still boring gray window look . Let us create text stimulus, say “Press escape exit” display loop. use visual.TextStim class PsychoPy library.First, need create press_escape_text object (instance TextStim) main loop. quite parameters can play minimally, need pass window text displayed (win variable) actual text want display (text=\"Press escape exit\"). settings PsychoPy use defaults (default font family, color size, placed right windows’ center).show visuals PsychoPy, first draw element calling draw() method update window flipping31 . Note call flip() stimuli drawn. typically organize code separate chunk prepend comment line # drawing stimuli.# drawing stimuli chunk goes inside main loop either keyboard check32. Organize latter also separate code chunk brief comment.Put code code03.py.Now, nice, although static, message positioned window’s center tells can exit game. Check manual page visual.TextStim try changing passing additional parameters class call. example can change color, whether text bold /italic, aligned, etc. However, want change text displayed, read .","code":"press_escape_text = visual.TextStim(win, \"Press escape to exit\")"},{"path":"psychopy-basics.html","id":"adding-a-square-and-placing-it-not-at-the-center-of-the-window","chapter":"8 Gettings started with PsychoPy","heading":"8.7 Adding a square and placing it not at the center of the window","text":"Now, let us figure create move visuals arbitrary location screen. principle, straightforward every visual stimulus (including TextStim just used) pos property specifies (guessed !) position within window. However, make life easier, PsychoPy first complicates five (5!) different position units systems.start exploring units, let us create simple white square. visual class need visual.Rect. Just like TextStim , requires win variable (knows window belongs ), width (defaults 0.5 mysterious units), height (also defaults 0.5), pos (defaults (0,0)), lineColor (defaults white) fillColor (defaults None). Thus, get “standard” white outline square size (0.5, 0.5) units (0, 0) location need pass win variable: white_square = visual.Rect(win). However, computers curious bug prevents PsychoPy drawing outline correctly. end staring empty screen33, add fillColor=\"white\" call see filled white square.draw square just like drew text stimulus, via draw() method (, , first draw stimuli flip window ). Create code (either keep text draw , drop text), run see white square.Put code code04.py.? square really square? Well, ’ve warned : Five unit systems!","code":""},{"path":"psychopy-basics.html","id":"psychopy-units","chapter":"8 Gettings started with PsychoPy","heading":"8.8 Five unit systems","text":"","code":""},{"path":"psychopy-basics.html","id":"psychopy-units-height","chapter":"8 Gettings started with PsychoPy","heading":"8.8.1 Height units","text":"height units everything specified units window height. center window (0,0) window goes vertically -0.5 0.5. However, horizontal limits depend aspect ratio. 800×600 window (4:3 aspect ratio), go -0.666 0.666 (window 1.3333 window heights wide). 600×800 window (3:4 aspect ratio) -0.375 0.375 (window 0.75 window heights wide), square window 600×600 (aspect ratio 1:1) -0.5 0.5 (, cases goes -0.5 0.5 vertically). means actual -screen distance units axes. square size=(0.5, 0.5) actually square (spans distance vertically horizontally). Thus, height units make sizing objects easier placing horizontal axis correctly harder (need know aspect ratio).Modify code specifying unit system create window: win = visual.Window(..., units=\"height\"). Play code specifying position square create . just need pass extra parameter pos=(<x>, <y>).Put code code05.py.way, way y zero? Unfortunately, unlike x-axis, y-axis can go ways. PsychoPy y-axis points (negative values move square positive ). However, use Eyelink eye tracker record participants looked screen, assumes y-axis starts top screen points down34.Now, modify size square (turn non-square rectangle) passing width=<-width-value> height=<-height-value>.Put code code06.py.","code":""},{"path":"psychopy-basics.html","id":"psychopy-units-norm","chapter":"8 Gettings started with PsychoPy","heading":"8.8.2 Normalized units","text":"Normalized units default units assume window goes -1 1 along x- x-axis. , (0,0) center screen bottom-left corner (-1, -1) whereas top-right (1, 1). makes placing objects easier sizing harder (need know aspect ratio ensure square square).Modify code, uses \"norm\" units create window size white square stimulus, look like square.Put code code07.py.","code":""},{"path":"psychopy-basics.html","id":"pixels-on-screen","chapter":"8 Gettings started with PsychoPy","heading":"8.8.3 Pixels on screen","text":"pixels screen units, window center still (0,0) goes -<width--pixels>/2 <width--pixels>/2 horizontally (-400 400 case) -<height--pixels>/2 <height--pixels>/2 vertically (-300 300). units intuitive working fixed sized window, span along axes (like height units). However, spell trouble window size changed using full screen window monitor unknown resolution. short, use dramatically simplify code.Modify code use \"pix\" units briefly test sizing placing square within window.Put code code08.py.","code":""},{"path":"psychopy-basics.html","id":"degrees-of-visual-angle","chapter":"8 Gettings started with PsychoPy","heading":"8.8.4 Degrees of visual angle","text":"Unlike three units , using degrees visual angle requires knowing physical size screen, resolution, viewing distance (far eyes away screen). measurement units used visual psychophysics describe stimulus size appears retina (see Wikipedia details). Thus, units want use running actual experiment lab.","code":""},{"path":"psychopy-basics.html","id":"centimeters-on-screen","chapter":"8 Gettings started with PsychoPy","heading":"8.8.5 Centimeters on screen","text":", need know physical size screen resolution. fairly exotic units specific usage cases35.","code":""},{"path":"psychopy-basics.html","id":"make-your-square-jump","chapter":"8 Gettings started with PsychoPy","heading":"8.9 Make your square jump","text":"far, fixed location square created . However, can move time assigning new (<x>, <y>) coordinates pos property. E.g., white_square.pos = (-0.1, 0.2). Let us experiment moving square random location every iteration loop (cause lot flashing, photosensitive epilepsy can triggered flashing lights, probably just loop). Use units choice generate new position using random.uniform(, b) function, generates random value within ..b range36. Generate two values (one x, one y). use \"norm\" units, range (-1 1) two dimensions. However, used \"height\" units, need take account aspect ratio window (4:3 using 800×600 pix window).Put code code09.py.","code":""},{"path":"psychopy-basics.html","id":"make-the-square-jump-on-your-command","chapter":"8 Gettings started with PsychoPy","heading":"8.10 Make the square jump on your command","text":"flashy, let us make square jump press space button. , need expand code processes keyboard input. far, restricted just escape button checked whether (hence, escape) button pressed.learn lists indexes next chapter, another ready-made. First, add \"space\" keyList parameter. Next, use conditional statement check whether event.getKeys() returned key press. (len(keys) > 0), can now check whether keys[0] equal \"space\" \"escape\"37. latter, game . \"space\" move square new random position (move every frame!)Hint, debugging, put breakpoint inside statement, program pauses pressed key (happens put win.flip() line?)Put code code10.py.","code":""},{"path":"psychopy-basics.html","id":"basics-covered","chapter":"8 Gettings started with PsychoPy","heading":"8.11 Basics covered","text":"plenty learn PsychoPy ’ve got basics covered. Submit files get ready Whack Mole!","code":""},{"path":"whack-a-mole.html","id":"whack-a-mole","chapter":"9 Whack-a-Mole","heading":"9 Whack-a-Mole","text":"Today create first video game Whack--Mole. game much reaction time experiment: moles/targets appear random delay one predefined locations, player’s task whack (press corresponding button) mole/target disappears. final game look approximately like one video: Circles (moles) turn white, hit correct button time.Grab exercise notebook start!","code":""},{"path":"whack-a-mole.html","id":"chapter-concepts-4","chapter":"9 Whack-a-Mole","heading":"9.1 Chapter concepts","text":"Storing many items lists.Iterating items using loop.Generating range numbers using range().Making pause limiting time wait key.","code":""},{"path":"whack-a-mole.html","id":"lists","chapter":"9 Whack-a-Mole","heading":"9.2 Lists","text":"far, using variables store single values: computer’s pick, player’s guess, number attempts, PsychoPy window object, etc. sometimes need handle one value. already problem computer-based Guess--Number game needed store remaining number range. got away using two variables, one lower one upper limit. However, approach clearly scale well , sometimes, might even know many values need store. Python’s lists solution problem.list mutable38 sequence items individual elements can accessed via zero-based index. Extending idea variable---box, can think lists box numbered slots. store retrieve particular piece need know variable name index item interested within box. , work variable-plus-index exactly way work normal variable, accessing changing value via syntax .list defined via square brackets <variable> = [<value1>, <value2>, ... <valueN>]. individual slot within list also accessed via square brackets <variable>[<index>] index , , zero-based39. means first item variable[0] , N items list, last one variable[N-1]. can figure total number items list getting length via special len() function. Thus, can access last item via variable[len(variable)-1]40. Note -1: list 3 items, index last one 2, 100, 99, etc. spending much time fairly common source confusion.exercise #1 see lists defined indexed.Lists also allow access one slot/index time via slicing. can specify index elements via <start>:<stop> notation. example, x[1:3] give access two items indexes 1 2. Yes, two items: Slicing index goes start including stop. Thus, want get items list, need write x[0:length(x)] , yet, get last item alone still write x[len(x)-1]. Confusing? think ! understand logic find stop---included counterintuitive still consciously remind . Unfortunately, standard way define sequences numbers Python, need memorize .exercise #2 build intuition.slicing, can omit either start stop. case, Python assume missing start means 0 (index first element) missing stop means len(<list>) (, last item included). omit , e.g., my_pretty_numbers[:] return values, equivalent my_pretty_numbers[0:len(my_pretty_numbers)].41Do exercise #3.can also use negative indexes computed relative length list42. example, want get last element list, can say my_pretty_numbers[len(my_pretty_numbers)-1] just my_pretty_numbers[-1]. last--one element my_pretty_numbers[-2], etc. can use negative indexes slicing keep mind including--start--excluding--stop catch: my_pretty_numbers[:-1] return last element list entire list!exercise #4.Slicing can extended specifying step via start:stop:step notation. step can negative, allowing build indexes reverse order:However, must pay attention sign step. goes wrong direction stop reached, Python return empty list.Steps can combined omitted negative indexes. get every odd element list, write my_pretty_numbers[::2]:exercise #5.try access indexes outside valid range, Python raise IndexError43. Thus, trying get 6th element (index 5) five-element-long list generate simple straightforward error. However, slice larger range, truncated without extra warning error. , five-element list my_pretty_numbers[:6] my_pretty_numbers[:600] return numbers (effectively, equivalent my_pretty_numbers[:]). Moreover, slice empty (2:2, include 2 stop value, even though starts 2 well) entire slice outside range, Python return empty list, , neither warning error generated.exercise #6.Python lists dynamic, can always add remove elements , see list methods. can add new item end list via .append(<new_value>) methodOr, can insert(<index>, <new_value>) element index. Unfortunately, means can use arbitrary large index insert new value last element without generating error.can remove item using index via pop(<index>), note item returned well. omit index, pop() removes last element list. , can use valid indexes.exercise #7.","code":"my_pretty_numbers = [1, 2, 3, 4, 5, 6, 7]\nmy_pretty_numbers[4:0:-1]\n#> [5, 4, 3, 2]my_pretty_numbers = [1, 2, 3, 4, 5, 6, 7]\nmy_pretty_numbers[4:0:1]\n#> []my_pretty_numbers = [1, 2, 3, 4, 5, 6, 7]\nmy_pretty_numbers[::2]\n#> [1, 3, 5, 7]my_pretty_numbers = [1, 2, 3, 4, 5, 6, 7]\nmy_pretty_numbers.append(10)\nmy_pretty_numbers\n#> [1, 2, 3, 4, 5, 6, 7, 10]my_pretty_numbers = [1, 2, 3, 4, 5, 6, 7]\nmy_pretty_numbers.insert(2, 10)\nmy_pretty_numbers.insert(500, 20)\nmy_pretty_numbers\n#> [1, 2, 10, 3, 4, 5, 6, 7, 20]my_pretty_numbers = [1, 2, 3, 4, 5, 6, 7]\nmy_pretty_numbers.pop(-1)\n#> 7\nmy_pretty_numbers.pop(3)\n#> 4\nmy_pretty_numbers\n#> [1, 2, 3, 5, 6]"},{"path":"whack-a-mole.html","id":"basic-game-scaffolding","chapter":"9 Whack-a-Mole","heading":"9.3 Basic game scaffolding","text":"Phew lot lists44. However, work play makes Jack dull boy! let us start basic PsychoPy scaffolding. code structure:Try scratch. left hints help can always consult online documentation. forget document file split code meaningful chunks comments (needed).Put code code01.py.","code":"import libraries from [psychopy]\ncreate the PsychoPy window (visual.Window())\nflip the window (.flip())\nwait for a player to press the escape key (event.waitKeys())\nclose the window (.close())"},{"path":"whack-a-mole.html","id":"three-moles","chapter":"9 Whack-a-Mole","heading":"9.4 Three moles","text":"Let us create three moles represented circles. Create new list variable moles put three circles . One go left, one dead center, one right. Watch video see mean. Think reasonable size (units make keeping circle circle easier?) position. can also use different colors , .can either create empty list .append() circles one time can use square brackets put three list one go. draw() circles flip window wait key press. Note draw one time. Therefore, need add three lines next section show easier way.Put code code02.py.","code":""},{"path":"whack-a-mole.html","id":"for-loop","chapter":"9 Whack-a-Mole","heading":"9.5 For loop","text":"code , needed iterate three moles (circles) list. Python tool just : \nloop iterates items sequence (list sequence!). example:, code inside loop repeated three times three items list. iteration, next value list gets assigned temporary variable a_number (see output). value assigned variable, can use just like variable. can print (first print), can modify (second line within loop), use value calling functions, etc. better appreciate , copy-paste code temporary file (call test01.py), put breakpoint onto first print statement use F10 step loop see value a_number variable changes iteration gets modified second line within loop.Note can use break statement loop.exercise #8.","code":"numbers = [2, 4, 42]\nfor a_number in numbers:\n    print(\"Value of a_number variable on this iteration is %d\"%(a_number))\n    a_number = a_number + 3\n    print(\"  Now we incremented it by 3: %d\"%(a_number))\n    print(\"  Now we use in a formula a_number / 10: %g\"%(a_number / 10))\n#> Value of a_number variable on this iteration is 2\n#>   Now we incremented it by 3: 5\n#>   Now we use in a formula a_number / 10: 0.5\n#> Value of a_number variable on this iteration is 4\n#>   Now we incremented it by 3: 7\n#>   Now we use in a formula a_number / 10: 0.7\n#> Value of a_number variable on this iteration is 42\n#>   Now we incremented it by 3: 45\n#>   Now we use in a formula a_number / 10: 4.5"},{"path":"whack-a-mole.html","id":"drawing-in-a-loop","chapter":"9 Whack-a-Mole","heading":"9.6 Drawing in a loop","text":"Now learned loop, easy draw moles. Just iterate list (come good temporary variable name) draw() current item (temporary variable).Put code code03.py.","code":""},{"path":"whack-a-mole.html","id":"range","chapter":"9 Whack-a-Mole","heading":"9.7 range() function: Repeating code N times","text":"Sometimes, might need repeat code several times. example, imagine 40 trials experiment. Thus, need repeat trial-related code 40 times. can, course, build list 40 items long hand iterate Python handy range() function . range(N) yields N integers 0 N-1 (----including rule slicing) can iterate loop.can modify range() function behavior providing starting value step size. simplest form range(N) handy tool repeat code many times. Note always need temporary variable loop, sometimes may use . cases like , use _ (underscore symbol) variable name indicate lack use.Alternatively, can use range() loop indexes list (remember, can always access individual list item via var[index]). exactly that45! Modify code use range() function loop (can compute number iterations need length list?), use temporary variable index list draw item46. doubt, put breakpoint inside (just ) loop step code understand values temporary loop variable gets used.Put modified code code04.py.","code":"for x in range(3):\n    print(\"Value of x is %d\"%(x))\n#> Value of x is 0\n#> Value of x is 1\n#> Value of x is 2for _ in range(2):\n    print(\"I will be repeated twice!\")\n#> I will be repeated twice!\n#> I will be repeated twice!"},{"path":"whack-a-mole.html","id":"random-mole","chapter":"9 Whack-a-Mole","heading":"9.8 A random mole","text":"Drawing three moles served practical exercise loops real game need shown one random target time. create three targets draw one . However, later like change color target indicate player hit , simpler (bit wasteful) create single mole every time need one., define one CONSTANT list three colors used another one three horizontal locations (vertical location , need worry ). Next, randomly pick target three want create, .e., need generate index target use index figure target’s location color. can either via random.randrange() via random.choice() building range via function name just learned (remember organize imports alphabetically). Store index variable meaningful name47 use constants create target corresponding color corresponding location. , need draw single target waiting key press.code, put breakpoint check value index variable matches shown screen48.Put modified code code05.py.","code":""},{"path":"whack-a-mole.html","id":"clock-wait","chapter":"9 Whack-a-Mole","heading":"9.9 Random time","text":"makes Whack--Mole game fun know mole appear also know appear much time whack . Thus, need modify presentation schedule. need blank period random duration (suggest 0.75 s 1.5 s) limited presentation duration (0.5 0.75 s). First, need define ranges constants. Now know lists can use single variable hold ends range. , need generate two numbers (one blank another presentation) coming uniform distrubition within range., CONSTANT hold values two parameters random.uniform() function two ways using . First, can use index 0 get value first parameter 1 second parameter:However, Python nifty trick called [Unpacking Argument Lists]: can pass list arguments prepended asterisk Python unpack list arguments order list: first value goes parameter, second value second parameter, etc. , case, code can simplified toNote make sure number order elements list match function parameters!Back game, use random.uniform() function generate random blank presentation times, store variables choice, time blank presentation using wait() function clock module.Now time update structure code. approximate outline (note dropped wait keys):Note response processing moment window close right stimulus presented.Put code code06.py.","code":"import random\n\nTIME_UNTIL_BEEP = [0.1, 0.3]\nrandom.uniform(TIME_UNTIL_BEEP[0], TIME_UNTIL_BEEP[1])random.uniform(*TIME_UNTIL_BEEP)def single_parameter_function(x):\n  \"\"\"Do nothing but require a single paramter\n  \"\"\"\n  pass\n\nTWO_VALUES = [1, 3]\n\nsingle_parameter_function(*TWO_VALUES)\n#> single_parameter_function() takes 1 positional argument but\n#> 2 were given\"\"\"Document your file\n\"\"\"\nimport all libaries you need in an alphabetical order\n\ndefine CONSTANTS\n\ncreate window\n\n# generating random parameters for the trial\npick random index for the mole\ncreate the mole\ngenerate random durations for blank and presentation interval\n\n# blank\nclear window (win.flip() alone)\nwait for \"blank duration\" seconds\n\n# presentation\ndraw the mole\nwait for \"presentation duration\" seconds\n\nclose the window"},{"path":"whack-a-mole.html","id":"repeating-trials","chapter":"9 Whack-a-Mole","heading":"9.10 Repeating trials","text":"already know repeat code many times. Decide number trials / rounds (define CONSTANT) repeat single round many times. Think code goes inside loop stay outside randomization work properly.Put code code07.py.","code":""},{"path":"whack-a-mole.html","id":"waitKeys-maxwait","chapter":"9 Whack-a-Mole","heading":"9.11 Exit strategy","text":"hope used small number trials (advice, yes!) program possibility exit game via escape key. put , replace wait() calls waitKeys() function. maxWait parameter default set infinity can set duration require. player press key, work just like wait() . player presses key (allow \"escape\" now), means want abort game (possible action moment). Thus, assign returned value temporary variable (keys?) check whether equal None49. equal None, break loop!Put code code08.py.","code":""},{"path":"whack-a-mole.html","id":"whacking-that-mole","chapter":"9 Whack-a-Mole","heading":"9.12 Whacking that mole","text":"moles appear random location random delay random period time. Now just need add ability whack ’em! whack mole present. Thus, need modify handle waitKeys() call presentation interval.First, create new constant three keys correspond three locations. suggest using [\"left\", \"\", \"right\"], cursor keys50. Next, need use keyList parameter. However, use list directly, also need escape key. simplest way put “escape” list concatenate two lists via +: [\"escape\"] + YOUR_CONSTANT_WITH_KEYS. concatenation directly set value keyList function call. continue, run code test can abort program presentation (blank interval) pressing three keys. Also check escape still works!Now keys press, need sophisticated processing (gonna quite nested conditional statements). still need check whether waitKeys() returned None first. , must returned list pressed keys. Actually, list just single item51, can work directly via keys[0]. Use conditional -else statement break loop player pressed escape. Otherwise, one three “whack” keys.next step establish index key corresponds . Python makes extremely easy lists .index(value) method returns index value within list. (CONSTANT) list keys pressed key: Figure index check whether matches index target (imole variable code). , let us provide visual feedback success: change mole (circle) fillColor white, draw , wait 300 ms (setup constant feedback duration). way, mole turn white remain briefly screen hit disappear immediately, missed.Put code code09.py.","code":""},{"path":"whack-a-mole.html","id":"you-did-it","chapter":"9 Whack-a-Mole","heading":"9.13 You did it!","text":"Congratulations first video game! use bells--whistles like score, combos cool, proper mole images instead circle, etc. works fun (feel challenged, reduce presentation time)! Submit files next time ditch keyboard learn handle mouse Memory game.","code":""},{"path":"memory-game.html","id":"memory-game","chapter":"10 Memory game","heading":"10 Memory game","text":"Today, write good old Memory game: Eight cards lying “face ”, can turn two , identical, taken table. different, cards turn “face ” .start, create new folder game create subfolder Images . , download images chicken52 use game unzip Images subfolder. Also, grab exercise notebook!","code":""},{"path":"memory-game.html","id":"chapter-concepts-5","chapter":"10 Memory game","heading":"10.1 Chapter concepts","text":"Mutable vs. immutable objectsShowing images.Working files via os library.Using dictionaries.Performing list operations.Looping index item via list enumeration.","code":""},{"path":"memory-game.html","id":"variables-as-boxes-immutable-objects","chapter":"10 Memory game","heading":"10.2 Variables as boxes (immutable objects)","text":"game, use dictionaries. mutable, like lists contrast “normal” immutable values (integers, floats, strings). need learn distinction two kinds objects (values) behave differently circumstances, good (power!) bad (weird unexpected behavior!) news.may remember variable---box metaphor used introduce variables. short, variable can thought “box” variable name written value stored “inside”. use value assign different variable, can assume Python makes copy it53 puts copy different variable “box”. replace value variable, take old value, destroy (throwing nearest black hole, assume), create new one, put variable “box”. change variable based current state, thing happens. take value, create new value (adding original one operation), destroy old one, put new one back variable “box”. important point although variable can different immutable values (changed imole variable every round), immutable value never changes. gets replaced another immutable value never changes54.box metaphor explains scopes work way . scope set boxes whenever pass information scopes, e.g., global script function, copy value (variable) created put new box (e.g., parameter) inside function. function returns value, copied put one boxes global script (variable assigned returned value ), etc.However, true immutable objects (values) numbers, strings, logical values, etc. also tuples (see ). guessed name, means mutable objects behave differently.","code":""},{"path":"memory-game.html","id":"mutable-objects","chapter":"10 Memory game","heading":"10.3 Variables as post-it stickers (mutable objects)","text":"Mutable objects , example, lists dictionaries55, .e., things can change. key difference immutable objects can thought fixed size. number takes many bytes store, goes given string (although different string require fewer bytes). Still, change, created destroyed unneeded never truly updated.Mutable objects can changed56. example, can add elements list, remove , shuffle . goes dictionaries. Making object immutable computationally inefficient: Every time add value (long) list destroyed recreated just one additional value. Python simply updates original object. computation efficiency, objects copied assign different variable use parameter value passed reference. means variable longer “box” put values “sticker” put object (list, dictionary). can put many stickers object want still object!Earth mean? Keeping mind variable just sticker (one many) mutable object, try figuring output :exercise #1.Huh? precisely meant “stickers object”. First, create list put x sticker . , assign list y, words, put y sticker list. Since x y stickers object, , effectively, synonyms. specific situation, set x = y, matter variable name use change object, just two stickers hanging side--side list. , just reminder, happen immutable values, like numbers, things behave way expect behave.variable---sticker, .k.. “passing value reference”, important implications function calls, breaks scope without ever giving warning. Look code try figuring output .exercise #2.manage modify global variable inside function? Didn’t change local parameter function? Yep, exactly problem passing reference. function parameter yet another sticker object, even though looks like need worry global variables (’s wrote function learned scopes!), still . perplexed , good company. one unexpected confusing bits Python routinely catches people57 surprise. Let us exercises, show solve scope problem mutable objects.exercise #3.","code":"x = [1, 2, 3]\ny = x\ny.append(4)\nprint(x)def change_it(y):\n    y.append(4)\n\nx = [1, 2, 3]\nchange_it(x)\nprint(x)"},{"path":"memory-game.html","id":"tuple","chapter":"10 Memory game","heading":"10.4 Tuple: a frozen list","text":"wise people created Python acutely aware problem variable---sticker creates. , added immutable version list, called tuple. “frozen” list values, can loop , access items index, figure many items , modify . appending, removing, replacing values, etc. means variable frozen list box rather sticker behaves just like “normal” immutable object. can create tuple using round brackets.can loop , e.g.,, said, appending throw mistakeSame goes trying change itThis means need pass list values function want link original variable, instead pass tuple values function. function still list values link original list object now broken. can turn list tuple using tuple(). Keeping mind tuple() creates frozen copy list, happen ?exercise #4.probably figured , y = tuple(x), Python creates copy list values, freezes (immutable now), puts “y” box. Hence, whatever original list, effect immutable “y”.Conversely, “unfreeze” tuple turning list via list(). Please note creates new list, relation existing list, even values originally taken !exercise #5.Remember just said list() creates new list? means can use create copy list directly, without intermediate tuple step. way can two different lists identical values. can also achieve results slicing entire list, e.g. list(x), x[:].exercise #6., y = list(x) created new list (carbon copy one “x” sticker ) “y” sticker put new list, “x” remained hanging original.feel head spinning , unfortunately, tell gets even worse. following paragraph covers fairly advanced scenario want know , things work extremely counterintuitively personally caught issue times always took forever figure problem. Thus, want least aware . tuple (immutable!) contains list (mutable) inside? told , modify item item merely reference list (sticker mutable object!), even though tuple immutable, can still fiddle list . Moreover, making copy tuple merely make copy reference still points list! , thinking since tuples everything immutatable well-behaving caught that58. example mess:Confusing? bet! feel overwhelmed whole immutable/mutable, tuple/list, copy/reference confusion, just normal human . understand (computational) reasons things way, aware difference useful can still catches surprise time time! , word advice, careful double-check code using debugger whenever assigning list dictionaries, passing functions, making copies, lists inside lists, etc. aware things may work think !","code":"i_am_a_tuple = (1, 2, 3)i_am_a_tuple = (1, 2, 3)\nfor number in i_am_a_tuple:\n    print(number)\n#> 1\n#> 2\n#> 3i_am_a_tuple = (1, 2, 3)\n\n# throws AttributeError: 'tuple' object has no attribute 'append'\ni_am_a_tuple.append(4)\n#> 'tuple' object has no attribute 'append'i_am_a_tuple = (1, 2, 3)\n\n# throws TypeError: 'tuple' object does not support item assignment\ni_am_a_tuple[1] = 1 \n#> 'tuple' object does not support item assignmentx = [1, 2, 3]\ny = tuple(x)\nx.append(4)\nprint(y)tuple_1 = tuple([1, [\"A\", \"B\"], 2])\ntuple_2 = tuple_1\n\n# This (correctly) does not work\ntuple_1[0] = [\"C\", \"D\"]\n#> 'tuple' object does not support item assignment\n\n# But we can change first element of the list to \"C\" and second to \"D\"\n# Reference to the list is frozen, but the list itself is mutable!\ntuple_1[1][0] = \"C\"\ntuple_2[1][1] = \"D\"\n\nprint(tuple_1)\n#> (1, ['C', 'D'], 2)\nprint(tuple_2)\n#> (1, ['C', 'D'], 2)"},{"path":"memory-game.html","id":"minimal-code","chapter":"10 Memory game","heading":"10.5 Minimal code","text":"Enough theory, let us get busy writing game. usual, let us start minimal code (try scratch instead copy-pasting last game):first thing need decide window size pixels units sizing placing cards easier. chicken image 240×400 pixels , game, need place exactly 4×2 images, .e. window must 4 cards wide 2 cards high. forget document file!Put code code01.py.","code":"importing psychopy modules that we need\n \ncreating a window of a useful size and useful units\n\nwaiting for a key press\n\nclosing the window"},{"path":"memory-game.html","id":"imagestim","chapter":"10 Memory game","heading":"10.6 Drawing an image","text":"used (abstract boring) circles represent moles today use actual images chicken (see instructions downloading ). Using image stimulus PsychoPy straightforward behaves much like visual stimuli already know. First, need create new object calling visual.ImageStim(...). can find complete list parameters documentation initial intents purposes, need pass three :window variable: win.image file name: image=\"Images/r01.png\" (images subfolder therefore need use relative path).size: size=(???, ???). one compute. picked norm units, , window 2 units wide 2 units high height 1 units height aspect-ratio units wide. want 4×2 images, size (width height) image units choice?Draw chicken image (appear center screen).Put code code02.py.","code":""},{"path":"memory-game.html","id":"placing-an-image-index-to-position","chapter":"10 Memory game","heading":"10.7 Placing an image (index to position)","text":"default, image placed center screen, surprisingly useful default typical psychophysical experiment shows stimuli fixation (also, typically, center screen). However, need draw eight images, designated location. need create function takes image index (goes 0 7) returns list pair values location screen. sketch index correspond location. Note image location (pos corresponds center image.Name function position_from_index. take one argument (index) return list [<x>, <y>] coordinates PsychoPy units (now assume norm). can use value pos argument ImageStim().computation might look complicated, let get started. can compute x coordinate top row? Concentrating top row alone makes things simpler column index overall index: left-column 0, next one 1, etc. need simple algebra \\(x = a_x + b_x \\cdot column\\). can easily deduce \\(a_x\\) \\(b_x\\) figure locations first second cards hand. goes y coordinate. Assuming know row, either 0 (top row) 1 (bottom row), can compute \\(y = a_y + b_y \\cdot row\\) (note rows go top--bottom PsychoPy coordinates go bottom--top)., hear say, row column indexes, overall index? compute need keep mind row four cards. , can make use two special division operators: floor division operator // modulos, divison remainder % operators. former returns integer part division, 4 // 3 1 (4/3 1.33333) 1 // 4 0 (1/4 0.25). latter returns remaining integers, 4 % 3 1 1 % 4 0. two operators enough compute row column indexes.suggestion first play individual formulas Jupyter Notebook, makes easier try (dividing) things seeing result, putting various values formulas, etc. confident code working, turn function, document , put separate file (utilities.py, forget put comment top file well!). can import main script use place card. Try different indexes make sure card appears . Remember, put breakpoint step program watching variables, things work expected.Put position_from_index utilities.py.\nPut update code code03.py","code":""},{"path":"memory-game.html","id":"backside-of-the-card","chapter":"10 Memory game","heading":"10.8 Backside of the card","text":"chicken image card’s face game starts cards face , player see backs. use plain rectangle backside. Pick nice looking combination fillColor (inside) lineColor (contour) colors, requirement different, otherwise impossible see individual cards. Modify code, draw image (face card) rectangle (back card) side--side (e.g., face position index 0, rectangle position 1 4). way can check sizes match positioned correctly.Put code code04.py.","code":""},{"path":"memory-game.html","id":"dictionaries","chapter":"10 Memory game","heading":"10.9 Dictionaries","text":"card use plenty properties: front (image), back (rectangle), properties side shown whether card already taken screen. calls container, put relevant bits single variable. put values list use numerical indexes access individual elements (e.g., card[0] front image card[2] indicate active side) indexes meaning per se, figuring card[0] different card[2] tricky. Python solution cases like : dictionaries.dictionary container stores information using key : value pairs. similar look meaning translation (value) word (key) real dictionary, hence name. create dictionary, use curly brackets {<key1> : <value1>}, {<key2> : <value2>, ...} create via dict(<key1>=<value1>, <key2>=<value2>, ...). Note second version restrictive keys must follow rules variable names, whereas curly-brackets version keys can arbitrary strings.created dictionary, can access modify field using key, e.g. print(book[\"Author\"]) book[\"Author\"] = \"Moers, W.\". can also add new fields assigning values , e.g., book[\"Publication year\"] = 1999. short, can use combination <dictionary-variable>[<key>] just like use normal variable. similar using list[index] combination, difference index must integer, whereas key can hashable59 value.","code":"book = {\"Author\" : \"Walter Moers\",\n        \"Title\": \"Die 13½ Leben des Käpt'n Blaubär\"}\n        \n# or, equivalently\nbook = dict(Author=\"Walter Moers\",\n            Title=\"Die 13½ Leben des Käpt'n Blaubär\")"},{"path":"memory-game.html","id":"using-a-dictionary-to-represent-a-card","chapter":"10 Memory game","heading":"10.10 Using a dictionary to represent a card","text":"card following properties, key-value entries dictionary\"front\": front side (image chicken).\"back\": back side (rectangle).\"filename\": identity card use later check whether player opened two identical cards (filenames match) two different ones.\"side\": can either \"front\" \"back\", information side (drawn screen). Set \"back\" , initially, cards face . However, can always set temporarily \"front\" see cards distributed.\"show\": logical value, set True. use later mark cards table , therefore, shown. Initially, cards shown, cards created \"show\" equal True.Create dictionary variable (name card) fill relevant values (use either \"front\" “back\" \"side\" key) stimuli (can put PsychoPy stimuli dictionary just like put list earlier). Modify code draws correct image based value \"side\" entry. Note need -statement ! Think key need access two sides value \"side\" key.Put code code05.py.","code":""},{"path":"memory-game.html","id":"card-factory","chapter":"10 Memory game","heading":"10.11 Card factory","text":"code create one card need eight . definitely calls function. Write function (put utilities.py declutter main file) takes three parametersa window variable (need create PsychoPy stimuli),filename,card position index,returns dictionary, just like one created. much code, need wrap function document . Call function create_card use main script create card dictionary. Think libraries now need import utilities.py.Put create_card utilities.py. \nPut code code06.py.","code":""},{"path":"memory-game.html","id":"getting-a-list-of-files","chapter":"10 Memory game","heading":"10.12 Getting a list of files","text":"single card, simply hard-coded name image file, well location. However, real game (experiment) like flexible automatically determine files Images folder. covered os library contains various utilities working operating system , particular, files directories. Specifically, os.listdir(path=“.”) returns list filenames files folder specified path. default, current path (path=\".\"). However, can use either relative path - os.listdir(\"Images\"), assuming Images subfolder current directory - absolute path os.listdir(\"E:/Teaching/Python/MemoryGame/Images\") (case)60.Try Jupyter Notebook (forget import os library). get list 8 files coded [r|l][index].png, r l denote direction chicken looking. However, game need four images (4 × 2 = 8 cards). Therefore, need select subset , e.g., four chicken looking left right . , let us work chicken looking left, meaning need pick files start “l”. make filtering easier, use cool Python trick called list comprehensions.","code":""},{"path":"memory-game.html","id":"list-comprehension","chapter":"10 Memory game","heading":"10.13 List comprehension","text":"List comprehension provides elegant easy--read way create, modify /filter elements list creating new list. general structure isLet us look examples understand works. Imagine list numbers = [1, 2, 3] need increment number 161. can creating new list adding 1 item  part:Note equivalent toOr, imagine need convert item string. can simply asWhat equivalent form using normal loop? Write versions code Jupiter cells check results .exercise #7 Jupyter notebook.Now, implement code using list comprehension. Check results match.exercise #8 Jupyter notebook.noted , can also use conditional statement filter items passed new list. numbers example, can retain numbers greater 1Sometimes, statement written three lines, instead one, make reading easier:can course combine transformation filtering single statement. Create code filters items 2 adds 4 .exercise #9 Jupyter notebook.","code":"new_list = [<transformation-of-the-item> for item in old_list if <condition-given-the-item>]numbers = [1, 2, 3]\nnumbers_plus_1 = [item + 1 for item in numbers]numbers = [1, 2, 3]\nnumbers_plus_1 = []\nfor item in numbers:\n    numbers_plus_1.append(item + 1)numbers = [1, 2, 3]\nnumbers_as_strings = [str(item) for item in numbers]strings = ['1', '2', '3']\nnumbers = []\nfor astring in strings:\n    numbers.append(int(astring) + 10)numbers = [1, 2, 3]\nnumbers_greater_than_1 = [item for item in numbers if item > 1]numbers = [1, 2, 3]\nnumbers_greater_than_1 = [item \n                          for item in numbers\n                          if item > 1]"},{"path":"memory-game.html","id":"getting-list-of-relevant-files","chapter":"10 Memory game","heading":"10.14 Getting list of relevant files","text":"Use list comprehension create list files chicken looking left, .e. filenames start “l”. Use .startswith() check whether starts “l”, store list filenames variable. Test code Jupyter Notebook. get list four files.","code":""},{"path":"memory-game.html","id":"list-operations","chapter":"10 Memory game","heading":"10.15 List operations","text":"list consists four unique filenames game card appear twice. several ways duplicating lists. , use opportunity learn list operations. Python lists implement two operations:Adding two lists together: <list1> + <list2>.Note produces new list , therefore, equivalent extend method .extend(b)! + creates new list, .extend() extends original list .62List replication:: <list> * <integer-value> creates new list replicating original one <integer-value> times. example:Use either operation .extend() method create list filename repeated twice. Hint, can apply list multiplication directly filenames list created via list comprehension (, replicate line). Try code Jupyter Notebook.","code":"a = [1, 2, 3]\nb = [4, 5, 6]\na + b\n#> [1, 2, 3, 4, 5, 6]a = [1, 2, 3]\nb = 4\na * b\n#> [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]"},{"path":"memory-game.html","id":"enumerate","chapter":"10 Memory game","heading":"10.16 Looping over both index and item via list enumeration","text":"Now list filenames, can create list cards . dictionary function requires index filename. latter item list, former index item. build index using range() function Python better solution : enumerate() function! , instead iterating list, iterate enumerate(), get tuple (index, value). example:can use enumerate() list comprehension.","code":"letters = ['a', 'b', 'c']\nfor index, letter in enumerate(letters):\n    print('%d: %s'%(index, letter))\n#> 0: a\n#> 1: b\n#> 2: cletters = ['a', 'b', 'c']\n[\"%d: %s\"%(index, letter) for index, letter in enumerate(letters)]\n#> ['0: a', '1: b', '2: c']"},{"path":"memory-game.html","id":"os-library","chapter":"10 Memory game","heading":"10.17 Computing path","text":"Originally, specified image file name \"Images/r01.png\". job now many filenames need join folder name form path string. top , major operating systems disagree Windows / (forward slash) \\ (backslash) used paths. make code platform-independent , therefore, robust, need construct filename string using join function path submodule. Thus, can import os library call os.path.join(...) (personal preference). , can use approach PsychoPy modules import path os, shortening code. , course, can even import join directly find lack library information use makes things harder understand (even though code even shorter).join takes path components parameters joins match OS format. E.g., os.path.join(\"Python seminar\", \"Memory game\", \"memory01.py\") Windows return 'Python seminar\\\\Memory game\\\\memory01.py'. need load multiple files, filename part vary. However, folder images located , per usual, good idea turn formally declared CONSTANT.Modify create_card function assumes filename parameter just filename folder name , therefore, build path join folder name (defined constant module!). now need drop \"Images/\" value pass . Test code works !Update create_card utilities.py\nPut updated code code07.py.","code":""},{"path":"memory-game.html","id":"a-deck-of-cards","chapter":"10 Memory game","heading":"10.18 A deck of cards","text":"Let us put together code need figuring cards’ filenames, duplicating , creating cards using filename index.Copy code building duplicated list filenames tested Jupyter notebook main script (code08.py). , use enumerate list comprehension enumerated duplicate filenames create cards (plural, replacing singular card variable) via create_card function wrote earlier. Update drawing code loop draw cards. default \"side\" \"back\", things look pretty boring. Change ’“front”` see faces.Put code code08.py.","code":""},{"path":"memory-game.html","id":"shuffle","chapter":"10 Memory game","heading":"10.19 Shuffling cards","text":"draw cards faces, notice duplicating filenames list produces orderly sequence makes playing game easy (boring). need shuffle() filename list create cards. Note shuffle() shuffles list item place using fact list mutable. means simply call function pass list argument. list gets modified, nothing returned nothing need assigned back filenames variable.Put code code09.py.","code":""},{"path":"memory-game.html","id":"lets-have-a-break","chapter":"10 Memory game","heading":"10.20 Let’s have a break!","text":"covered lot ground, might good point take break submit code review.","code":""},{"path":"memory-game.html","id":"adding-main-game-loop","chapter":"10 Memory game","heading":"10.21 Adding main game loop","text":"point, shuffled deck cards show player presses key. Modify code main presentation loop, similar one experimented PsychoPy stimuli. Previously, used logical gameover variable control loop. , two reasons exit loop: player pressed escape key won game. Therefore, let us use string game_state variable initialized \"running\". Repeat loop game_state equal \"running\" change \"abort\" player pressed escape. also need replace waitKeys() getKeys().Put code code10.py.","code":""},{"path":"memory-game.html","id":"psychopy-mouse","chapter":"10 Memory game","heading":"10.22 Detecting a mouse click","text":"game, player click individual cards turn . can use mouse PsychoPy, must create via mouse = event.Mouse(visible=True, win=win) call, win PsychoPy window already created. code appear immediately line create window .Now, can check whether left button pressed using mouse.getPressed() method. returns three-item tuple True/False values indicating whether three buttons currently pressed. Use main loop, player presses left button (index returned list 0), change \"side\" first card (, card index 0 list) \"front\". assumes initialized card \"back\" shown, course. run code click anywhere, flip first card.Put mouse-click-processing code drawing cards. moment, makes difference useful later , allow us draw latest state card (.e., right flipped player).Put code code11.py.","code":""},{"path":"memory-game.html","id":"position-to-index","chapter":"10 Memory game","heading":"10.23 Position to index","text":"Currently, first card flipped click anywhere. card flip card player clicked . need implement function index_from_position inverse position_from_index. take argument pos, tuple (<x>, <y>) values (mouse position within window), return integer card index. float values (decimal points) pos argument (ranges -1 1 norm units) default values compute also float. However, index must integer, need wrap int() function call, returning .Going backwards — position index — (IMHO) easier. First, need think can convert x coordinate (goes -1 1) column index (goes 0 3) given 4 columns (draw sketch paper make figuring math simpler). Similarly, translate y (-1 1) row index given two rows. know row column index, can compute index , keeping mind four card row. position_from_index, think easier first play formulas Jupyter Notebook, turning code function, documenting , putting utilities.py.Put index_from_position utilities.py.","code":""},{"path":"memory-game.html","id":"flip-a-selected-card-on-click","chapter":"10 Memory game","heading":"10.24 Flip a selected card on click","text":"Now function returns index position (don’t forget import ), can flip card player clicked . , need extend card-flipping code inside left-mouse button pressed code. Get position mouse within window calling mouse.getPos(). return pair (x, y) values, can pass index_from_position() function. , turn return index card player click . Change \"side\" card index \"front\". Test code turning different cards , make sure card clicked gets turned. usual reminder, hesitate put breakpoint inside -statement check actual mouse position values translated index, things work.Put code code12.py.","code":""},{"path":"memory-game.html","id":"keeping-track-of-open-cards","chapter":"10 Memory game","heading":"10.25 Keeping track of open cards","text":"actual game, player allowed flip two cards time. match, removed. , flipped backs . means need keep track many cards face . can always figure list comprehension scanning cards \"side\" \"face\". , mutable nature dictionaries presents us simpler solution. create new list (let us call face_up) add cards . Dictionaries mutable, reference dictionary object present lists (card dictionary two stickers , one cards list, one face_up list). way know cards face (list) know many (length face_up list).However, need careful add card (mess “many cards face ” number). several ways . Assuming icard index card, computed via position_to_index() mouse position, can simply check whether card \"side\" \"front\". Alternatively, can check whether card already face_up list. Either way tell whether card face . , set \"side\" \"front\" add face_up list.Implement code, open cards. , use breakpoint pause program check face_up list (set) contains exactly (many) cards. face-checks work. Put breakpoint step code see happens.Put code code13.py.","code":""},{"path":"memory-game.html","id":"opening-only-two-cards","chapter":"10 Memory game","heading":"10.26 Opening only two cards","text":"Now need check whether player opened exactly two cards. code, mouse checks drawing code. means cards drawn face immediately click. drawn, check length face_up, equal 2:pause program ~0.5 s63 via wait, player can see cards.flip cards back (.e., set \"side\" \"back\").remove face_up list (see .clear() method).Put code code14.py.","code":""},{"path":"memory-game.html","id":"taking-a-matching-pair-off-the-table","chapter":"10 Memory game","heading":"10.27 Taking a matching pair off the table","text":"code turns cards back even found matching pair need take table. two cards face_up list, need check whether chicken , .e., filenames . , set \"show\" field False. , set \"side\" \"back\" (code already ). Either way, still need pause program allow player see clear face_up list/set (either table face , definitely face ).also need modify code handle \"show\" field correctly. First, modify drawing code draw cards shown. Second, handling mouse click, need check card face shown (otherwise can “open” invisible cards).Put code code15.py.","code":""},{"path":"memory-game.html","id":"game-over-once-all-the-cards-are-off-the-table","chapter":"10 Memory game","heading":"10.28 Game over once all the cards are off the table","text":"code works correctly, can take card table, gray screen remains. However, point game finishes congratulates success. Write function remaining_cards take list cards (.e., cards list) return many cards still shown (\"show\" field True). definitely need implementation can different. use extra counter variable initialize 0 increment one (see += shortcut). Alternatively, can use list comprehensions filter cards shown return length list (single line solution). Implement function utilities.py exit loop setting game_state \"victory\". loop, can check game_state variable player victorious, show congratulatory message (TextStim, note don’t even need create variable , can create object call .draw() , .e., visual.TextStim(...).draw()) wait key press close window.Put code code16.py.","code":""},{"path":"memory-game.html","id":"do-it-fast","chapter":"10 Memory game","heading":"10.29 Do it fast!","text":"different ways can quantify speed game. look number pairs player open clearing (fewer, better). , measure fast player seconds. use combination two measures. Let us use second option — total time taken — opportunity learn using PsychoPy clocks.two classes primarily interested Clock CountdownTimer. difference two Clock starts (resets ) 0 start counting elapsed time, getTime() method return positive values. contrast, CountdownTimer start (resets ) value initialized starts counting remaining time . Importantly, stop reaches 0, eventually end negative remaining time. Thus, Clock check whether elapsed time longer predefined value, whereas CountdownTimer start predefined value check remaining time zero. Note guaranteed remaining time exactly zero. anything, extremely unlikely ever happen, never test exact equality zero64!, interested elapsed time, Clock obvious choice. Create clock game loop use elapsed time congratulatory message.Put code code17.py.","code":""},{"path":"memory-game.html","id":"how-can-you-improve-it","chapter":"10 Memory game","heading":"10.30 How can you improve it?","text":"Excellent game can always improve : highscore, multiple round, etc. sky limit!","code":""},{"path":"christmas-special.html","id":"christmas-special","chapter":"11 Christmas special","heading":"11 Christmas special","text":"Today going program Christmas-special. However, still opportunity learn something new. learn zipping lists start offloading settings separate file. Christmas tree looks :","code":""},{"path":"christmas-special.html","id":"chapter-concepts-6","chapter":"11 Christmas special","heading":"11.1 Chapter concepts","text":"Building Christmas spiritZipping listsLoading setting JSON YAML file.","code":""},{"path":"christmas-special.html","id":"christmas-tree","chapter":"11 Christmas special","heading":"11.2 Christmas tree","text":"Let us start Christmas decoration Christmas tree. can download one ’ve found65 find image like. Create basic PsychoPy code create window (using Circle later, think suitable units), ImageStim tree, draw wait key press.Put code code01.py.","code":""},{"path":"christmas-special.html","id":"christmas-tree-decoration","chapter":"11 Christmas special","heading":"11.3 Christmas tree decoration","text":"decoration, let us use Circle objects various sizes color. create one separately custom hard-coded values, let us instead create three constants lists equal length describe, respectively position ball (BALL_POS good name, entry tuple (x, y)), size (BALL_SIZE), color (BALL_COLOR, stick \"red\", \"blue\", \"yellow\", limited selection specific colors important later animate ).Create list balls iterating three lists. two choices, can either use index variable, building index via range() using len() one lists (length). let’s use cool trick iterating zip() lists. zip() gives tuple combining one element list can unpack fly example (note loop variables receive values order used lists).can zip many lists want. , obviously, want three. Decide whether want create balls empty list append newly created Circle loop use list comprehension. forget draw balls think draw first: tree balls. Experiment position sizes makes look just perfect.Put code code02.py.","code":"numbers = [1, 2, 3]\nletters = [\"A\", \"B\", \"C\"]\nfor  a_number, a_letter in  zip(numbers, letters):\n  print(\"%d: %s\"%(a_number, a_letter))\n#> 1: A\n#> 2: B\n#> 3: C"},{"path":"christmas-special.html","id":"twinkle-twinkle-little-star","chapter":"11 Christmas special","heading":"11.4 Twinkle, twinkle, little star","text":"Now let us make Christmas balls twinkle, video. idea one color “active” time. balls color “” balls color “” (white gray, color liking). Now display becomes dynamic, need game loop opportunity exit program pressing escape., need define list colors (“red”, “blue”, “yellow”) can cycle variable hold index currently active color (’ve called icolor). Every X seconds (every 0.5 seconds, define constant, e.g., TWINKLE_DURATION), increment index, next color list becomes active. Note --range problem: initialize icolor 0 increment 1 three times, index already large (3, length colors list 3, maximal index 2). can either use check can use remainder operator % (think remainder divide positive value length colors list).need update whether balls “” “”, need loop balls colors original BALLS_COLOR list (use string color name, gets translated RGB value, compare directly). , can use zip() loop simultaneously Christmas balls color. color matches active one, fillColor color. , fillColor “neutral” / “” color (white? gray?).keep track time, need timer variable, use either Clock CountdownTimer. TWINKLE_DURATION elapsed, update active color, balls, forget reset timer.Put code code03.py.","code":""},{"path":"christmas-special.html","id":"lets-make-some-noise","chapter":"11 Christmas special","heading":"11.5 Let’s make some noise!","text":"Let add Christmas music! Download Deck Halls version Kevin MacLeod66. , use sound module PsychoPy library generates sounds fly also play audio files various format wav ogg (mp3!). Unfortunately, sound surprisingly tricky, many libraries might used PsychoPy (2023 PsychoPy lists four backends might use), things sometimes break. Thus, music play , ask try set sound libraries .Using sound simple. First, need import Sound class suggested manual:, need new object Sound class supplying file name first parameter (called variable song). Right start loop, .play() sound. Note, want play sound , need “rewind” explicitly calling .stop() method. reason, sound stops end gets “rewind” back, try play notices already end stops without playing anything.Put code code04.py.","code":"from psychopy.sound import Sound"},{"path":"christmas-special.html","id":"settings-files","chapter":"11 Christmas special","heading":"11.6 Settings file formats","text":"far, either hard-coded specific values defined constants (better two approaches). However, means want run game different settings, need modify program . want two versions game (two experimental conditions), need two programs problems maintaining virtually identical code several places .better approach separate files settings, can keep code constant alter specific parameters specifying settings file program use. helpful even plan single set setting separates code constants, puts latter one place makes easier edit check . multiple formats settings files: XML, INI, JSON, YAML, etc. format choice today JSON. However, question taste. Personally, like YAML subjective reasons (fewer curly brackets quotation marks), free use format like. see, makes little difference actual Python code.","code":""},{"path":"christmas-special.html","id":"xml","chapter":"11 Christmas special","heading":"11.6.1 XML","text":"XML — Extensible Markup Language — looks similar HTML (HyperText Markup Language). Experiments designed using PsychoPy Builder interface stored using XML files .psyexp extension. settings file Christmas programin XML look like thisThe advantage XML flexible yet structured can use native Python interface work . However, XML easy humans read, overpowered purposes simple set unique constants power means using fairly cumbersome (use \\ split single line many lines).","code":"<Balls>\n  <Ball>\n    <Position>\n      <x>0.1<\/x>\n      <y>0.2<\/y>\n    <\/Position>\n    <Size>0.01<\/Size>\n    <Color>red<\/Color>\n  <\/Ball>\n  <Ball>\n    <Position>\n      <x>0.2<\/x>\n      <y>0.1<\/y>\n    <\/Position>\n    <Size>0.02<\/Size>\n    <Color>yellow<\/Color>\n  <\/Ball>\n  ...\n<\/Balls>\n<Timing>\n  <Twinkle duration>0.5<\/Twinkle duration>\n<\/Timing>from xml.dom import minidom\nsettings = minidom.parse('settings.xml')\n# this will give you string \"0.4\"\nsize = settings.getElementsByTagName(\"Balls\")[0]. \\\n                getElementsByTagName(\"Ball\")[0]. \\\n                getElementsByTagName(\"Size\")[0].firstChild.data"},{"path":"christmas-special.html","id":"ini","chapter":"11 Christmas special","heading":"11.6.2 INI","text":"format structure similar found MS Windows INI files.can see easier read Python special configparser library work . object get , effectively, dictionary additional methods attributes. However ConfigParser try guess type data, values stored strings job convert whatever type need, e.g., integer, list, etc.","code":"[Balls]\n    x = 0.1, 0.2\n    y = 0.2, 0.1\n    size = 0.01, 0.02\n    color = red, yellow\n[Timing]\n    TwinkleDuration = 0.5import configparser\nsettings = configparser.ConfigParser()\nsettings.read('settings.ini')\nsettings['Balls']['size'] # this will give you a string '0.01, 0.02'"},{"path":"christmas-special.html","id":"json","chapter":"11 Christmas special","heading":"11.6.3 JSON","text":"JSON (JavaScript Object Notation) popular format serialize data web applications use exchange data server client.can parse string JSON format dictionary Python using json module. advantage INI files JSON explicitly specifies data type (.e., strings quotation marks), converts automatically. Note unlike configparse, json module work files directly, need open manually (ignore magic moment, learn detail talk context managers).","code":"{\n  \"Balls\": {\n    \"position\": [[0.1, 0.2], [0.2, 0.1]],\n    \"size\": [0.01, 0.02],\n    \"color\": [\"red\", \"yellow\"]\n  },\n  \"Timing\": {\n    \"Twinkle duration\" : 0.5\n  }\n}import json\nwith open('settings.json') as json_file:\n    settings = json.load(json_file)\n    \nsettings[\"Balls\"][\"size\"] # this will give a list [0.01, 0.02]"},{"path":"christmas-special.html","id":"yaml","chapter":"11 Christmas special","heading":"11.6.4 YAML","text":"YAML (YAML Ain’t Markup Language, rhymes camel) similar JSON config files human-readable. fewer special symbols curly brackets , Python, must watch indentations determine hierarchy.need install third-party library pyyaml work YAML files. get dictionary JSON","code":"Balls:\n  position: [[0.1, 0.2], [0.2, 0.1]]\n  size: [0.01, 0.02]\n  color: [\"red\", \"yellow\"]\nTiming:\n  Twinkle duration : 0.5import yaml\nwith open(\"settings.yaml\") as yaml_stream:\n    settings = yaml.safe_load(yaml_stream)\n    \nsettings[\"Balls\"][\"size\"] # this will give a list [0.01, 0.02]"},{"path":"christmas-special.html","id":"using-settings","chapter":"11 Christmas special","heading":"11.7 Using settings","text":"Look code04.py identify constants hard-coded values put settings file. E.g., definitely constants describes Christmas balls twinkle duration , possibly, also size window, name Christmas tree song files, etc. general, put every value settings even used (size window) know constants settings file. way single, nicely organized place check need search code figure specific value .transferred constants settings file (use either JSON YAML), add code loads beginning use settings dictionary place constants.Put code code05.py.","code":""},{"path":"christmas-special.html","id":"merry-christmas-and-a-happy-new-year","chapter":"11 Christmas special","heading":"11.8 Merry Christmas and a Happy New Year!","text":"","code":""},{"path":"flappy-bird.html","id":"flappy-bird","chapter":"12 Flappy Bird","heading":"12 Flappy Bird","text":"Today stat developing Flappy Bird game. control bird must fly openings obstacles action “flap wings” order counteract effect gravity. game look like end.","code":""},{"path":"flappy-bird.html","id":"chapter-concepts-7","chapter":"12 Flappy Bird","heading":"12.1 Chapter concepts","text":"Object-oriented programmingComputed properties objects: @propertyWe use game opportunity learn object-oriented programming. already know use classes, now get create see makes life easier.","code":""},{"path":"flappy-bird.html","id":"object-oriented-programming","chapter":"12 Flappy Bird","heading":"12.2 Object-oriented programming","text":"core idea name: Instead variables/data functions separately, combine object attributes/properties (variables) methods (functions). approach uses natural tendency perceive world collection interacting objects several advantages discuss .","code":""},{"path":"flappy-bird.html","id":"classes-and-objects-instances-of-classes","chapter":"12 Flappy Bird","heading":"12.2.1 Classes and objects (instances of classes)","text":"continue, need make important distinction classes objects67. class “blue print” describes properties behavior (methods) objects class. “blue print” used create instance class, called object. example, Homo sapiens class describes species certain properties, height, can certain things, running. However, Homo sapiens class concept height specific height . E.g., ask “height Homo sapiens?” average (mean, median, etc.) height individuals class. Similarly, say “Run, Homo sapiens! Run!” abstract concepts trouble real actions like . Instead, Alexander Pastukhov instance Homo sapiens class specific (average) height specific (average) ability run. instances Homo sapiens (people) different height different (typically better) ability run. Thus, class describes kind properties methods objects . means whenever meet Homo sapien, sure height. However, individual objects different values various properties calling methods (asking perform certain actions) may result different outcomes.Another, applied, example use ImageStim class create multiple instances front side card Memory game. , class defines properties (image, pos, size, etc.) methods (e.g., method draw()) individual objects . created objects serve front side cards. set different values properties (image, pos) ensured call method draw(), card drawn location image.","code":""},{"path":"flappy-bird.html","id":"encapsulation","chapter":"12 Flappy Bird","heading":"12.2.2 Encapsulation","text":"Putting data (properties) behavior (methods) inside class simplifies programming ensuring relevant information can found definition. Thus, single place hold everything defines object’s behavior. Contrast approach previous seminars cards dictionaries separate functions created . Today, see encapsulating everything classes turns mess simpler easier--understand code.","code":""},{"path":"flappy-bird.html","id":"inheritance-generalization","chapter":"12 Flappy Bird","heading":"12.2.3 Inheritance / Generalization","text":"object-oriented programming, class can derived ancestor class thus inherit properties methods. Moreover, several classes can derived single ancestor producing mix unique shared functionality. means instead rewriting code class, can define common code ancestor class focus differences additional methods properties descendants.Using Homo sapiens example . Humans, chimpanzees gorillas different species share common ancestor. Hence, different many respect, yet, think us “apes” common properties binocular trichromatic vision. words, interested color vision, care specific species looking , apes (roughly) respect. , can move evolution tree think us “mammals” , , common properties behavior, thermoregulation lactation. , interested whether animal thermoregulation, knowing mammal enough.Similarly, PsychoPy various visual stimuli used (ImageStim, TextStim, Rect) properties (e.g., pos, size, etc.) methods (notably, draw()). descendants common ancestor BaseVisualStim defines common properties methods68. means can assume visual stimulus (long descends BaseVisualStim) size, pos, ori can drawn. , turn, means can list various PsychoPy visual stimuli move draw single loop without thinking specific visual stimulus moving drawing. Also note assume properties sound stimuli descendants BaseVisualStim _SoundBase class.ways achieving common behavior (generalization) Python without orderly inheritance, “duck typing”69 mixins topic another chapter.","code":""},{"path":"flappy-bird.html","id":"polymorphism","chapter":"12 Flappy Bird","heading":"12.2.4 Polymorphism","text":"’ve learned previous section, inheritance allows different descendants share common properties behavior, certain cases can view equivalent ancestor. E.g., visual stimulus (descendant BaseVisualStim class) can drawn, just call draw() method. However, clear different stimuli implement drawing differently, Rect stimulus looks different ImageStim TextStim. called “polymorphism” idea keep common interface (draw() call) abstracting away actual implementation. allows think want object (object), instead thinking exactly implemented.","code":""},{"path":"flappy-bird.html","id":"a-minimal-class-example","chapter":"12 Flappy Bird","heading":"12.2.5 A minimal class example","text":"Enough theory, let us see classes implemented Python. simple class nothing constructor __init__() method, called whenever new object (class instance) created, single attribute / property total.Let’s go line line. First line class Accumulator: shows declaration class whose name Accumulator. Note first letter capitalized. required per se, Python police won’t knocking door write lower upper case. However, general recommendation class names written using UpperCaseCamelCase whereas object (instances class) names written using lower_case_snake_case. makes distinguishing classes objects (instances classes) easier, follow convention.definition class remaining indented lines. functions loops, indentation defines inside outside class. method defined def __init__(self):. special method70 called object (instance class) created. allows initialize object based parameters passed function (). call function directly, rather called whenever object created, e.g., number_sum = Accumulator() (last line). Also, return value explicitly via return. Instead, self (first parameter, ) returned automatically.class methods (apart special cases currently concern ) must one special first parameter object . convention called self71. passed method automatically, whenever write square.draw() (explicit parameters written function call), actual method still receives one parameter reference square variable whose method called. Inside method, use variable refer object .Let us go back constructor __init()__ see can use self. , add new persistent attribute/property object assign value : self.total = 0. persistent, even though created inside method, mutable object passed reference , therefore, assigned object . Now can use property either inside self.total outside number_sum.total. can think properties similar field/value pairs dictionary used Memory game syntax: object.property versus dictonary[\"field\"]72. Technically, can create new properties method even outside (e.g., nothing prevents writing number_sum.color = \"red\"). However, makes understanding code much harder, general recommendation create properties inside constructor __init__() method, even means assigning None them73.","code":"class Accumulator:\n    \"\"\"\n    Simple class that accumulates (sums up) values.\n\n    Properties\n    ----------\n    total : float\n        Total accumulated value\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Constructor, initializes the total value to zero.\n        \"\"\"\n        self.total = 0\n        \n# here we create an object number_sum, which is an instance of class Accumulator.\nnumber_sum = Accumulator()\nprint(number_sum.total)"},{"path":"flappy-bird.html","id":"add-method","chapter":"12 Flappy Bird","heading":"12.2.6 add method","text":"Let us add method adds 1 total property.first special argument self object simply add 1 total property. , remember self passed automatically whenever call method, meaning actual call looks like number_sum.add().Create Jupyter notebook (need submit part assignment) copy-paste code Accumulator class, including .add() method. Create two objects, call counter1 counter2. Call .add() method twice counter2 thrice counter1 (bonus: using loop). value .total property object? Check printing .Copy-paste test Accumulator class code Jupiter notebook.","code":"class Accumulator:\n    ... # I am skipping all previous code here\n    \n    def add(self):\n        \"\"\"\n        Add 1 to total\n        \"\"\"\n        self.total += 1"},{"path":"flappy-bird.html","id":"flexible-accumulator-with-a-subtract-method","chapter":"12 Flappy Bird","heading":"12.2.7 Flexible accumulator with a subtract method","text":"Now lets us create new class descendant Accumulator. call FlexibleAccumulator allow also subtract total count. specify ancestors (one!) round brackets class nameNow new class descendant Accumulator , far, perfect copy . Add subtract method class. subtract 1 .total property (don’t forget document !). Check works. Create one instance Accumulator another one FlexibleAccumulator class check can call add() subtract() latter.Add subtract method FlexibleAccumulator\nclass Jupiter notebook. Add testing.","code":"class FlexibleAccumulator(Accumulator):\n    pass # You must have at least one non-empty line, and pass means \"do nothing\""},{"path":"flappy-bird.html","id":"method-arguments","chapter":"12 Flappy Bird","heading":"12.3 Method arguments","text":"Now, create new class SuperFlexibleAccumulator able add() subtract() arbitrary value. Think class inherit . Redefine .add() .subtract() method new class adding value argument method add/subtract value rather 1. Note now two arguments method (self, value) call need pass latter (, self passed automatically). Don’t forget document value argument (need document self meaning fixed).Create SuperFlexibleAccumulator class definesuper flexible add subtract methodsthat value parameter ( Jupiter notebook).Test !","code":""},{"path":"flappy-bird.html","id":"constructor-arguments","chapter":"12 Flappy Bird","heading":"12.3.1 Constructor arguments","text":"Although constructor __init(...)__ special, still method. Thus, can pass arguments just like methods. pass arguments create object, case, put inside bracket counter = SuperFlexibleAccumulator(...).Modify code pass initial value total set , instead zero.Add initial_value parameter constructor SuperFlexibleAccumulator class Jupiter notebook. Test !","code":""},{"path":"flappy-bird.html","id":"calling-methods-from-other-methods","chapter":"12 Flappy Bird","heading":"12.3.2 Calling methods from other methods","text":"can call function object’s method point time, , logically, can use methods inside methods. Let’s modify code, realizing subtracting value like adding negative value. Modify code, .subtract() negates value passing .add() actual processing. Thus, total modified inside add() method.Modify subtract() method SuperFlexibleAccumulatorto utilize add() Jupiter notebook.Test !","code":""},{"path":"flappy-bird.html","id":"local-variables","chapter":"12 Flappy Bird","heading":"12.3.3 Local variables","text":"Just like normal functions, methods can local variables. local (visible accessible within method) persistent (values survive calls). Conceptually, separate variables need persistent (retain value whole time object exists) attributes/properties temporary variables need computation local method variables. value property .total example:case?","code":"class Accumulator:\n    def __init__(self, initial):\n        temp = initial * 2\n        self.total = initial\n        \ncounter = Accumulator(1)class Accumulator:\n    def __init__(self, initial):\n        temp = initial * 2\n        self.total = temp\n        \ncounter = Accumulator(1)"},{"path":"flappy-bird.html","id":"flappy-bird-the-humble-beginnings","chapter":"12 Flappy Bird","heading":"12.4 Flappy Bird: the humble beginnings","text":"start basic scaffolding program. Download bird image74 put folder store code. Create basic code uses settings file defines minimal setting window (size) bird (image file). Organize hierarchically, follows, help us keep settings different classes organized.Create window using specified size ImageStim using filename settings file. Add basic game loop repeatedly draw bird (appear right center screen) check key press (escape exit game).Put code code01.py.","code":"{\n  \"Bird\": {\n    \"Image\" : \"Blue-Bird.png\"\n  },\n  \"Window\": {\n    \"Size\": [800, 600]\n  }\n}"},{"path":"flappy-bird.html","id":"flappy-bird-class","chapter":"12 Flappy Bird","heading":"12.5 Flappy Bird class","text":"flappy bird , effectively, image like additional behaviors, like, automatically falling due gravity, flying due flapping wings, etc. several way can . can keep image ImageStim write additional functions handle (way previously). create new class FlappyBird ImageStim attribute. , utilize power inheritance build FlappyBird class top ImageStim. means less work us, path follow.Create new file contain FlappyBird class. look like:code , defined FlappyBird descendant ImageStim75. make latter work, need initialize properly calling constructor. super().__init__(...) call : Calls constructor ancestor class (super() refers immediate ancestor) enable magic want reuse. Recall ImageStim needs least two parameters: PsychoPy window stimulus belong image (filename case). , assume create bird object (call constructor), pass two parameters (, self comes “free”, pass explicitly assume first argument get): [window]((https://psychopy.org/api/visual/window.html#psychopy.visual.Window) created plus dictionary settings bird (settings, practical pass whole dictionary instead passing one parameter time).Copy paste code (plus add appropriate imports comments) use FlappyBird class instead ImageStim. Note FlappyBird inherits functionality ImageStim, , apart create , can use exactly way. Meaning, need modify anything else code (told , save us time effort!).Put FlappyBird class code separate file.\nUse instead ImageStim code02.py.","code":"\"\"\"Your comment on what this file contains.\n\"\"\"\n# import libraries, which ones do you need?\n\nclass FlappyBird(visual.image.ImageStim):\n  \"\"\"\n  FlappyBird class based on ImageStim\n  \"\"\"\n  def __init__(self, win, settings):\n    \"\"\"\n    Constructor.\n    \"\"\"\n    super().__init__(win, image=settings[\"Image\"])"},{"path":"flappy-bird.html","id":"a-properly-sized-bird","chapter":"12 Flappy Bird","heading":"12.6 A properly-sized bird","text":"bird cute way large. Add new setting (suggest calling Size setting 0.1) use inside constructor adding size=... super().__init__ call. need change anything main code?Add bird size setting.\nUse FlappyBird class constructor.","code":""},{"path":"flappy-bird.html","id":"flappy-bird-is-falling-down-my-dear-lady","chapter":"12 Flappy Bird","heading":"12.7 Flappy Bird is falling down (my dear lady)","text":"bird flies, needs learn fall . Falling just change bird’s vertical position based bird’s vertical speed. already property (horizontal ) vertical position: self.pos, tuple (x, y) position center image. need additional new attribute encode bird’s vertical speed. Create constructor (forgot , take look create total attribute Accumulator class) call vspeed. Also, create new setting (call \"Initial vertical speed\") set -0.01, use setting constructor initialize vspeed.Now also need method update bird’s position based (current) speed. Create method constructor (need parameters beyond compulsory self?). simply compute \\(y_{new} = y + vspeed\\) assign \\(y_{new}\\) back pos attribute (note assign y coordinate, pass tuple (x, y) reusing original x value pos). forget document new method!Now need call update() frame drawing bird. make bird fall screen! (Experiment \"Initial vertical speed\" setting make fall faster slower even upwards!)Update FlappyBird class.\nUse update method code03.py.","code":""},{"path":"flappy-bird.html","id":"timing-the-fall","chapter":"12 Flappy Bird","heading":"12.8 Timing the fall","text":"Currently, speed bird’s fall measured norm units per frame. works convenient units think . Plus, relies PsychoPy (rest code) ensure time individual frames exactly . mostly case occasionally slow bird big problem game. However, might problem actual experiment requires precise timing movement. Thus, need think vertical speed units norm units per second measure time calls update() method .Create new Clock attribute count time elapsed since last reset (call frame_timer). Modify update() method compute \\(y_{new} = y + vspeed * T_{elapsed}\\), \\(T_{elapsed}\\) time elapsed frames. forget reset timer! (happen forget?)Now set \"Initial vertical speed\" reasonable value (e.g., 0.5) check time takes bird fall screen looks reasonable (0.5 norm units / second screen two seconds).Update FlappyBird class timer.","code":""},{"path":"flappy-bird.html","id":"it-is-all-newtons-fault","chapter":"12 Flappy Bird","heading":"12.9 It is all Newton’s fault","text":"Now let us add gravity, speed falling constantly changing. Create new setting call \"Gravity\". Set -0.5 (units norm units per second squared) experiment different values later . Acceleration due gravity changes vertical speed just like speed changes vertical position76. Update update method change speed based acceleration given elapsed time. need update first, speed location? Also, think store acceleration: settings parameter exists constructor. can either store new attribute store settings attribute later use.Update FlappyBird class acceleration due gravity.","code":""},{"path":"flappy-bird.html","id":"flap-bird-flap","chapter":"12 Flappy Bird","heading":"12.10 Flap bird, flap!","text":"Let us add ability bird “flap” order stay air. First, create new setting Flap speed set 0.4 (usual, feel free experiment!). Add new method .flap(self) inside simply set vspeed Flap speed. Thus, single flap sets bird flying Flap speed speed , however, constantly reduced acceleration due Gravity bird eventually start falling .main code, check \"escape\" \"space\" keys. latter pressed, call .flap() method bird. Check can keep screen timing space button presses can make fly upwards screen.Add flap method FlappyBird class.\nUse code04.py whenever player presses space.","code":""},{"path":"flappy-bird.html","id":"stay-off-the-ground","chapter":"12 Flappy Bird","heading":"12.11 Stay off the ground","text":"game, player can lose either hit obstacle (yet) bird drops ground level, .e., bottom edge window. Create new method is_airborne() return True y position bird -1 (note, need explicit , need write True False anywhere, think can done without ).main loop add check bird.is_airborne() condition continues player presses \"escape\" bird hits ground.Add is_airborne method FlappyBird class.\nUse code05.py additional conditionfor game loop.","code":""},{"path":"flappy-bird.html","id":"computed-attribute-property","chapter":"12 Flappy Bird","heading":"12.12 Computed attribute @property","text":"explained “Object-oriented programming” section , properties describe state object, whereas methods describe object can object. is_airborne() method breaks logic: describes state bird call (use ) method. computed property inferred properties object. case, infer property is_airborne y. , course, make is_airborne real property defining constructor updating inside update() method. However, instead use cool feature called decorators turn method read-property. thing need add @property decorator right def is_airborne(self): line drop brackets using main loop (just bird.is_airborne instead bird.is_airborne()).@property tells Python method right (must!) return value outside world see method property. can use make properties read-, (easily) changed outside create properties computed --fly example.Note difference much practical implementation (changes made code minimal) conceptual nature: Object’s states properties methods. small example may look like overkill moderately complex project even small conceptual blurring lines make harder understand code.Turn is_airborne property.\nUse property code06.py.","code":""},{"path":"flappy-bird.html","id":"an-opening-in-an-obstacle","chapter":"12 Flappy Bird","heading":"12.13 An opening in an obstacle","text":"aim game bird fly avoiding obstacles. obstacle consist two rectangle, one protrudes another one . opening gives bird opportunity fly . let us begin writing code (Jupyter notebook) generate random opening, characterized y_bottom y_top based four parameters:lower_margin : lowest possible position bottom opening relative bottom screen, .e., y_bottom closer -1 .upper_margin : higher possible position top opening relative top screen, .e., y_top closer 1 .min_size : minimal size opening, .e., minimal distance y_top y_bottom.max_size : maximal size opening, .e., maximal distance y_top y_bottom.Write code assume certain values parameter (e.g., lower_margin = 0.2, upper_margin = 0.2, min_size = 0.2, max_size = 0.4) generates random pair (y_bottom, y_top) satisfies conditions.Write random opening code Jupiter notebook.","code":""},{"path":"flappy-bird.html","id":"an-obstacle","chapter":"12 Flappy Bird","heading":"12.14 An obstacle","text":"Now let us create Obstacle class (put separate file). consist two rectangles, one protruding top one bottom, random opening . moment need six settings describe Obstacle: four parameters define random opening plus width rectangles color. Describe separate group settings files (probably \"Obstacles\") pass constructor Obstacle class.constructor, generate random opening (code already) create two rectangles width wide, one going top till y_top, another one bottom till y_bottom. Place horizontally right edge window see . Decide store two rectangles, can put two different attributes (e.g., upper_rect lower_rect) list. suggest latter approach, simplify future code. Think parameters need __init__() constructor function.also need draw() method simply draws rectangles. Implement class separate file, create draw single obstacle main code check looks right.Create Obstacle class separate file.\nUse code07.py.","code":""},{"path":"flappy-bird.html","id":"a-moving-obstacle","chapter":"12 Flappy Bird","heading":"12.15 A moving obstacle","text":"Conceptually, bird fly towards obstacle instead induce perception motion moving obstacles right left. Define new speed setting Obstacle class, norm units per second create update method change horizontal position rectangles based amount time passed calls. similar updated bird’s position based speed, follow logic think additional attributes require store use relevant information.Call update() place update bird’s location main loop check obstacle moving right left.Add update method Obstacle class.\nUse code08.py.","code":""},{"path":"flappy-bird.html","id":"hitting-the-wall","chapter":"12 Flappy Bird","heading":"12.16 Hitting the wall","text":"moment, bird flying obstacle like . ! Luckily us, PsychoPy makes implementing easy, can check whether two stimuli overlap using overlaps() method one (second stimulus passed argument).Thus, check whether bird hit wall, just need create method (let us call check_if_hit) Obstacle class take bird object check whether overlaps() one rectangles. Remember, FlappyBird descendant ImageStim, can pass overlaps() method directly (advantage using inheritance!)main game loop, add check bird hitting obstacle main condition (now three things check ). Test code flying bird wall. Also, flying bird opening. Note settings make tricky, modify make opening larger.Add check_if_hit method Obstacle class.\nUse code09.py.","code":""},{"path":"flappy-bird.html","id":"an-obstacle-manager","chapter":"12 Flappy Bird","heading":"12.17 An obstacle manager","text":"game single obstacle fun add , need class manage us. Let us call ObstaclesManager. moment, simply wrap functionality implemented main script. constructor, create list attribute obstacle objects add first one, also implement methods draw(), update(), check_if_hit() draws, updates, checks overlap bird obstacles list. moment still just one list implementing things loop means easier add . Create class use main script.actual changes game plays, just code refactoring. However, helps us hide management part main script (making easier understand) , everything correctly, code “just work” replace Obstacle ObstaclesManager object.Create ObstaclesManager class.\nUse code10.py.","code":""},{"path":"flappy-bird.html","id":"loads-of-obstacles","chapter":"12 Flappy Bird","heading":"12.18 Loads of obstacles","text":"Now ready add obstacles. need update update method ObstaclesManager adds new obstacle list random time interval. Define new setting Spawn time, list two values define minimal maximal time spawns, create CountdownTimer (Clock, remember differ whether time subtracted added) attributed. Whenever timer , add new obstacle list, generate new delay, set timer . Note now need settings Window update required creating new obstacle. Think can store later use constructor.need change anything main script? Check obstacles appear time!Update update ObstaclesManager class.","code":""},{"path":"flappy-bird.html","id":"removing-redundant-obstacles","chapter":"12 Flappy Bird","heading":"12.19 Removing redundant obstacles","text":"obstacle past left edge screen (x-axis position less -1) need remove list. Otherwise, waste lot time memory keeping track drawing obstacles neither relevant, visible. Think implement reading .First, need compute horizontal position obstacle. can deduce pos attribute one rectangles implement use attribute (pos Obstacle) attribute (obstacles ObstaclesManager) directly. However, working attributes attributes makes code harder read maintain. Instead, add new computed property x Obstacle class return single number (horizontal position) using @property decorator used bird’s is_airborne dynamic attribute.Update update method ObstaclesManager check position first obstacle list. less -1, simply pop list. first one? obstacle list added later , therefore, must right. first one? assume reasonable motion speed reasonable spawn delay, unlikely one obstacles reaches left edge time.Note safety reasons, must first check obstacles attribute empty! Hint, used conditional statement directly, empty list evaluates False. Debug code make sure obstacles indeed removed. can either use different cut-point (e.g., -0.25) see easier put break point line pops redundant obstacle (better still, !)Update update ObstaclesManager class.","code":""},{"path":"flappy-bird.html","id":"keeping-the-score","chapter":"12 Flappy Bird","heading":"12.20 Keeping the score","text":"hard brag bird-flying skills, many obstacles fly . Let us add score! First, create TextStim (call score_text) put somewhere one screen, e.g., top-left top-right corner. Initialize text \"0\". Draw main loop. Make sure works continue.keep score, need count number obstacles bird clears every frame add total score. removal redundant obstacles, either zero one obstacle crossed middle screen. case, leftmost check leftmost among yet cross mid-line. different way can approach , think approach reading . came different plan, means – implement !way introduce new attribute scored = False method score() Obstacle class. score() method, object crossed 0 line scored, marked scored method returns 1. Otherwise, object either already scored cross mid-line yet, returns 0. Next, added score() method ObstaclesManager simply computes total score (sum ) scores obstacles list. main script score added score variable , turn, used update score_text.Update code anduse code11.py.","code":""},{"path":"flappy-bird.html","id":"a-foundation","chapter":"12 Flappy Bird","heading":"12.21 A foundation","text":"just foundation game, feel free add . Animated bird? Difficulty levels? Different kinds obstacles? High-score table?","code":""},{"path":"seminar-02-06.html","id":"seminar-02-06","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13 Guitar Hero: staircase and iterator functions","text":"","code":""},{"path":"seminar-02-06.html","id":"chapter-concepts-8","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.1 Chapter concepts","text":"StaircaseIterator / Generator functionsSpecial class methods","code":""},{"path":"seminar-02-06.html","id":"getting-the-difficulty-just-right-staircase-procedure","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.2 Getting the difficulty just right: Staircase procedure","text":"game design, one hardest things get right difficulty. Make game easy boring. Make hard hardcore fans play achievement. Thus, like make game hard enough push player limit much harder , frustrate . One way solve conundrum create different preset difficulty levels. alternative way make game adapts difficulty player.true psychophysical experiments. want test ability participants perform certain task limit one simple reason: threshold point influence additional factor, whether positive negative, pronounced. example, use unusual stimulus configuration increase attentional load performance probably drop. Allow preallocate attention via cuing use prime congruent target performance likely improve. course, manipulations overall effect also task particularly easy maddeningly hard much difficult measure effect. one thing performance drops 75% 65% goes 98% 95% 53% 52%77 vice versa. silliest thing can hope performance allow see effect factors manipulated. things like , knowledge careful design definitely superior hope.Thus, want performance participants approximately middle ceiling (100% performance, fastest response times, super easy) floor (chance level performance, slowest response times, super hard even impossible). know magic point particular person ? Particularly, task novel little information guide you78. solution adjust difficulty --fly based participant’s responses. example, two-alternatives-forced-choice task, can use two--one-staircase (difficulty increases two correct responses decreases one mistake) targets 70.7% performance threshold. different methods even different ways use core method (e.g., step stays constant changes, run termination criteria, etc.), always good idea refresh memory read adaptive procedures designing next experiment.game, use simple 3--1-staircase: get three responses correct row things get faster, make mistake game slows . ’ll see fast can go! First, implement hand use PsychoPy implementation.","code":""},{"path":"seminar-02-06.html","id":"guitar-hero","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.3 Guitar Hero","text":"Today, program Guitar Hero game. original game, must play notes guitar-shaped controller pressing buttons right time, just like actually play music guitar. one hand, straightforward repetitive motor task. hand, take fast complicated music piece ’ll take many minutes even hours practice get right. lot fun, music cues primes responses. idea music-synchronized-actions used Raymon Legends music levels jumps hits timed drums bass. bizarrely cool dance-like sequence satisfying experience, also watching pros (happened couple household).program game (sans Guitar Hero) can see video . player must press correct key (left, , right) whenever target crosses line. Pressing early late counts mistake. course, faster targets go, harder respond time correct key. wrote , use 3--1-staircase procedure control .per usual, take gradual approach:Boilerplate codeCreate class individual moving targetsCreate timed-response task class create (using cool generators), dispose , check response, adjust staircase.Add bells--whistles like score time limited runs.","code":""},{"path":"seminar-02-06.html","id":"boilerplate","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.4 Boilerplate","text":"Create usual boilerplate code code01.py:Create file basic settings (e.g., window size, ’ve picked 640×480 choose whatever looks good screen) can add later .Import needed PsychoPy.Create window.Create usual main game loop gamover variable, flipping window, checking escape button press.Put boilerplate code code01.py.","code":""},{"path":"seminar-02-06.html","id":"target-and-timedresponsetask-classes","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.5 Target and TimedResponseTask classes","text":"main work horse TimedResponseTask class. spawn new random Target random intervals (depend speed), pass speed information moving targets, remove targets, disappear screen. Target class inherit visual.rect.Rect class extra bells whistles make appear right location, move right speed, change line color (indicating correct response), compute whether already screen, etc. start single target first.","code":""},{"path":"seminar-02-06.html","id":"target-class-a-static-target","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.6 Target class: a static target","text":"First, create Target class: colored rectangle one three positions starts top window moves specific speed. constructor take PsychoPy window parameter (need create rectangle attribute), position index (ipos, 0 2), speed (speed, \"norm\" units per second), common settings (settings, dictionary target-specific settings settings file) . thing need right now constructor use constructor ancestor Rect() class via super().__init__(...) call, similar initialized FlappyBird class. Think parameters need pass, need think rectangle’s position, size, color. Store ipos speed attributes later use. addition, define score attribute set None. hold score participant got target None means responded upon yet.second parameter — position index — determines horizontal position target color (make targets fun distinct). code, decided make rectangle 0.4 norm units wide 0.1 norm units high. leftmost red rectangle (ipos 0), centered -0.5, middle green one dead center, rightmost blue rectangle centered 0.5. ’ve defined settings.json file Target group. Think can compute color position target ipos settings without using -else statements. Also, think y-position rectangle, appears right top window.Test creating target one position (three targets three positions) drawing main loop. get nice looking static rectangle(s).Put updated code code02.py create class Target separate file.","code":""},{"path":"seminar-02-06.html","id":"target-class-a-moving-target","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.7 Target class: a moving target","text":"targets fall speed defined speed attribute. Later , change attribute dynamically speed slow fall.actual falling , implement new method, call fall(), update target’s position every frame. speed norm units per second, thus, compute change vertical position also need know much time seconds elapsed since last position update. simplest way using Clock class. create attribute constructor , fall() method use current time compute apply change vertical position rectangle. Don’t forget reset clock ! (logic Flappy Bird already programmed.)Include fall() method call main loop see target falls. Experiment falling speed!Put updated code code03.py update class Target.","code":""},{"path":"seminar-02-06.html","id":"iteratorgenerator-functions","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.8 Iterator/Generator functions","text":"next section, create TimedResponseTask class generate targets random location random interval. can, course, directly class ’s fun ?! Instead, use opportunity learn iterator/generator functions. iterator function uses yield instead return statement , well, yield value. yields , function returns iterator object can iterate loop via next() function. Importantly, yield “freezes” execution function next time call function continues point rather start function. reach end function, automatically raises StopIteration() exception, don’t need worry communicate ran items. may sound confusing really simple. example illustrate :format makes writing iterators easy, just yield whatever want order want Python take care rest. can also yield loop, inside -else statement, etc. Look code figure printed running .TimedResponseTask class, need two generators. generators rather iterators endless (iterators iterate finite set items). One generates random delay next target one generates random target position (0, 1, 2). Implement separate file (called generators.py).time_to_next_target_generator() function take tuple two float values, define shortest longest allowed delays, parameter yield random number within range endless loop. need endless loop (True: ) know many values need, just generate many needed demand.next_target_generator() bit interesting. can just return random.choice 0, 1, 2 fun ? Instead, make bit complicated ensure three targets appear equal number times within 3N trials, N parameter generator function. ensure random, reasonably unpredictable balanced targets short run. Remember, long run random choice always give us balanced uniform distribution guarantee shorter runs trials. First, create list target appears N times (think can using range(), list() *). , create endless loop (, don’t know many values need) 1) shuffle elements list, 2) yield one element time via loop. run elements, shuffle yield one one . repeat. , . Endless loop!suggest creating testing function Jupyter notebook first putting separate file (e.g., generators.py). careful decide use loop instead next() testing. Remember, generators never run items yield loop!Put generators generators.py.","code":"def iterator_fun():\n    yield 3\n    yield 1\n    yield \"wow!\"\n  \n# function returns an iterator, not a value!\nprint(iterator_fun())\n#> <generator object iterator_fun at 0x000001AB4FF876F0>\n\n# iterating via for loop\nfor elem in iterator_fun():\n    print(elem)\n#> 3\n#> 1\n#> wow!\n    \n# iterating via next(), note you use an iterator object \n# that function returned, not the function itself!\nan_iterator = iterator_fun()  \n\n# now you can use an_iterator to get a next item from it\nprint(next(an_iterator))\n#> 3\nprint(next(an_iterator))\n#> 1\nprint(next(an_iterator))\n#> wow!# next call will raise an exception StopIteration()\nprint(next(iterator_var))\n#> name 'iterator_var' is not defineddef iterator_fun():\n  for e in range(4):\n    if e % 2 == 1:\n      yield e\n\nfor item in iterator_fun():\n  print(item)"},{"path":"seminar-02-06.html","id":"timedresponsetask-class","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.9 TimedResponseTask class","text":"Now ready create TimedResponseTask class. first take, create targets random location (next_target_generator()) random interval (time_to_next_target_generator()) plus take care moving drawing . bells whistles (disposing targets went past screen, changing speed, checking response validity, etc.) come later.constructor, definitely need PsychoPy window parameter, need every time create new target. addition, need pass dictionary settings task (initial speed, tuple range time intervals targets time_to_next_target_generator(), number target repetitions next_target_generator()) dictionary settings Target class (need every time create new target). use parameters beyond constructor, save attributes. Plus, create attribute targets initialize empty list (store Target objects ), create attributes generator objects using appropriate parameters. Also create speed_factor attribute set 1. use later control speed motion frequently targets generated. higher factor, faster targets move shorter interval target vice versa. Finally, need Clock count time moment need generate new target (new_target_timer) attribute hold time (time_till_next_target). Initialize latter next() item time--next-target generator (remember, need use attribute, generator object function returned, function ).Now need add three methods draw, update, add_next_target. first one easy, simply draws targets loop. second also easy, makes targets fall plus, loop, call add_next_target method. add_next_target method check whether elapsed time new_target_timer times speed_factor (speed increases, time next target goes faster) exceeded time_till_next_target (modulation elapsed time due speed can’t easily use CountdownTimer instead). indeed case, create new random target (get next() position position generator remember pass speed times speed_factor!), add list targets, reset timer get new time_till_next_target using next() item time generator.main file, create TimedResponsTask object (use name like) call draw update methods main loop. see targets appearing random falling consistently.Put updated code code04.py create class TimedResponseTask.","code":""},{"path":"seminar-02-06.html","id":"disposing-of-targets","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.10 Disposing of targets","text":"Currently, targets keep falling even screen. affect performance immediately taxing memory CPU, dispose . Target class, create new read-(computed) @property called is_below_the_screen returns True upper edge target lower edge screen, False otherwise, course, definitely need -else!Next, update method TimedResponseTask, add second loop (modify existing loop) delete object is_below_the_screen.debugging, run main code, wait least one target falls screen, put break point check targets attribute. length match number visible targets, total generated targets.Update classes Target TimedResponseTask.","code":""},{"path":"seminar-02-06.html","id":"finishing-line","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.11 Finishing line","text":"Add new visual attribute TimedResponseTask horizontal line. task player press corresponding key whenever target crosses (overlaps ) line. now, create attribute constructor (pick vertical location like) draw inside draw() method.Update class TimedResponseTask.","code":""},{"path":"seminar-02-06.html","id":"response","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.12 Response","text":"Now real fun begins! allow player press keys check whether corresponding target line. , need new methods Target TimedResponseTask classes. Target, implement new method class overlaps() take vertical position (finishing line) float number parameter. method, first check score attribute None. None means player already responded target allowed respond twice. None, compute score using following formula:\n\\[score = int \\left(10 - 10 \\cdot \\frac{|y_{target} - y_{line}|}{h_{target} / 2} \\right)\\]\n\\(y_{target}\\) vertical center target, \\(y_{line}\\) vertical position line (get function parameter), \\(h_{target}\\) height target, \\(|x|\\) means absolute value \\(x\\) (use fabs function math library ), 10 arbitrary scaling factor (can use integer put settings). Study formula see score 10 target’s center right line decreases linearly displacement early (target’s center line) late (target’s center already line) responses. target line, score becomes negative. convert int, want simple scores (floats look messy ). Compute score store temporary local variable. value positive, means success, store value permanently score attribute, change line color rectangle white (show player got right), return True (yes, target overlap line!). outcomes, return False. means either response already made target overlap line time key press.TimerResponseTask class, need new method check() take position target based key press (player pressed left key, position \\(0\\), \\(1\\), right \\(2\\)). Loop targets target’s position (ipos attribute) matches position key press (parameter function) target overlaps line (overlaps() method returns True), return score attribute target. Note condition order important ! need check overlap target position matches key. ran targets check means player pressed wrong key wrong time, return 0 (means “mistake”).main loop, add \"left\", \"\", \"right\" key list getKeys() call. , three keys pressed, translate position, respectively, 0, 1, 2 (think can without -else via dictionary), call new check method TimedResponseClass. Test code, targets’ edges turn white, time key press correctly!Put updated code code05.py, update Target TimedResponseTask classes.","code":""},{"path":"seminar-02-06.html","id":"score","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.13 Score","text":"Playing fun can see well . Let us add simple score indicator updated response score. already know can via TextStim stimulus also already know can inherit base class extend functionality. , class record draw score (part covered inheritance).Create new class (called ScoreText) inherits TextStim. constructor, need create integer attribute hold current score initialize 0. Plus, call ancestor’s constructor via super().__init__(...) initialize place text stimulus (’ve picked top left corner). Think parameters constructor ancestor’s constructor need.Next, need update score (numeric form text draw) every time participant presses key. implement code outside class fairly bad idea, puts class-related code elsewhere. also implement “normal” method, e.g., add() take care . Instead, implement special method iadd allows “add ” object. takes single parameter (addition compulsory self, course), performs “adding self” operation (whatever means respect object, can mathematical addition attribute, concatenation string, adding list, etc.), returns back reference , .e., returns self value attribute! ’s works:Implement special method class, can score_stim +=  timed_task.check(...). Remember, update numeric visual representations score method! Add score main code.Put updated code code06.py, create ScoreText class.","code":"class AddIt():\n    def __init__(self):\n        self.number = 0\n        \n    def __iadd__(self, addendum):\n        self.number += addendum\n        return self # important!!!\n\n\nadder = AddIt()\nprint(adder.number)\n#> 0\nadder += 10\nprint(adder.number)\n#> 10"},{"path":"seminar-02-06.html","id":"staircase","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.14 Staircase","text":"implement staircase part TimerResponseTask class, can speed slow . , need attribute counts number consecutive correct responses (, typically, call correct_in_a_row something like ). Create initialize zero constructor.Next, create new method staircase() take single parameter (beyond self) whether response correct . , increment correct_in_a_row one check whether reached 3. , increase speed_factor multiplying chosen factor (’ve picked 1.3) resetting correct_in_a_row 0. equivalent using logarithmic step speed_factor adjusted fraction magnitude. Alternatively, response correct, divide speed_factor number (e.g., 1.3, slowing things ) , reset correct_in_a_row 0. , loop targets update speed based speed speed_factor attributes.need call method inside check method, think .Update TimedTaskResponse class.","code":""},{"path":"seminar-02-06.html","id":"limiting-time","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.15 Limiting time","text":"Let us add competitive edge limiting run time 20 seconds (can pick duration, course, definitely want setting). Create additional outer loop, game can played many times . round , show latest state (redrawing game objects) plus “Round ” sign wait player press either escape (exit game) space (start next round). Remember recreate game objects anew next round (create reset method ).Put updated code code07.py.","code":""},{"path":"seminar-02-06.html","id":"using-psychopys-stairhandler","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.16 Using PsychoPy’s StairHandler","text":"Now know program basic staircase, let us use much flexible implementation PsychoPy via StairHandler class. use replicate staircase already implemented. However, capable much PsychoPy implementation adaptive methods, parametric Psi Quest approaches. strongly recommend consulting literature decide method best suited experiment relying PsychoPy’s implementation code.need modify TimedResponseTask, let us create twin TimedResponseTask2 (TimedResponseTaskPsychoPy, find intuitive). Simply copy-paste entire code, modify name, import use code08.py code. Make sure everything works just (anything beyond making carbon copy).Now let us make use StairHandler TimedResponseTask2. Drop correct_on_a_row attribute create StairHandler stairhandler attribute instead. need specify startVal initial value speed_factor, thus use whatever value previously. StairHandler uses nUp=1 nDown=3 default. matches custom staircase, theoretically can use defaults omitting parameters. However, sake code’s readability, specify explicitly. steps logarithmic, use stepType=\"log\" single fixed stepSizes=-0.1. magnitude -0.1 correspond roughly step used custom staircase need negative sign StairHandler increases staircase level following incorrect response. case, want exact opposite, decreasing speed_factor slow targets . Hence, negative sign turns increase decrease. Finally, StairHandler terminate reaches either desired number trials (nTrial) reversals (nReversals, changes correct incorrect responses vice versa). settings typically determine length single block/run real experiment. However, limited rounds time, need make sure StairHandler run trials game round . Thus, specify large number (e.g., 1000) parameters.created stairhandler attribute, ready use via next(self.stairhandler). Call first time constructor assign value returns speed_factor attribute (whatever startVal assigned put breakpoint double-check!)Next, need modify staicase() method making much simpler. First, remove correct: ... else: ... code leave targets’ speed adjustment code intact (still need !). , let stairhandler adjust via addResponse() method using information whether response correct (already parameter exactly information). Finally, get next speed_factor exactly way constructor. Done!Put updated code code08.py using TimedResponseTask2.program run much like now many opportunities make flexible little cost (look StairHandler settings) log via one saveAs methods.Let us latter, save staircase logs via saveAsText() run . Figure way generate unique filename run, logs overwritten.Save staircase logs code09.py.","code":""},{"path":"seminar-02-06.html","id":"this-is-just-a-start","chapter":"13 Guitar Hero: staircase and iterator functions","heading":"13.17 This is just a start!","text":"per usual, think can extend game. clock showing remaining time definitely missing. Auditory feedback nice. positions? Random colors confuse player?","code":""},{"path":"the-snake.html","id":"the-snake","chapter":"14 The Snake","heading":"14 The Snake","text":"chapter marks beginning second semester course, therefore use first game refresh knowledge Python acquired previously. use classes (instances, objects), lists, conditional statements, loops, external setting files program classic game Snake. Consults previous chapters information need complete game.","code":""},{"path":"the-snake.html","id":"snake-game-an-overview","chapter":"14 The Snake","heading":"14.1 Snake game: an overview","text":"Today, program good old classic: snake game! story simple: control snake trying eat many apples can. Every time consume apple, snake’s length increases. However, hit wall bite , game (lose one lives game run lives).final product look like., program game step step, starting empty gray PsychoPy window. general outline proceed:Create boilerplate code initialize PsychoPy.Figure place square. need snake made square segments lives rectangular grid made squares.Create single segment stationary snake79.Make snake move assuming rectangular grid.Implement “died hitting wall”.Add apples.\n7, Make snake grow eats apple.Add check biting (dying).Add bells--whistles make game look awesome.can see, new step builds previous one. proceed next step current one works fully(!) understand line code . leftover uncertainty linger, grow complicate life disproportionately!","code":""},{"path":"the-snake.html","id":"minimal-boilerplate","chapter":"14 The Snake","heading":"14.2 Minimal boilerplate","text":"need usual boilerplate code get us going:Create PsychoPy window (hardcode size, compute settings later ).Wait key press.Close window.Put code code01.py.forget put multiline comment top file, describing .","code":""},{"path":"the-snake.html","id":"fancy-boilerplate","chapter":"14 The Snake","heading":"14.3 Fancy boilerplate","text":"game, snake composed square segments move grid made squares. Thus, much easier define window size based size grid (squares) individual squares (pixels). way can figure window’s height \\[window~height~[~pixels] = window~height~[~squares] \\times square~size~[~pixels]\\]Note latter parameter determines game looks, double size square pixels double width height window.Now, let us think units use game. Recall PsychoPy five different units size position. , units pick make easier draw squares? Reread section units think units pick continuing.decision? suggestion \"norm\" units make sizing squares easy, long use suitable aspect ratio window . Good news formula automatically ensures correct aspect ratio (think case).start coding window size computation, create settings file using format choice contains grid size [squares] (list two values define grid width [squares] plus grid height [squares]) square size [pixels]80. suggest start 30 × 20 grid give us enough space try things can always increase resolution game later. square size, 20 pixels enough (decide based screen resolution).Add code loading file settings variable use settings compute window’s size. Test works correctly doubling (halving) size grid square size.Put code code02.py.","code":""},{"path":"the-snake.html","id":"fancier-boilerplate","chapter":"14 The Snake","heading":"14.4 Fancier boilerplate","text":"code computing window size belongs business logic setting window , therefore, part window class code. Therefore, let us define new GridWindow class inherit PsychoPy Window class modify constructor perform window size computation. new __init__() method take grid size square size parameters, compute actual size window pixels, call __init__() method parent Window class finish setup (forgot call parent’s methods, take look implemented Flappy Bird class inheriting ImageStim). already code need main script, thing tidying things moving constructor belongs adjusting use parameter parent methods.Put GridWindow class separate file (gridwindow.py?).Modify code save main script code03.py.","code":""},{"path":"the-snake.html","id":"adding-a-square","chapter":"14 The Snake","heading":"14.5 Adding a square","text":"already wrote, game made squares. Snake made squares. Grid lives made squares. apple square81. means need know size square units window need know within window square go based coordinates grid.Computing size square units window size easy, let us start . used \"norm\" units PsychoPy window, know width height go -1 (bottom) 1 (top). also know fit settings[\"grid width [squares]\"] squares horizontally andsettings[\"grid height [squares]\"] squares vertically (encoded grid size list [width, height] settings[\"grid size [squares]\"][0] settings[\"grid size [squares]\"][1]). Compute square width height window units constructor method GridWindow store later use tuple square_size attribute. Also, store grid size attribute (e.g., grid_size) useful snake apple classes later. implemented code, use debugging check numbers make sense. E.g., grid 20 squares tall square \\(0.1\\) \"norm\" units tall.Next, let us create method maps position grid position window. way, can think position snake apples terms grid draw window coordinates. Create new method grid_to_win() GridWindow class takes single parameter tuple integers (x_index, y_index) grid position (called argument ipos, places, counting compulsory self parameter) returns tuple floats (x_pos, y_pos) coordinates center square window coordinates. Use list comprehension simplify code.Take look drawing see geometry computation. red text shows location red points window norm units, whereas black font shows location square grid index units. Note need compute center(!) square go.\nFigure 14.1: Grid versus window coordinates\nRemember document method following NumPy docstring format.Now, test method creating square (now get size GridWindow attribute(s) created) main script placing different locations grid. Run code several times, using different grid indexes adding several squares check works intended. .e., 30×20 grid, grid coordinate 0×0 place square bottom-left corner, whereas 14×9 put almost center.Put code code04.py.","code":""},{"path":"the-snake.html","id":"a-snake-segment","chapter":"14 The Snake","heading":"14.6 A snake segment","text":"Let us think can represent snake. consist one segments. first one head, last one tail82. Thus, can think snake list individual segments.Consider individual segment. need 1) keep track location grid coordinate system 2) visual representation — square, just like one create previous exercise — positioned window coordinate system. Good news , already method GridWindow class maps former latter, long know segment grid, placing square within window easy. Thus, segment two pieces information associated represent dictionary two keys (\"pos\" (tuple x y grid coordinates) \"visuals\" (square)) , better still, class .Let us create SnakeSegment class. constructor __init__() methods take three parameters: 1) PsychoPy [Window] object, 2) segment coordinates grid, 3) segment color. Save grid coordinates ipos attribute (need keep track snake start moving around) reuse code previous exercise created square. Store square visuals attribute add draw() method simply calls draw() method square83.Test class creating drawing snake segment main script. Define snake segment color settings, create inside separate section \"snake\" add parameters later .Put SnakeSegment class separate file (snaking.py).Modify code save main script code05.py.","code":""},{"path":"the-snake.html","id":"the-snake-1","chapter":"14 The Snake","heading":"14.7 The snake","text":"already noted, snake just list snake segments. Create new class Snake. constructor take just two parameters: PsychoPy window object dictionary settings (\"snake\" section settings variable main script). constructor, create single segment put list attribute segments. just one attribute now using list already helps us future. Place segment roughly center grid. Use grid_size attribute GridWindow compute (need use floor division \\\\ ). also store window attribute later use, need every time create new segment.addition, implement draw() method draws segments loop. Test code creating drawing snake main script.Put Snake class separate file (snaking.py).Modify code save main script code06.py.","code":""},{"path":"the-snake.html","id":"get-a-move-on","chapter":"14 The Snake","heading":"14.8 Get a move on!","text":"Now need understand move snake given consist many segments. Assume five segment snake moves , picture (segments color coded make easier see goes ).Technically, need move segment new position. first “head” segment moves position snake. second segment moves head . third moves previous position forth one, etc. can implement movement like instead utilize fact , unless colored figure , segments look identical. Look uniformly colored snake . can “move” adding new segment new location (growing new head bitey end snake, marked red) clipping last tail segment (marked cross), previously penultimate segment becomes tail. rest can stay , saving us lot hustle snake long!program, list.insert(index, value)84 new head segment index 0 remove tail via list.pop().keep things neat tidy, implement two methods: grow() trim(). combine actions single function? Strategic thinking! add apples game, snake grow consuming shedding tail. Thus, separating two functions now simplify lives later on85.grow() method take just single tuple parameter dxy direction snake’s movement. .e., (-1, 0) leftward moving snake, (1, 0) right moving, (0, -1) , (0, 1) . Inside method, compute coordinates new head segment based position current head (first element snake) direction motion (dxy), create new snake segment location, insert elements.trim() method even simpler just pops last segment (trims tail).test functions, create snake call grow() method times using different directions. Check visually works, .e., correct number segment (initial head + many segments grow() method calls) snake growing correct direction. Combine grow() trim() calls visually check snake well.Update Snake class adding grow() trim() methods.Test code07.py.","code":""},{"path":"the-snake.html","id":"the-game-loop","chapter":"14 The Snake","heading":"14.9 The game loop","text":"Add main game loop using user_abort variable, runs long user_abort False. Inside loop, draw snake check keys without pausing game. player pressed \"escape\", change user_abort True (player decided quit game). player pressed \"space\" key, grow snake direction liking trim . Thus, every time press space key, snake move one square direction choice. Test code!Add main loop code08.py.","code":""},{"path":"the-snake.html","id":"self-motion","chapter":"14 The Snake","heading":"14.10 Self-motion","text":"snake move . , can call grow() trim() methods every iteration main game loop, just player presses space. However, default, call win.flip() synchronize loop refresh rate screen (typically, 60 Hz). means call methods 60 times per second , put differently, snake move 60 squares per second. waaaay fast, given original grid size just 30×20 squares. appreciate just fast , remove key space:... conditional statement, call grow/trim snake methods every iteration see snake fly screen.Instead, decide snake’s speed, e.g., 4 squares per second86, define new parameter settings. Snake class constructor, use parameter compute new attribute step_duration expresses time needed elapse moving new square (.e., interval calls grow/trim methods seconds)87. two variables express information (interval just inverse speed)? define step_duration directly settings human makes harder understand just fast movement . least , speed 4 squares per second easier comprehend 0.25 second per square. Thus, cases like , prefer two variables, one human-oriented (settings) one computer-oriented (actual implementation, computed via unit conversion). Remember, just writing working code, writing code easy human understand.Also constructor, add new movement_clock attribute creating either clock countdown timer object88 add reset_clock() method can_move computed property. former reset clock countdown timer (whatever picked). latter return True, timer ran snake can move next square (case need reset timer!), False case. main script, call reset_clock() method main loop inside main loop call grow() trim() methods snake can_move.Test code setting different snake speed.Update Snake class adding timer attributes methods.Test code09.py.","code":""},{"path":"the-snake.html","id":"describing-direction-using-words","chapter":"14 The Snake","heading":"14.11 Describing direction using words","text":"current design, described direction tuple (dx, dy). Let us change , described using words \"\", \"\", \"left\", \"right\". strictly necessary make lives somewhat easier later add steering controls. importantly, serve didactic purpose well, showing can use dictionaries translate values one representation another.Thus, main script, let us create new string variable direction set \"\" (direction like). keep grow() method translate individual strings pairs (dx, dy) values main script . E.g., \"\" correspond (0, -1), \"right\" (1, 0), etc.can implement translation via -elif conditional statements:However, approach introduces lot repetitive code scale particularly well. Instead, can use dictionary (let us call DIRECTION_TO_DXY another constant) \"\", \"right\", etc. string keys tuples (0, -1), (1, 0), etc. values. way, can use current value direction variable key get (dx, dy) pair DIRECTION_TO_DXY dictionary. translation directly grow() method call rather creating temporary variable -elif examples . Test translation changing direction checking snake moves accordingly.Use direction DIRECTION_TO_DXY code10.py.","code":"if direction == \"up\":\n  dxy = (0, -1)\nelif direction == \"right\":\n  dxy = (1, 0)\n  ..."},{"path":"the-snake.html","id":"it-is-all-about-control","chapter":"14 The Snake","heading":"14.12 It is all about control","text":"Playing game fun, steer snake! player presses right arrow key, snake turn clockwise. Conversely, left arrow key, turn snake counterclockwise. need figure two things. First, determine new direction motion given current one key pressed. Second, must decide change value direction variable. Let us tackle problems one time.Determining new direction motion fairly straightforward. current \"\" key right (clockwise rotation), new direction \"right\". current \"\" key left, new direction \"right\" (counterclockwise rotation), etc. implement bunch -elif statements , better still, use dictionary look approach implemented previous exercise. , need nested dictionary (dictionary inside dictionary) NEW_DIRECTION[key][direction]. first level two keys \"left\" \"right\" (, effectively, counterclockwise clockwise rotation) selects translation used second level dictionary translates current direction new direction motion. E.g., current direction \"\" key \"right\", NEW_DIRECTION[\"right\"][\"\"] \"left\" (rotating clockwise \"\" gets us \"left\"). know define simple dictionary. Good news, defining nested dictionaries follows rules, straightforward.Now let us think change value direction variable. simplest approach change soon player presses key. However, snake move every frame lead odd behavior. Imagine game “easy” mode, snake moves slowly (one square per second). case, player easily press left twice second, make snake move backwards, direction changed 180°. Snakes, least snake, . Thus, need temporary variable, let us call new_direction, set every time player presses key whose value transferred direction time move snake (snake can move). compute current direction key pressed. way, even player presses left key several times, snake still turn compute turn using original direction value changed new_direction variable. also means players can “change mind”, last key press snake moves determine direction motion.Add NEW_DIRECTION implement steering code11.py.","code":""},{"path":"the-snake.html","id":"turning-the-harder-way","chapter":"14 The Snake","heading":"14.13 Turning the hard(er) way","text":"Let us implement “figure new direction” code complicated way. purpose exercise challenge , show new methods list, demonstrate can think change direction moving list. Implement function called compute_new_direction(), take two parameters (current direction pressed key) return new direction rotation. can put main script , better still, put separate utilities.py file. However, cases like , find useful play code Jupyter notebook turning function, try approach instead debugging.idea. Imagine list [\"left\", \"\", \"right\", \"\"]. list, rotation clockwise correspond moving list right (assuming jump beginning move past last item). Conversely, rotation counterclockwise corresponds moving left (, assuming jump end list, went past first item). see, rotation expressed intuitive “motion list”.actual implementation, first, define local variable list order ’ve described. Next, need identify location current direction within list using index() method. , need figure whether increase decrease index (move right left), based pressed_key parameter (can use dictionary approach conditional assignment ). Finally, need control range, index -1 becomes 3 (went far left) index 4 become 0. elegant way , using % modulus operation. Hint, 4 % 4 0. 1 % 4, 0 % 4, even -1 % 4? Check Jupyter notebook get idea hinting . , course, use 4 division, use length list, determines range values.Create `compute_new_direction() utilities.py.Use instead dictionary look-code12.py.","code":""},{"path":"the-snake.html","id":"hitting-the-wall-1","chapter":"14 The Snake","heading":"14.14 Hitting the wall","text":"can control snake , moment, can steer screen make go . Let us fix former!Add new computed property hit_the_wall Snake class. method check whether head snake (segment ?) still within grid defined (check ?). return True, head snake outside grid limits (, true snake hit wall) False, still inside.Test adding new condition inside main game loop. Check whether snake hit_the_wall , case, game . Think optimal place check . every iteration logical place main loop. ?Test game quits successfully steered snake wall.Add hit_the_wall property Snake class.Use code13.py.","code":""},{"path":"the-snake.html","id":"is-this-the-snake","chapter":"14 The Snake","heading":"14.15 Is this the snake?","text":"next section, adding apples game. catch apples appear location occupied snake. Otherwise, generate apples directly snake’s stomach. Practical snake defeats purpose game. rephrase problem, need method checks whether particular grid location occupied snake.Add new method is_inside() takes tuple grid location parameter returns logical value whether grid location occupied snake (.e., one segments). Document function! Test method via debugging. Calling immediately creating snake location head (segment) different location. Store return value temporary variable put breakpoint appropriate place check value (use debug console).Add is_inside() method Snake class.Test code14.py.","code":""},{"path":"the-snake.html","id":"an-inedible-apple","chapter":"14 The Snake","heading":"14.16 An inedible apple","text":"Let us add highly desirable fruit: apple! use apple bitmap89, create new class descendant ImageStim class. constructor take GridWindow Snake parameters. constructor, need find random grid location occupied snake, store ipos attribute call parent’s constructor initialize image appropriate size location (, check Flappy Bird class GridWindow class, forgot ).tricky part finding unoccupied location. many different strategies . simplest one generate potential location random, check whether occupied snake (is_inside()?) keep find unoccupied one.main script, create apple draw main loop. moment, snake eat pass fix shortly.Create Apple class apples.py.Use apple code15.py.","code":""},{"path":"the-snake.html","id":"eating-an-apple","chapter":"14 The Snake","heading":"14.17 Eating an apple","text":"Apples exist snakes eat ! Let us add functionality. general idea simple. head snake moves grid location apple, trim tail. See useful split growing trimming two separate functions? Told , strategic thinking!need add conditional statement snake’s head apple, trim tail create new apple. , apple location?Make snake eat apples code16.py.","code":""},{"path":"the-snake.html","id":"eating-yourself","chapter":"14 The Snake","heading":"14.18 Eating yourself","text":"snake grows beyond four segments, opportunity bite itself90. , need check , snake moved, head location one segments body. Create new property bit_itself returns True False based whether case. property similar identical is_inside() method implemented earlier. critical difference simply reuse function?implemented bit_itself, check lead end game.Implement bit_itself property.Use code17.py.","code":""},{"path":"the-snake.html","id":"bells-and-whistles-score","chapter":"14 The Snake","heading":"14.19 Bells and whistles: score","text":"Now fully functional game, can start adding non-essential nice--features . first one score. Create new class Score inherits TextStim extra attribute score (initialized \\(0\\) constructor) method plus_one() increase score one update text attribute. apple, initialize TextStim part calling parent’s __init__() method using appropriate parameters. decided put top window reads Score: XXX free feel fit.main script, create Score object, draw appropriate increase score every time snake eats apple.Create Score class scoring.py.Use code18.py.","code":""},{"path":"the-snake.html","id":"bells-and-whistles-three-lives","chapter":"14 The Snake","heading":"14.20 Bells and whistles: three lives","text":"Let us give player three attempts achieve top score. three lives, every time snake dies, game score resets: single segment snake appears center new random apple appears elsewhere (put code create ?). snake dies three times, game . Think can implement three repetitions.score cumulative, beginning round two equal final score round one. Think can achieve . Another important point: now two nested loop, one game, one round. snake dies, round , run lives, game well. player presses escape round game . Think can implement .Put updated code code19.py.","code":""},{"path":"the-snake.html","id":"bells-and-whistles-press-space-to-start-the-round","chapter":"14 The Snake","heading":"14.21 Bells and whistles: press space to start the round","text":"moment, round starts immediately. friendlier, player start . round, draw visuals (snake, apple, score) plus text “Press SPACE start” wait either space escape key pressed. former case, trial start. latter case, player exit game.Put updated code code20.py.","code":""},{"path":"the-snake.html","id":"bells-and-whistles-showing-remaining-lives","chapter":"14 The Snake","heading":"14.22 Bells and whistles: showing remaining lives","text":"Let us just repeat game three times show player many lives still . Download heart.png91 use show remaining lives top-left corner screen: three hearts round one, two hearts round two, just single heart round three. need use (ImageStim)[https://www.psychopy.org/api/visual/imagestim.html#psychopy.visual.ImageStim] . Think size images location. Hint: created list heart images using list comprehension drawing hearts definitely requires loop.Put updated code code21.py.","code":""},{"path":"the-snake.html","id":"bells-and-whistles-difficulty","chapter":"14 The Snake","heading":"14.23 Bells and whistles: difficulty","text":"moment, difficulty game, speed snake moves, fixed player way choosing . Let us create dialog appears create window start game allow player choose easy, normal, difficult92. leave decide snake speeds correspond difficulty. can three options, want. However, definitely define settings file.create run dialog, use Dlg class \ngiu module PsychoPy. challenge today figure use based manual alone. Take look example experiment separate file Jupyter notebook.Put updated code code22.py.","code":""},{"path":"the-snake.html","id":"bells-and-whistles-blinking-game-over-message","chapter":"14 The Snake","heading":"14.24 Bells and whistles: blinking “game over” message","text":"game (player pressed escape key), show blinking “Game ” message superimposed final static game screen. Thus, need draw game objects messages (without moving snake) plus show text message 0.5 second 0.5 seconds player presses Space button. Hint: separate loop main game loop rounds, logical variables clocks/timers definitely something .Put updated code code23.py.","code":""},{"path":"the-snake.html","id":"bells-and-whistles-sounds","chapter":"14 The Snake","heading":"14.25 Bells and whistles: sounds","text":"Download game--arcade.wav93 8-bit-game--sound.wav94. Use former whenever snake dies use latter player runs lives. Note, sound played player pressed escape.need use Sound class sound module PsychoPy. Important: use Sound class library-specific implementation PTBSound SoundDevice classes. PsychoPy figure backend best (available ) .Put updated code code24.py.","code":""},{"path":"the-snake.html","id":"the-sky-is-the-limit","chapter":"14 The Snake","heading":"14.26 The sky is the limit","text":"Good job! Lots coding now cool retro game!","code":""},{"path":"moon-lander.html","id":"moon-lander","chapter":"15 Moon lander","heading":"15 Moon lander","text":"Today create moon lander game. job simple: land ship pad crash ! brief video implementation gameHere general outline proceed:Create basic PsychoPy window main experimental loop.Outsource boilerplate context managerDefine basic MoonLander class static image add drawing main loop.Randomize position lander.Add gravity pull.Add vertical thruster counter-act gravity.Add horizontal thrusters, can maneuver around.Define LandingPad class.Implement landing / crashing checks.Add runs.Limit fuel.first learn context management exceptions.","code":""},{"path":"moon-lander.html","id":"boilerplate-1","chapter":"15 Moon lander","heading":"15.1 Boilerplate","text":"per usual, start usual boilerplate code. Create settings file , now, defines size window. Create code01.py usual boilerplate loading settings, opening window (size determined settings), main game loop (can add text message make look less plain) check “escape” button exit loop, closing window end. specific next learn hide boilerplate context manager.Put code code01.py.","code":""},{"path":"moon-lander.html","id":"context-manager","chapter":"15 Moon lander","heading":"15.2 Context manager","text":"one hand, context management frequently used feature Python, particularly file operations (used loading settings JSON YAML file). hand, full power relies custom class implementation rarely used. However, can useful whenever context programs similar, case PsychoPy games programmed typical PsychoPy experiments. cases, fairly fixed structure program:Initialization\nget experimental settings reading external file\ncreate PsychoPy window, logger experimental results, mouse (required)\ninitialize special devices response box, eye tracker, etc.\nget experimental settings reading external filecreate PsychoPy window, logger experimental results, mouse (required)initialize special devices response box, eye tracker, etc.Actual experimentSaving cleaning \nsave data logs\nrequired, close connection special devices response boxes, eye tracker, etc.\nclose PsychoPy window\nsave data logsif required, close connection special devices response boxes, eye tracker, etc.close PsychoPy windowIf look code, realized steps 1 3 remain pretty much throughout games programmed. Thus, create context manager class can always reuse hide away boilerplate code.reminded context manager used working files. First, works without context manager: 1) open file assign object variable, 2) work , 3) close . latter important ensure information fully written lock file.better way use context manager via ... ... statement (, look familiar now):Note now file.read() inside block file.close() call. latter evoked automatically, run code inside block exit . Although example difference minimal — different way assign value variable explicit versus implicit file closing — second variant takes care cleaning , ensures forget , allows concentrate important bits.’s works behind scenes. context manager class implements two special methods __enter__ __exit__[Spoiler alert! approach called duck typing learn next game]. former creates returns context, whatever attribute value require, wheres latter performs cleaning necessary exiting context. implement limited file context manager :Note __exit__ method extra parameters exc_type, exc_value, traceback. relevant exception handling later can ignore now.Now turn! Create GameContext class (separate file, course) load settings (filename passed constructor), create PsychoPy Window object given size upon entering context, close code exists context. now, need one attribute store settings (call settings) one attribute PsychoPy Window (use win attribute name). small important difference relative FileManager class example . , two objects (attributes) like use inside context: settings win. return tuple approach scale well. Instead, enter return reference context object (reminder, reference current object always self parameter method). way can always access either attribute via context.settings context.win.Create GameContext class use code02.py.can see, repetitive part now hidden context class making easier concentrate main code. context manager another ace sleeve: makes handling exceptions (.k.. errors) safe exiting much simpler.","code":"file = open(\"somefile.txt\", \"r\")\n# ... do something with the file, such as reading the entire file into a single variable\ndata = file.read()\nclose(file)with open(\"somefile.txt\", \"r\") as file:\n    file.read()class FileManager():\n    def __init__(self, filename, mode):\n        \"\"\"\n        Stores the settings for use in __enter__\n        \n        Parameters\n        ----------\n        filename : str\n        mode : str\n        \"\"\"\n        self.file = None\n        self.filename = filename\n        self.mode = mode\n        \n    def __enter__(self):\n      \"\"\" \n      What we need to do to create context:\n        * Open the file and returns the object.\n      \n      Returns\n      ----------\n      File object\n      \"\"\"\n      self.file = open(self.filename, self.mode)\n      return self.file\n      \n    def __exit__(self, exc_type, exc_value, traceback):\n      \"\"\"\n      What we need to do before destroying the context:\n        * Close the file before we exit the context.\n      \"\"\"\n      close(self.file)\n      \n# and now we use it!\nwith FileManager(\"somefile.txt\", \"r\") as file:\n    file.read()with GameContext(\"settings.yaml\") as context:\n  # your usual code inside but\n  # PsychoPy window is context.win\n  context.win.flip()"},{"path":"moon-lander.html","id":"exceptions","chapter":"15 Moon lander","heading":"15.3 Exceptions","text":"running actual experiment, one worries “happens data already logged program crashes error”? collecting full measurement bad keeping least partial log even worse, can still use analysis guidance future adjustments. Python, languages, special mechanisms handle exceptions arise code execution.Whenever error occurs run time, raises exception: creates object special class contains information describing problem. example, ZeroDivisionError raised whenever try divide zero, e.g., 1 / 0 (can try Jupyter notebook). KeyError raised, using dictionary wrong key, code raise :Similarly, IndexError raised, try use invalid index list, NameError, trying access variable exist, AttributeError object attribute trying use, etc.Python, use try: ... except:...finally: operators anticipate handle exceptions:simplest case, need just first two operators: try except. Create Jupyter notebook (submit part assignment) write code generates division--zero error handled via try...except.... except simply print message, know executed. Create another cell, copy code now check exception handling code executed, error generated (.e., divide non-zero number).Put exception handling code cell Jupyter notebook.Using except: catches exceptions. However, considered bad style (general) linter complain. Instead, can specific handle exceptions based class.Implement handling KeyError ZeroDivisionError, print different messages check works. Test generating runtime errors code.Put specific exception handling code cell Jupyter notebook.far, generated exception causing runtime errors code can raise exceptions via raise operator. example, instead dividing zero, can raise ZeroDivisionError()95. Use previous code, instead actual division zero. Try raising exceptions see code handles . Also check happens first two specific exception handlers general except: raise NameError?Use raise test exception handling Jupyter notebook.far talked exceptions way alert runtime errors. However, can used general way control execution flow. use side exception next section dealing context.","code":"a_dict = {\"a_key\" : 1}\na_dict[\"b_key\"]\n#> 'b_key'try:\n    # some code that might generate a runtime error\nexcept:  \n    # code that is executed if something bad happens\nfinally:\n    # code that is executed both with and without exception\n    \n# code that is executed ONLY if there were no exceptions or if an exception was handledtry:\n    # some code that might generate a runtime error\nexcept KeyError as key_error:\n    # code that is executed only if KeyError exception was raised \n    # with exception information stored in the key_error object\nexcept ZeroDivisionError as zero_division_error:  \n    # code that is executed only if ZeroDivisionError exception was raised\n    # with exception information stored in the zero_division_error object\nexcept:\n    # code that is executed if any OTHER exception is raised."},{"path":"moon-lander.html","id":"exception-within-context","chapter":"15 Moon lander","heading":"15.4 Exception within context","text":"try..except... operators provide general mechanism exceptions handling happens exception raised inside context? can, course, put try...except... code , something , planning handling specific exceptions. However, exception occurs code inside context, Python first exit context, .e., call __exit__ method, handling explicitly. Moreover, kindly put exception information parameters exc_type (class exception) exc_value (object class). way, can perform proper clean-(save data, close window, etc.) either handle exception leave alone, propagates can handled pieces code (stop execution, handle explicitly)., use mechanism safe clean-also make aborting experiment (game) easy. previous games many rounds, nested loops made aborting game via escape key press awkward. check inner loop differentiate normal end--round used abort outside loop. can make life much easier via combination context manager custom exception.First, create custom GameAbort class, descendant Exception class. need code , even constructor need redefined, use pass statement body (need least one line code class). Next, raise GameAbort(), player pressed escape key (forget import GameAbort class, can use main script). Finally, exit method GameContext manager, check whether exc_type GameAbort (exc_type None, exception occurred) , important(!), return True case:last bit return True informs Python handled exception good (need propagate ). However, note return True meaning code handles exit context must statement. Now, can safely abort experiment code location, inside nested loops, functions, etc. cases, exception propagated __exit__ method, away awkward extra checks.Create GameAbort exception class,update GameContext class handle ,use updated main script code03.py.","code":"def GameContext:\n    ...\n    def __exit__(self, exc_type, exc_value, traceback):\n        ...\n        if exc_type is GameAbort:\n            return True\n  "},{"path":"moon-lander.html","id":"create-moonlander-class","chapter":"15 Moon lander","heading":"15.5 Create MoonLander class","text":"moonlander.py, create new MoonLander class. ImageStim attribute (assume called image) contain visuals ship created using ufo.png image. However, instead hardcoding filename, create new group \"Lander\" settings file add new setting \"ship image : ufo.png\" (assuming use YAML). Pass Lander-specific settings constructor save attribute (later).Note want inherit ImageStim directly, visuals elements later . Also, implement draw() method draw visual elements lander (one now, course).Create instance MoonLander class main script draw main game loop. see static picture ship center screen.Create MoonLander class use main game loop.\nPut updated code code04.py.","code":""},{"path":"moon-lander.html","id":"randomize-landers-position","chapter":"15 Moon lander","heading":"15.6 Randomize lander’s position","text":"Implement new method reset() resets lander next round. moment, thing randomize position image. Use range -0.5..0.5 horizontally 0.8..0.9 vertically (assume using \"norm\" units). Call constructor test main loop calling every time press space button (make ship jump).Add reset() method MoonLander class use main game loop.\nPut updated code code05.py.","code":""},{"path":"moon-lander.html","id":"flying-but-only-down","chapter":"15 Moon lander","heading":"15.7 Flying (but only down)","text":"lander fly, must adjust position , specifically, position image (self.image.pos) based speed. , speed must adjusted based forces gravity thrusters act upon lander. Accordingly, needA new setting defines acceleration due gravitational force. Define settings file, call gravity [norm/sec^2] (, acceleration distance units \"norm\" rather meters real world) set 0.000196A new attribute speed contain horizontal vertical velocity norm units per second. Initialize [0, 0] reset() also assign value (e.g., also [0, 0]) linters like see attributes never mentioned constructor.new attribute PsychoPy clock measure time elapsed since last position adjustment (way can compute speed acceleration “per second”). forget reset reset().Now, implement method update lander position (call , unimaginatively, update()). Inside, figure time elapsed since last call (since last reset()) forget restart clock. know much time elapsed, can adjust, first, speed based acceleration (vertical speed based gravity now, worry horizontal component implement thrusters) , , position based speed. Call main loop watch lander fall sky. screen, press space see go . Play gravity setting adjust speed falling liking.Update MoonLander class effect gravity.\nUse main loop code06.py.","code":""},{"path":"moon-lander.html","id":"vertical-thurster","chapter":"15 Moon lander","heading":"15.8 Vertical thurster","text":"PsychoPy allows get key presses , using hardware.keyboard get press release time. Unfortunately, get key released. game, thursters must active long player presses key. Thus, need know whether key currently pressed, pressed released time past. , use pyglet library (backend used PsychoPy) directly. First, moonlander.py add import pyglet include following code inside constructor class.installs “handler” monitors state keyboard. Now, can read state , say, arrow key asself.keyboard[self.key.] (True pressed, False otherwise). use vertical thruster LEFT RIGHT horizontal ones.Define vertical accelartion [norm/sec^2] twice gravity (can use number, course) update update()97, total vertical acceleration \\(vertical acceleration + gravity\\) user pressing key (use self.keyboard self.key figure ) \\(gravity\\) alone, .Test vertical thruster works (need update main code?)!Update MoonLander class vertical thruster.","code":"# setting up keyboard monitoring\nself.key = pyglet.window.key\nself.keyboard = self.key.KeyStateHandler()\nwin.winHandle.push_handlers(self.keyboard)"},{"path":"moon-lander.html","id":"horizontal-thursters","chapter":"15 Moon lander","heading":"15.9 Horizontal thursters","text":"Now implement logic, computing acceleration, speed, position horizontal thrusters (define horizontal acceleration [norm/sec^2] setting decide value ). Remember, right thruster pushes lander left vice versa! Think left right keys pressed time. Test flying around!Add horizontal thrusters MoonLander.","code":""},{"path":"moon-lander.html","id":"landing-pad-visuals","chapter":"15 Moon lander","heading":"15.10 Landing pad: visuals","text":"purpose game land landing pad. landing pad just rectangle additional methods properties. stands reason make descendant visual.Rect class, unfortunately, technical reason figured yet, work shape classes like Rect Circle.Create new file landing_pad.py new class LandingPad. constructor, create rectangle store attribute (pick name). 0.5 units wide located bottom window random position within window horizontally. Pick fill line colors like. method class needs draw().main code, create object class LandingPad draw main loop, along lander .Create LandingPad class.\nUse code07.py.","code":""},{"path":"moon-lander.html","id":"computing-edges-of-game-objects","chapter":"15 Moon lander","heading":"15.11 Computing edges of game objects","text":"aim game soft touchdown landing pad. , need know top landing pad , well bottom lander left right limits object . Let us think bottom lander first, rest similar.information directly. vertical position lander self.image.pos[1] (assume visuals attribute called image) height self.image.size[1]. , easy compute bottom edge (remember position center rectangle). Accordingly, create computed property bottom. Create computed attributes bottom, left, right lander class top, left, right landing pad.Implement computed properties MoonLander LandingPad classes.","code":""},{"path":"moon-lander.html","id":"landing","chapter":"15 Moon lander","heading":"15.12 Landing","text":"check landing whenever bottom edge lander top edge landing pad. successful landing must satisfy several conditions:lander must within limits lander pad horizontally.vertical speed must zero negative (otherwise, lander flies ) certain threshold define vertical speed threshold [norm/sec]. set 0.05.absolute horizontal speed must certain threshold, also defined horizontal speed threshold [norm/sec] : 0.05.three conditions false, lander crashed. Either way, game , record outcome (whether landing successful) exit main game loop. loop, inform player outcome. Draw game objects plus message outcome (e.g., “!” / “Oh, !” something else) wait space key press.condition quite long, fitting single line make hard read. Python, can split line putting \\ end . multiline statement look follows:Implement landing checks code08.py.","code":"if lander_is_within_horizontal_limits and \\\n   lander_vertical_speed_is_good and \\\n   lander_horizontal_speed_is_good:\n   ...\nelse:\n  ..."},{"path":"moon-lander.html","id":"more-rounds","chapter":"15 Moon lander","heading":"15.13 More rounds","text":"Extend game one round player either landed crashed. Remember reset position lander new round. can also add reset() method landing pad well, randomizing horizontal position.Add reset() method LandingPad class.\nAdd rounds code09.py.","code":""},{"path":"moon-lander.html","id":"limited-fuel","chapter":"15 Moon lander","heading":"15.14 Limited fuel","text":"Let us add fuel limit make things interesting, thrursters work fuel left. , define new setting full tank (’ve picked 100 can ) add new attribute fuel Lander class (remember need explicitly define attributes constructor). fuel level set full tank whenever reset lander.Every use thruster reduce 1 thrusters work fuel. need take care update() method. Think vertical horizontal thrusters.also need tell player much fuel left. ’ve implemented bar gauge can implement text stimulus well. Create appropriate visual attribute constructor Lander class. Remember update every time level fuel changes draw whenever draw lander . nice touch, can change color indicate much fuel left. ’ve used green 2/3, yellow 1/3, red less .Add fuel fuel gauge Lander class.","code":""},{"path":"moon-lander.html","id":"add-to-it","chapter":"15 Moon lander","heading":"15.15 Add to it!","text":"already functioning game can add much : visuals thrusters, sounds, background, etc. Experiment !","code":""},{"path":"space-invaders.html","id":"space-invaders","chapter":"16 Space invaders: mixins and duck typing","heading":"16 Space invaders: mixins and duck typing","text":"Today program classic Space Invaders game twist. using object-oriented programming learn mixins duck typing. Previously, learned ensure generalization — common behavior different classes — via inheritance. E.g., visual stimuli inherit save BaseVisualStim class, can sure size, ori, pos properties can draw() . However, approach may best suited cases class must implement several different behaviours. One solution use multiple inheritance, class descendant several classes , thus, get behavior many . canonical way ensuring generalization can achieve means differently.","code":""},{"path":"space-invaders.html","id":"mixins","chapter":"16 Space invaders: mixins and duck typing","heading":"16.1 Mixins","text":"One way infuse common behavior different classes via mixin classes. classes define single behavior (.e., method) nothing else. constructor , typically, attributes. Thus, limited used can inherited (mixed proper class) enabling single behavior descendant.Think creatures can fly: insects, birds, bats, astronauts, etc. common ancestor common ancestor ability fly. Instead, line evolved ability independently evolutionary “cousins” fly. programming, can follow pattern creating common ancestor flying non-flying insects, implementing ability fly former. birds, bats, astronauts, etc. implementation must detailed creature-specific, might unavoidable. However, ability “fly” abstract , therefore, creatures question, end writing code every insect, bird, bat class. easy copy-paste, course, means get multiple places identical implementation, need change , make sure places (gonna miss , always ). Alternative? Mixins! create class FlightAbility implements common abstract “flying” , , inherit class whenever need flying someone. Mix non-flying bird FlightAbility can fly! Mix insect: Flying insect! may also mix one ability. , start bird just walks around (chicken). Add mixin FlightAbility get flying bird (pigeon). Take walking bird mix SwimAbility get swimming bird (penguin). Mix get bird can fly swim (swan)!may need mixins frequently powerful way creating isolated behavior different classes might need without enforcing strict inheritance structure. PsychoPy big mixins. example, ColorMixin mixed-visual class needs work color, implements repetitive98 code translating arbitrary color representation (string, hexadecimal code, RGB triplet, HSL triplet, single grayscale value, etc.) internal RGB color value. also TextureMixin classes use textures drawing objects. Space Invaders game, use Mixin class mix “boom sound exploded” behavior, common aliens player’s ship.","code":""},{"path":"space-invaders.html","id":"duck-typing","chapter":"16 Space invaders: mixins and duck typing","heading":"16.2 Duck typing","text":"Alternatively, might need object behave certain way proper class hierarchy overkill one class might want functionality. idea use “duck typing”, comes saying “walks like duck, quacks like duck, must duck.” words, things care walking quacking, need actual duck99? goose can walk quack way ? dog can walk quack like duck ? Obviously, correct answer “depends” lot situations interested common behavior rather common ancestor.Duck typing popular method Python. example, len(object) canonical way compute length object. object string len(\"four\"), list len([1, 2, 3, 4]), tuple len(tuple(1, 4, 2)), dictionary len({\"\": 1, \"B\": 5}), etc. idea long class concept length (number elements, number characters, etc.), able compute length via len(). achieved adding special method class __len__(self) must return integer. called “hook method”, never called directly “hooked” len() function call. Thus, whenever write len(object), actually translated object.__len()__100.Another popular duck typing application implementation iterator: object yields one item time, can lazy computation101 loop . already know implement iterator function also defined class two special methods: __iter__(self) __next__(self). former called iteration starts perform necessary initialization (e.g., setting internal counter 0, shuffling elements, etc.) must return iterator object (typically, reference ). __next()__ method called whenever next item needed: use iterator loop, called automatically can call via next(iterator_object). __next()__ must return next item raise StopIteration exception, signalling ran items.Note iterator require implementation __len()__ method! come? items can iterate , doesn’t make sense also know many (length object)? necessarily! First, use iterator loop just want iterate items run (signaled StopIteration exception). Thus, total number , hence, len() method little interest. Accordingly, implement function need102? Second, iterator endless (case, called generator)? E.g., every time __next__() called returns one random item random number. way, never run items, question “length” meaningless unless take “infinity” answer. lack need __len__() iterators spirit duck typing: implement methods need duck, ignore rest., practice duck typing implementing __len()__ two special iterator methods part AlienArmada class.","code":""},{"path":"space-invaders.html","id":"which-one-to-use","chapter":"16 Space invaders: mixins and duck typing","heading":"16.3 Which one to use?","text":"Now know three methods produce common behavior: proper inheritance, mixins, duck typing. one use? Depends need. many classes can well defined inheritance tree, use . However, specific behavior need classes hard fit inheritance tree, use mixins. single class needs specific functionality, iterator: use duck typing. Using one preclude using others, moderate, using many different paradigms confusing reader.","code":""},{"path":"space-invaders.html","id":"space-invaders-1","chapter":"16 Space invaders: mixins and duck typing","heading":"16.4 Space Invaders","text":"program simple version game gradually descending alien armada. task capture aliens firing teleport beam one rams ship gets away. , can see version game.per usual, plan move slowly small steps keep complexity changes low. steps:Start usual PsychoPy boilerplate hidden context manager.Add Spaceship use mouse move along bottom screen.Create Alien whole AlienArmada.Add Laser, LaserGun, player can fire many laser shots pressing left mouse key.Add check hitting aliens laser teleporting screen.Use mixin add teleport sound.Use cool iterators cycle lasers aliens.Make alien armada move.Check end--game.start, grab images use game space-invaders.zip, created specifically seminar Andrej Pastukhov, said absolutely must look link: Wie die Pixelarts meines Sohnes Andrej entstanden sind103.","code":""},{"path":"space-invaders.html","id":"boilerplate-2","chapter":"16 Space invaders: mixins and duck typing","heading":"16.5 Boilerplate","text":"Create usual boilerplate external settings file via context manager GameAbort exception handling. can reuse code last game strongly suggest checking understand every step. suggestion window size 640×480 sprites 32×32 chose whatever looks good screen.Create GameContext GameAbort classes.\nPut boilerplate code code01.py.","code":""},{"path":"space-invaders.html","id":"the-spaceship","chapter":"16 Space invaders: mixins and duck typing","heading":"16.6 The spaceship","text":"Create new file Spaceship class. remarkably boring just image moves left-right horizontal line. Thus, create descendant ImageStim class. method need define right now constructor __init__(). take Window image filename (stored settings) parameters (plus compulsory self, course) call super().__init__(...) initialize via inherited constuctor. Apart two parameters , also need specify initial position ship via pos. ship somewhere just lower edge window. , vertical position -0.9 worked quite nicely.main code, create object draw main loop.Create Spaceship class separate file.\nUse code02.py.","code":""},{"path":"space-invaders.html","id":"the-spaceship-moves","chapter":"16 Space invaders: mixins and duck typing","heading":"16.7 The spaceship moves","text":"Now, let us use mouse control horizontal position ship , later , left button shoot. First, initialize mouse context manager, one attributes (can use ctx.mouse). , main loop, use getPos() method get position mouse use horizontal component alter position ship. Note assign just horizontal vertical components position via .pos[0] = .... PsychoPy 2021.1.4 generate error change actual position either. Thus, need assign tuple (new horizontal component, original vertical component) (ship stay vertical position throughout game). Test moving spaceship around. can make mouse invisible (see documentation) make immersive.Add mouse GameContext\nUse mouse move ship code03.py.","code":""},{"path":"space-invaders.html","id":"an-alien-appears","chapter":"16 Space invaders: mixins and duck typing","heading":"16.8 An alien appears","text":"create alien armada, let us create single alien. class basic, , put Alien AlienArmada file (, think filename). class similar Spaceship. differences take (pass) pos parameter (unlike spaceship always appears location) image randomly picked tuple filenames (alien-1.png alien-2.png, names defined settings “aliens” group settings). testing, place aliens arbitrary locations screen check alien image randomly picked. forget draw main loop.Create Alien class\nUse code04.py.","code":""},{"path":"space-invaders.html","id":"using-names-to-indicate-access-restrictions","chapter":"16 Space invaders: mixins and duck typing","heading":"16.9 Using names to indicate access restrictions","text":"create alien armada, need make quick detour talk naming conventions attributes names classes. Unlike languages, Python private attributes methods, .e., attributes methods accessible inside object. come Java C#/C++, thought can call method modify attribute outside give chills, becomes impossible predict object’s behavior. Python “solves” access problem via “gentlemen’s agreement” methods attributes whose names start either __ _ considered private. words, use directly. case __, also prevented straightforward way, name mangled. example , access __color attribute directly:Python truly private attributes, can still access via mangled nameobject._<ClassName><hidden attribute name>:However, last resort sort thing use absolutely must access attribute method , hopefully, know .noted , can also come across attributes single leading underscore name, e.g. _color. weak “internal use” indicator, fully visible. However, leading underscore hint attribute method considered private. , see attribute like _color, pretend know existence , therefore, never read modify directly. course, agreement, can always ignore work attribute directly104. However, almost certainly break code unexpected hard--trace ways.","code":"class ExampleClass:\n  def __init__(self):\n    self.__color = \"red\"\n\nexample = ExampleClass()\n\n# raises AttributeError\nprint(example.__color)\n#> 'ExampleClass' object has no attribute '__color'example._ExampleClass__color\n#> 'red'"},{"path":"space-invaders.html","id":"an-alien-armada-appears","chapter":"16 Space invaders: mixins and duck typing","heading":"16.10 An alien armada appears","text":"One alien neither scary, challenging enough. want ! , create AlienArmada class twist. responsible creating grid aliens, moving around (chance learn special setter methods), allowing outside processes iterate (iterator duck typing), reporting number remaining aliens (length duck typing). usual, one step time.Start creating AlienArmada class, Alien class. initial version following methodsa compulsory constructor,spawn() creates places individual aliens,draw() draws aliens,attributeswin PsychoPy window,__pos tuple position armada center within window,aliens list alien objects.must also expand settings. now already Aliens settings section alien images’ filenames. define armada, need also need add\"Initial position\": center armada, ’ve picked [0, 0.5] can always optimize later .\"Grid size\": number aliens horizontally vertically, ’ve used `[7, 3].\"Grid step [norm]\": distance aliens “norm” units, ’ve picked 0.2.Constructor: create place aliens separate method spawn(), constructor simple. far parameters concerned, need pass Window creating Alien objects dictionary armada-specific settings. Store attributes later use, initialize __pos \"Initial position\", initialize aliens empty list spawn() (, attributes must initialized constructor, even empty list None).spawn() create aliens grid based \"Grid size\" \"Grid step [norm]\" settings, centered AlienArmada’s position (__pos). aliens go aliens attribute, course. Remember need list file names visuals covered settings. look like :Create AlienArmada class.\nUse code05.py.","code":""},{"path":"space-invaders.html","id":"a-laser-shot-appears","chapter":"16 Space invaders: mixins and duck typing","heading":"16.11 A laser shot appears","text":"Now need create Laser class (separate file). Eventually, player presses left mouse button, laser appear location just ship fly certain speed. per usual, parameters laser (LaserCannon) stored settings file separate section (e.g., laser). moment, need specify speed [norm/sec] (laser shot speed norm units per second, ’ve picked 1 norm / second, takes 2 seconds shot fly across screen)) , optionally, filename laser bitmap (also hardcoded, one image).Let us take care first step: creating laser shot just sheep. Create Laser class descendant ImageStim (just like Spaceship Alien classes). take win, pos, speed arguments call ancestor constructor. pos argument position ship (fired ) laser must appear , need adjust pos[1] (hint, can get window height win.size[1] know sprites 32 pixels high). speed norm units per second settings. need save speed value attribute later use.testing, create laser object right create ship draw main loop. won’t move able see whether ’ve got height right.Create Laser class.\nUse code06.py.","code":""},{"path":"space-invaders.html","id":"the-laser-shot-flies","chapter":"16 Space invaders: mixins and duck typing","heading":"16.12 The laser shot flies","text":"Let us add fly() method laser. simple, every time called laser move upwards. Moonlander game, need clock measure time elapsed updates, create attribute constructor. fly() method, need figure time elapsed since last call since shot created (don’t forget reset timer ) move shot based speed elapsed time.Remember call fly() method main loop see laser flies screen.Add fly() method Laser class.\nUse code07.py.","code":""},{"path":"space-invaders.html","id":"we-want-more-lasers","chapter":"16 Space invaders: mixins and duck typing","heading":"16.13 We want more lasers!","text":"Now create LaserGun class take care individual laser shots. 1) create new Laser object whenever fire() , 2) ensure overheat allowing one shot every N seconds (another parameter defined settings file, let’s say 0.3 s), 3) call draw() fly() methods laser shots. create class LaserGun file Laser.constructor, pass PsychoPy window variable dictionary laser gun specific settings (include speed specified earlier cool period seconds) store attributes later use. Initialize lasershots attribute empty list, create cool timer.fire() method take position ship single parameter. enough time passed since last shot (check cool timer ), create new Laser supplied position, add lasershots list, reset cool timer. draw()/fly() simply draw/fly lasershots.testing, use LaserGun place Laser. draw() fly() methods calling already. main loop, check left mouse button pressed. , fire() laser gun, passing current position ship .Create LaserGun class.\nTest code08.py.","code":""},{"path":"space-invaders.html","id":"too-many-lasers","chapter":"16 Space invaders: mixins and duck typing","heading":"16.14 Too many lasers!","text":"need lasers fly screen, remove . First, need know Laser shot expired“: screen (section) hit target (next section). , modify Laser class adding expired attribute set initially False (shot good). addition, write new method check_screen_limits() set expired = True shot upper edge window leaves expired (unmodified!) otherwise (shot within screen get expired hit alien).Next, add cleanup() method LaserGun class call check_screen_limits() shots remove expired ones. simple tricky! Conceptually simple: loop lasershots delete object expired. easy way via list comprehension (deleting objects including updated list) didactic reasons use del instead. list want delete second element, writeHowever, catch. Imagine want delete second forth elements, result [1, 3, 5]. just delete second forth elements, won’t get want:see ? Solution: start deleting end, way indexes earlier elements won’t affected:Note must use del list[index] format, need use indexing loop cleanup() method:Add cleanup() call main loop right fly() automatically delete expired shots. fired shots screen, put breakpoint check .lasershots empty (cleanup() works ).Add expired property Laser.\nAdd cleanup() method LaserShot.\nUse cleanup() code09.py.","code":"x = [1, 2, 3, 4, 5]\ndel x[1]\nprint(x)\n#> [1, 3, 4, 5]x = [1, 2, 3, 4, 5]\ndel x[1]\ndel x[3]\nprint(x)\n#> [1, 3, 4]x = [1, 2, 3, 4, 5]\ndel x[3]\ndel x[1]\nprint(x)\n#> [1, 3, 5]for ishot in backwards-index-built-via-the-range-function:\n  check if lasershot has left the screen\n  if self.lasershots[ishot] needs to be deleted:\n    delete that self.lasershots[ishot]"},{"path":"space-invaders.html","id":"i-am-hit-i-am-hit","chapter":"16 Space invaders: mixins and duck typing","heading":"16.15 I am hit! I am hit!","text":"Now need check whether lasershot hit alien. case, relevant aliens shots must removed. Removing lasershots easy: just set expired cleanup() rest. Clearly, need mechanism aliens.Add hit attribute Alien class initialize False (alien initially hit). AlienArmada class, implement cleanup() method, analogous one LaserGun delete alien hit. Add call main loop location LaserGun. can test setting hit True one aliens missing.Now actual check. loop aliens laser shots attributes AlienArmada LaserGun checking every pair whether overlap. , set laser shot expired alien hit. check clean laser shots fly.Test !Update Alien AlienArmada classes\nCheck laser shots hitting aliens\ncode10.py, .","code":""},{"path":"space-invaders.html","id":"duck-typiing-iterators","chapter":"16 Space invaders: mixins and duck typing","heading":"16.16 Duck typiing iterators","text":"precious exercise, used aliens lasershots attributes directly loop. However, let us inject coolness code turn AlienArmada LaserGun classes iterators. Recall need implement two special methods : __iter__(self) __next__(self)__. first one, initializes loop, second one yields next item. actual implementation simple. need create new attribute used track item need yield, call iter initialize None constructor.__iter__(self), initialize counter 0 return self: returning reference iterator, object itself105. __next__(self), check iter within (aliens lasershots) list length. (.e., ran aliens/shots iterate ), raise StopIteration. , increase iteration counter return element indexing : Think need return self.aliens[self.iter - 1] rather self.aliens[self.iter] can use different starting value range check avoid .classes use loops directly, .e. looping aliens laser instead aliens.aliens laser.lasershots.Test ! work , course, cooler duck typing inside!Turn LaserGun AlienArmada iterators.\nUse iterators code11.py.","code":""},{"path":"space-invaders.html","id":"gotem-all","chapter":"16 Space invaders: mixins and duck typing","heading":"16.17 Got’em all!","text":"Now, implement __len__() method AlienArmada class returns number remaining aliens. main loop, use via len() function check whether won: aliens left, game . Use len() object, aliens list attribute!Add __len__() special method AlienArmada class.\nUse check whether aliens hit\ncode12.py.","code":""},{"path":"space-invaders.html","id":"ping","chapter":"16 Space invaders: mixins and duck typing","heading":"16.18 Ping!","text":"Now let us use HitSoundMixin class defines single hit() method (constructor!) plays teleport.wav sound106 materials. can single line method create play sound one go, temporary variable attribute required. use ancestor Alien class, hit() method. Call set hit True.Create HitSoundMixin class.\nMix Alien class.\nUse code11.py.","code":""},{"path":"space-invaders.html","id":"getter-setter","chapter":"16 Space invaders: mixins and duck typing","heading":"16.19 Virtual attributes via getters and setters","text":"next detour learn can create private attribute (within limits Python, course). Recall __pos attribute AlienArmada class defines location. catch changing position armada means changing position aliens constitute armada. means need write method receive new position armada updates __pos attribute positions individual aliens. exactly getter/setter methods . declared via special decorators107: @property @<name>.setter. already know former one used compute value --fly. also used get value “private” attribute, called “getter” method. latter decorator, “setter” method sets new value private attribute. idea using together isolate actual attribute value outside influence. particularly helpful, need control whether new value attribute valid one, needs converted, additional processing, etc. example, color attribute rectangle stimulus uses approach, can take RGB triplets, hexadecimal codes, plain color names value set color correctly.sketch work virtual attribute color. One typically creates internal attribute almost name, e.g., _color __color. value stored read internal attribute getter setter methods:Note actual attribute color108, yet, code works exists.another twist story. define getter @property method setter method, hidden property read-only109!","code":"class ExampleClass:\n\n  def __init__(self):\n    self.__color = \"red\"\n\n  @property\n  def color(self):\n    \"\"\"\n    This is a getter method for virtual color\n    attribute.\n    \"\"\"\n    # Here, we simply return the value. But we could \n    # compute it from some other attribute(s) instead.\n    return self.__color\n    \n  @color.setter # not the most elegant syntax, IMHO\n  def color(self, newvalue):\n    \"\"\"\n    Note that the setter name has THE SAME name as the getter!\n    It sets a new value and does not return anything.\n    \"\"\"\n  \n    # Here, you can have checks, conversion, \n    # additional changes to other attributes, etc.\n    self.__color = newvalue\n    \n    \nexample = ExampleClass()\n\n# get the value, note the lack of () after color\nprint(example.color)\n\n# set the value\nexample.color = \"blue\""},{"path":"space-invaders.html","id":"the-alien-armada-jumps","chapter":"16 Space invaders: mixins and duck typing","heading":"16.20 The alien armada jumps","text":"Currently, aliens sitting ducks. fun! need get move . can move alien armada around, need able change position. let us write getter/setter methods . start , define getter, needs return value hidden position attribute.Now complicated , hence, fun bit! Remember, need move individual aliens relative center armada. ,compute change position based current new value,use alter position individual aliens based current position,store new position private attribute.Test making armada jump random location every time press space button. armada keep formation!Implement getter/setter methods __pos AlienArmada.\nTest code12.py.","code":""},{"path":"space-invaders.html","id":"the-alien-armada-moves","chapter":"16 Space invaders: mixins and duck typing","heading":"16.21 The alien armada moves","text":"alien armada move downwards along sine trajectory:\\[x = x_{max} \\cdot sin(2 \\pi f \\cdot (y-y_{origin})) \\]\n\\(x_{max}\\) maximal deviation center armada middle screen (’ve set \\(0.25\\)), \\(f\\) frequency, .e., fast horizontal movement (’ve set \\(3\\) can see much slower \\(1\\) plot ), \\(y\\) current vertical coordinate armada \\(y_{origin}\\) initial one (\\(0.5\\) case). parameters, part settings file plus vertcal speed [norm/sec] defines fast armada fly (set 0.1, takes 15 seconds fly ).armada fly, need add timer (constructor) define fly() method thatcomputes times since armada creationcomputes current vertical position based starting location, elapsed time (timer), vertical speed defined settingscomputes current horizontal position given formula relevant settingsupdates current position via simple self.pos = (new_x, new_y) (setter method take care rest)main loop, call fly() call laser gun.Add fly() method AlienArmada class.\nUse code13.py.","code":""},{"path":"space-invaders.html","id":"the-alien-armada-wins-crash","chapter":"16 Space invaders: mixins and duck typing","heading":"16.22 The alien armada wins: crash!","text":"far, player always wins. Let us make dangerous! lose either alien crashes spaceship armada goes past ship. Implement former way checked whether laser shot hit alien: loop aliens see overlap spaceship (game ). Implement test.Implement crash--ship code14.py.","code":""},{"path":"space-invaders.html","id":"the-alien-armada-wins-missed-them","chapter":"16 Space invaders: mixins and duck typing","heading":"16.23 The alien armada wins: missed them!","text":"second way lose game, least one alien got past ship. , need check position lowest alien lower spaceship, game . can loop checking hit , didactic reasons, let us practice @proprety bit . Implement new computed (read-) property lowest_y AlienArmada class return y-coordinate lowest alien armada. need loop individual aliens find lowest y return . different ways , come one ! main code, add check make sure game , aliens got past player.Add lowest_y computed property AlienArmada class.\nUse code15.py.","code":""},{"path":"space-invaders.html","id":"mixin-teleport","chapter":"16 Space invaders: mixins and duck typing","heading":"16.24 Mixin teleport","text":"Mix teleport sound method Spaceship play alien crashed .Mix teleport Spaceship class.\nUse code16.py.","code":""},{"path":"space-invaders.html","id":"game-over-message","chapter":"16 Space invaders: mixins and duck typing","heading":"16.25 Game over message","text":"Create blinking game message reflect outcome. Something like use imagination:“Congrats!”, player won.“Crash! Boom! Bang!”, player hit.“got away!”, armada got past player.One way simplify life rename gameover variable gamestate variable. Initially, \"playing\", loop repeats gamestate == \"playing\". , can set based type event (\"victory\" player wins, \"hit\" hit armada, \"missed\" aliens got away) use main loop determine message show. Better still, use dictionary instead -else. “cheat” store message variable .Put updated code code17.py.","code":""},{"path":"space-invaders.html","id":"we-want-more","chapter":"16 Space invaders: mixins and duck typing","heading":"16.26 We want more!","text":"solid game can improved many ways. Score? Difficulty? levels? Aliens shooting back ? Anything possible!","code":""},{"path":"game-of-life-numpy.html","id":"game-of-life-numpy","chapter":"17 Game of life (NumPy)","heading":"17 Game of life (NumPy)","text":"Today programming Game Life created British mathematician John Horton Conway. really game rather simulation set initial conditions observe population evolves. rules, described Wikipedia, simple:live cell two three live neighbors survives.dead cell three live neighbors becomes live cell.live cells die next generation. Similarly, dead cells stay dead.Despite rules simplicity produce remarkable evolution cell culture give rise many dynamic static configurations. example simulation random starting state.","code":""},{"path":"game-of-life-numpy.html","id":"implementing-the-rules","chapter":"17 Game of life (NumPy)","heading":"17.1 Implementing the rules","text":"program game, need count live neighbors every cell use rules decide whether alive dead next iteration. latter bit important, need evaluate cells current state, change status period. Accordingly, iteration need create new cell culture overwrite original one.cells live rectangular world, need count number neighbors 8 cells around , shown left hand-side image (index / location dot question assumed , j).However, things become slightly trickier, cell lies border world, depicted right hand-side. rules living dying still apply counting neighbors need make sure try access cells outside world (marked red). mess indexing, best get error, worst access wrong elements. E.g., index negative, Python issue mistake simply count elements end.","code":""},{"path":"game-of-life-numpy.html","id":"numpy","chapter":"17 Game of life (NumPy)","heading":"17.2 NumPy","text":"cells live 2D grid can implement list lists. start implementation see using matrix (2D array) natural. also gives us opportunity learn NumPy provides powerful fast implementation multidimensional arrays numerous mathematical tools. one core non-standard (.e., included base Python distribution) libraries prominent expected use via alias rather full name:try properly cover NumPy , simply vast. Rather, purpose make aware opportunities NumPy provides. material contain just bare minimum need game. suggest read quickstart guide NumPy continuing ready consult absolute basics beginners whenever questions manipulating arrays.","code":"import numpy as np"},{"path":"game-of-life-numpy.html","id":"boilerplate-3","chapter":"17 Game of life (NumPy)","heading":"17.3 Boilerplate","text":"Implement usual PsychoPy boilerplate external settings context manager. context manager initialize PsychoPy window mouse, whic use later draw erase individual cells. size window need depends grid size cells live size individual cells. Define three parameters - grid width [cells], grid height [cells], cell size [pix] - settings file compute window size fly. ’ve picked 30 30 grid cell measuring 10 pixels (widht height, cells square).Create GameContext GameAbort classes.\nPut boilerplate code code01.py.","code":""},{"path":"game-of-life-numpy.html","id":"visualizing-an-array","chapter":"17 Game of life (NumPy)","heading":"17.4 Visualizing an array","text":"use 2D Numpy array encode cells: \\(1\\) mean living cell \\(0\\) mean empty space. create array, need think visualize . least three ways can PsychoPy. First, can create Rect (visual primitive even image) cell draw one--one loop. However, extremely inefficient slow. Second, can effectively one-primitive-per-cell via efficiently implemented ElementArrayStim class. Finally, can use cool feature ImageStim class. far, used names external files image input can also take 2D NumPy array display image. use latter approach, simplest.Let us start 1) creating 2D grid, 2) converting 3D image (RGB color space, PsychoPy expects one 2D grid values per channel), 3) displaying via ImageStim.","code":""},{"path":"game-of-life-numpy.html","id":"a-random-matrix","chapter":"17 Game of life (NumPy)","heading":"17.5 A random matrix","text":"different ways create matrices (2D arrays) NumPy, see Creating matrices. , generate matrix via NumPy random generator also experiment generating empty grid via numpy.zeros() fully crowded one via numpy.ones().Consult documentation figure generate grid integers range \\(0\\) \\(1\\) (hint, take look second example covers generating integer values) creating matrix given size (hint, take look third example). suggest playing code Jupyter notebook starting small size grid (easily see output, 3×4 grid ).","code":"#> Grid shape:  (3, 4)\n#> [[0 1 1 0]\n#>  [1 0 0 1]\n#>  [1 0 1 0]]"},{"path":"game-of-life-numpy.html","id":"from-2d-to-3d","chapter":"17 Game of life (NumPy)","heading":"17.6 From 2D to 3D","text":"State cells represented 2D NumPy array size [width, height] ImageStim expects 3D array size [width, height, 3] defines image RGB color space. simplest way game stack 2D array three times. Zeros channels give us black (empty space), whereas ones channels (mixture maximal red, green, blue) add white. , experiment Jupyter notebook making sure output shape 3D array correct.","code":"#> 3D grid shape:  (3, 3, 4)\n#> [[[0 1 1 0]\n#>   [1 0 0 1]\n#>   [1 0 1 0]]\n#> \n#>  [[0 1 1 0]\n#>   [1 0 0 1]\n#>   [1 0 1 0]]\n#> \n#>  [[0 1 1 0]\n#>   [1 0 0 1]\n#>   [1 0 1 0]]]"},{"path":"game-of-life-numpy.html","id":"correct-values-range","chapter":"17 Game of life (NumPy)","heading":"17.7 Correct values range","text":"almost ready use 3D array image values go \\(0\\) \\(1\\), whereas default RGB color space PsychoPy expects values go \\(-1\\) (black) \\(1\\) (white). Thus, need rescale entire array via basic algebra. good news NumPy build idea vectorization operations, .e., need apply operation one element time (Python list) entire array .per usual, experiment notebook check values turn expected:","code":"import numpy as np\na = np.array([1, 2, 3, 4])\na + 10\n#> array([11, 12, 13, 14])\n\na * 10\n#> array([10, 20, 30, 40])#> [[[-1  1  1 -1]\n#>   [ 1 -1 -1  1]\n#>   [ 1 -1  1 -1]]\n#> \n#>  [[-1  1  1 -1]\n#>   [ 1 -1 -1  1]\n#>   [ 1 -1  1 -1]]\n#> \n#>  [[-1  1  1 -1]\n#>   [ 1 -1 -1  1]\n#>   [ 1 -1  1 -1]]]"},{"path":"game-of-life-numpy.html","id":"showing-an-image","chapter":"17 Game of life (NumPy)","heading":"17.8 Showing an image","text":"Finally, ready create show image! Use code Jupiter notebook generate random grid size [grid width, grid height] (settings), stack , rescale . , simply create ImageStim passing array image make sure image spans entire window (size , given \"normal\" units?) draw main loop. Put break point use debug console watch tab check whether image screen correspond original 2D grid.Create random grid show code02.py.","code":""},{"path":"game-of-life-numpy.html","id":"slicing-a-border-problem","chapter":"17 Game of life (NumPy)","heading":"17.9 Slicing a border problem","text":"grid--image conversion woods yet. problem cells live next border. trouble now become one, start counting neighbors. , recall need count neighbors around cell cells border means trouble indexes.\nextra careful indexing , simpler solution: padding grid zeros. way, can use rules inner cells never check modify empty padding.\nsolution still requires extra work. Namely, need generate empty 2D grid 2 elements wide taller need, fill inner part random \\(0\\) \\(1\\), use inner part stacking 3D array image. using Python lists, need use nested loops NumPy’s indexing slicing makes easy.works 3×3 array.first index (called axis NumPy) row second columns. can get second row specifying index alone (indexes given, NumPy assumes want elements along axes)., can explicit via :, : alone means “elements along axis”Similarly, can extract entire last column (negative indexes work way Python lists) notice need explicitly mention row axis case:Even better, can easily extract rectangular part 2D matrix specifying rows columns. Note omitting either start stop value means, respectively, first till last element.Finally, can used extract values array also modify :information enough get going NumPy’s documentation indexing definitely worth read, need use frequently.","code":"a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\na\n#> array([[1, 2, 3],\n#>        [4, 5, 6],\n#>        [7, 8, 9]])a[1]\n#> array([4, 5, 6])a[1, :]\n#> array([4, 5, 6])a[:, -1]\n#> array([3, 6, 9])a[:2, -2:]\n#> array([[2, 3],\n#>        [5, 6]])a[-2:, 1:] = np.zeros((2, 2))\na\n#> array([[1, 2, 3],\n#>        [4, 0, 0],\n#>        [7, 0, 0]])"},{"path":"game-of-life-numpy.html","id":"padding-with-zeros","chapter":"17 Game of life (NumPy)","heading":"17.10 Padding with zeros","text":"Now know slice 2D array, let us redo sequence:generate grid full zeros two elements wide taller need.Fill inner part (excluding extra padding) random \\(0\\) \\(1\\).Stack rescale inner part 3D RGB array need PsychoPy image.Create display image.Generate zero-padded random grid show code03.py.","code":""},{"path":"game-of-life-numpy.html","id":"cell-culture","chapter":"17 Game of life (NumPy)","heading":"17.11 Cell culture","text":"Now required pieces, wrap nicely CellCulture class. displaying cells image, makes sense make descendant ImageStim. constructor, need PsychoPy window dictionary settings (know grid size). less copy-paste code code03.py constructor use parent constructor initialize generated random grid. However, need perform 1) extract inner part, 2) stack 3D, 3) assign image every iteration (updated cell culture), makes sense spin separate method (e.g., set_image_from_array()). Thus, can generate zero-padded grid, initialize parent without image argument (PsychoPy allows ) window size, call set_image_from_array()).Replace code main script new class. work .Create CellCulture class\nUse code04.py.","code":""},{"path":"game-of-life-numpy.html","id":"counting-neigbors-single-cell-nested-loops-edition","chapter":"17 Game of life (NumPy)","heading":"17.12 Counting neigbors, single cell nested-loops edition","text":"Recall rules, need count live neighbors cell decide whether lives (gets born) dies (location remains empty). Let us implement single cell first via nested loops via slicing. suggest experiment debug Jupiter notebook transfer code CellCulture class ready. illustrate using zero-padded 5×5 grid.Let us count neighbors cell location \\((2, 2)\\) (, third row third column). example grid generated using \\(1423\\) seed random generator, \\(4\\).Assume cell identified via icell_row icell_col use nested loops count neighbors (think values relative indexes need loop ). Note cell count. can either use -else alternative solution count everybody subtract value cell . Implement code try different icell_row icell_col. Specifically test live cells, e.g., \\((2, 3)\\) get four neighbors five.","code":"rng = np.random.default_rng(1423)\ngrid = np.zeros((7, 7))\ngrid[1:-1, 1:-1] = rng.integers(low=0, high=2, size=(5, 5))\ngrid.astype(int)\n#> array([[0, 0, 0, 0, 0, 0, 0],\n#>        [0, 0, 1, 1, 0, 1, 0],\n#>        [0, 0, 0, 1, 1, 0, 0],\n#>        [0, 1, 0, 0, 1, 1, 0],\n#>        [0, 1, 1, 1, 0, 0, 0],\n#>        [0, 1, 0, 0, 1, 1, 0],\n#>        [0, 0, 0, 0, 0, 0, 0]])"},{"path":"game-of-life-numpy.html","id":"slicing-neigbors-of-a-single-cell","chapter":"17 Game of life (NumPy)","heading":"17.13 Slicing neigbors of a single cell","text":"Nested loops fun slicing powers NumPy make everything even easier. count neighbors, need extract rectangular part matrix, much way dropped zero-padding. difference rectangular part defined relative cell. One one hand, can easily generate slicing fly relative icell_row icell_col: grid[(compute start row):(compute end row), (compute start col):(compute end col)]. Just start cells row column current one end one current one. Make sure put brackets around expression start stop values, necessary Python110 make easier read . Also, remember start index inclusive stop index exclusive (just rest Python). nice array extracted:didactic purposes, let us learn different way build relative index via numpy.meshgrid(). allows create two matrices corresponding cell cover possible combinations:Use function create 3×3 grids relative indexes rows columns (called irel_rows irel_cols). can hard code relative indexes (better) use numpy.arange() generate sequence.\ncompute absolute index using icell_row icell_col.sliced neighbors now need count via numpy.sum() , equivalently via sum() method array. tend use function purely matter taste (, likely, habit), pick one like.example subset, get","code":"#> [[0 1 1]\n#>  [0 0 1]\n#>  [1 0 0]]a, b = np.meshgrid([1, 2], [3, 4])\nprint(\"a\\n\", a)\n#> a\n#>  [[1 2]\n#>  [1 2]]\nprint(\"\\nb\\n\", b)\n#> \n#> b\n#>  [[3 3]\n#>  [4 4]]#> [[0 0 1]\n#>  [1 0 0]\n#>  [1 1 0]]print(np.sum(grid))\n#> 14.0\nprint(grid.sum())\n#> 14.0#> Neighbor count for the example cell:  4.0"},{"path":"game-of-life-numpy.html","id":"live-and-let-die","chapter":"17 Game of life (NumPy)","heading":"17.14 Live and let die","text":"Now code count neighbors, let us count inner cells. Create new zeros matrix hold neighbor counts (size grid ) loop every inner cell, computing number neighbors storing new matrix. answer random grid . Use code generate , can check whether get answer also good idea just count cells check answer indeed correct.information whether cell alive dead grid matrix information neighbor count neighbors. Now can use comparison logical operation implement rules. Comparisons easy, work way applied entire array:logical replaced & | work way. thing keep mind comparisons must wrapped brackets (otherwise get error)want ones zeros, integers rather logical values. can easily convert entire array via .astype() method:Now everything need implement first rule: cell must alive \\(2\\) \\(3\\) neighbors. output matrix:Rule number two: cell must dead \\(3\\) neighbors.Finally, cell get live either rule #1 rule #2 worked :final output new cell culture can assign back grid. Implement steps carefully double111 check numbers match. Try different random grids go hand make sure everything correct (boring vital part programming, afraid).","code":"#> [[0 0 0 0 0 0 0]\n#>  [0 1 2 3 4 1 0]\n#>  [0 2 4 4 5 4 0]\n#>  [0 2 5 5 4 2 0]\n#>  [0 3 4 3 5 4 0]\n#>  [0 2 4 3 2 1 0]\n#>  [0 0 0 0 0 0 0]]a = np.arange(-3, 4)\nprint(a)\n#> [-3 -2 -1  0  1  2  3]\nprint(a < 0)\n#> [ True  True  True False False False False]a = np.arange(-3, 4)\nb = np.array([1, 0, 1, 0, 1, 0, 1])\n\nprint((a < 0 ) & (b == 1))\n#> [ True False  True False False False False]\nprint((a < 0 ) | (b == 1))\n#> [ True  True  True False  True False  True](a < 0)\n#> array([ True,  True,  True, False, False, False, False])\n(a < 0).astype(int)\n#> array([1, 1, 1, 0, 0, 0, 0])#> [[0 0 0 0 0 0 0]\n#>  [0 0 1 1 0 0 0]\n#>  [0 0 0 0 0 0 0]\n#>  [0 1 0 0 0 1 0]\n#>  [0 1 0 1 0 0 0]\n#>  [0 1 0 0 1 0 0]\n#>  [0 0 0 0 0 0 0]]#> [[0 0 0 0 0 0 0]\n#>  [0 0 0 0 0 0 0]\n#>  [0 0 0 0 0 0 0]\n#>  [0 0 0 0 0 0 0]\n#>  [0 0 0 0 0 0 0]\n#>  [0 0 0 1 0 0 0]\n#>  [0 0 0 0 0 0 0]]#> [[0 0 0 0 0 0 0]\n#>  [0 0 1 1 0 0 0]\n#>  [0 0 0 0 0 0 0]\n#>  [0 1 0 0 0 1 0]\n#>  [0 1 0 1 0 0 0]\n#>  [0 1 0 1 1 0 0]\n#>  [0 0 0 0 0 0 0]]"},{"path":"game-of-life-numpy.html","id":"update-cell-culture","chapter":"17 Game of life (NumPy)","heading":"17.15 Update cell culture","text":"covered lot ground now everything implement update() method CellCulture method:Count neighbors.Apply rules generate new culture.Put new culture grid attribute (however called ).Transfer grid image (method ).main code, call update method every frame see cells evolve!Add update method CellCulture class\nUse code05.py.","code":""},{"path":"game-of-life-numpy.html","id":"pause","chapter":"17 Game of life (NumPy)","heading":"17.16 Pause","text":"main loop, hopefully check escape key press end game (, !) Let’s also add check press space button “pause” “continue” simulation. .e., space toggle (invert) state logical variable (name ) determines whether update() method called.Implement pause/continue via space code06.py.","code":""},{"path":"game-of-life-numpy.html","id":"unleash-your-creativity","chapter":"17 Game of life (NumPy)","heading":"17.17 Unleash your creativity","text":"Random cultures fun , perhaps, idea try (e.g., see Wikipedia article example patterns blinkers gliders). Let us draw mouse (insisted attribute context), left button click (index \\(0\\)) adding living cell right button click (index \\(2\\)) erasing ., create new CellCulture method (called change()) takes new value (\\(0\\) \\(1\\), depending button) mouse position within window. method, compute row column index cell keeping mind 1) image spans entire image, 2) inner cells shown can clicked . indexes, assign new value grid. testing, pause game, draw patterns, restart see go!Add change() method CellCulture\nUse mouse inputs change() code07.py.","code":""},{"path":"game-of-life-numpy.html","id":"done-for-today","chapter":"17 Game of life (NumPy)","heading":"17.18 Done for today","text":"learned quite things NumPy implemented cool simulation. Next time, learn Numpy combining useful ElementArrayStim teased .","code":""}]
