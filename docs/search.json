[{"path":"index.html","id":"intro","chapter":"1 Introduction","heading":"1 Introduction","text":"book teach programming. Hopefully, fun way something satisfying playing video game creating one. Although written course called “Python social experimental psychology”, main aim teach Python per se. Python fantastic tool (later) just one many programming languages exist. ultimate goal help develop general programming skills, depend specific-programming language, make sure form good habits make code clear, easy read, easy maintain. last part crucial. Programming writing code works. , obviously, must true minimal requirement. Programming writing clear easy--read code others , even importantly, -two-weeks later can understand.","code":""},{"path":"index.html","id":"prerequisites","chapter":"1 Introduction","heading":"1.1 Prerequisites","text":"material assumes foreknowledge Python programming reader. purpose gradually build knowledge allow create complex games.","code":""},{"path":"index.html","id":"why-games","chapter":"1 Introduction","heading":"1.2 Why games?","text":"actual purpose course teach psychology social studies students program experiments. real research . However, little practical difference two. basic ingredients , arguably, experiments just boring games. , assured, can program game, can certainly program experiment.","code":""},{"path":"index.html","id":"why-should-a-psychologist-learn-programming","chapter":"1 Introduction","heading":"1.3 Why should a psychologist learn programming?","text":"psychologist, interested people, learn program computers? obvious questions useful skill. able program gives freedom create experiment answers research question, experiment can implemented given constraints software.importantly, least point view, learning programming changes way think general. People smart computers dumb. explain experiment travel plans somebody, can fairly vague, make minor mistake, even skip certain parts. People smart fill missing information knowledge, spot correct mistake, ask information, can improvise encounter something covered. Computers dumb, must precise, gray areas, leave anything “figure happens” (won’t). personal experience, corroborated psychologists learned programming, makes realize just vague imprecise people can without realizing . Programming forces precise thorough, plan ahead eventuality might . useful skill can applied activity requires planning experimental design travel arrangements.","code":""},{"path":"index.html","id":"why-python","chapter":"1 Introduction","heading":"1.4 Why Python?","text":"many ways create experiment psychological research. can use drag--drop systems either commercial like Presentation, Experiment Builder free like PsychoPy Bulder interface. much shallower learning curve, can start creating running experiments faster. However, simplicity use price: fairly limited stimuli can use can control presentation schedule, conditions, feedback, etc. Typically, allow extend programming desired behavior need know program (knowing Python supercharges PsychoPy experiments). Thus, think systems, particular PsychoPy, great tools quickly bang simple experiment together, useful understand create underlying code program . , limited software, know can program something default drag--drop won’t allow. time, can always opt , drag--drop sufficient faster. end, options creative freedom program experiment answer research question, experiment software allows program.learn programming Python, great language combines simple clear syntax power ability tackle almost problem. seminar, concentrate desktop experiments can use online experiments (oTree PsychoPy), scientific programming (NumPy SciPy), data analysis (pandas), machine learning (keras), website programming (django), computer vision (OpenCV), etc. Thus, Python one versatile programming tools can use stages research work. , Python free, need worry whether future employer able afford license fees (real problem, use Matlab).","code":""},{"path":"index.html","id":"seminar-specific-information","chapter":"1 Introduction","heading":"1.5 Seminar-specific information","text":"material Python social experimental psychology seminar taught University Bamberg. chapter covers single game, introducing necessary ideas accompanied exercises need complete submit. pass seminar, need complete assignments, .e., write games. need complete provide correct solutions exercises pass course information points exercises converted actual grade (need one) “pass” available seminar.material structured, chapter chapter section correspond single meeting. However, different, work pace. can read material submit assignments independently. provide detailed feedback assignment opportunity address issues resubmit loss points. Note feedback cover actual problems code way implemented solution nice-looking code . Remember, task just learn program working game write nice clear easy--read--maintain code1.important: hesitate ask questions. feel missed information material, point exact location. confused, ’ll gently prod questions solve problem. need information, ’ll supply . simply want know , ask ’ll explain things way suggest read. feel able solve issue without help, ’ll tell (although, still probably ask hinting questions).","code":""},{"path":"index.html","id":"about-the-material","chapter":"1 Introduction","heading":"1.6 About the material","text":"material free use licensed Creative Commons Attribution-NonCommercial-NoDerivatives V4.0 International License.","code":""},{"path":"software.html","id":"software","chapter":"2 Software","heading":"2 Software","text":"book seminar, need installPsychoPy comes bundled Python.IDE choice. instructions Visual Studio Code, good Python support.Jupyter Notebook trying small snippets code.give detailed instructions install necessary software rather point official manuals. makes text future-proof specific details might easily change2.","code":""},{"path":"software.html","id":"install-psychopy","chapter":"2 Software","heading":"2.1 PsychoPy","text":"Download install Standalone PsychoPy version. Use whatever latest (greatest) PsychoPy version suggested (PsychoPy 2021.2.3 using Python3.6 time writing) follow instructions.Note can also install PsychoPy anaconda package install official Python distribution add PsychoPy via pip. However, find standalone easier use necessary additional libraries. Plus, additional tools GUI-based experiment programming integration Pavlovia.org.","code":""},{"path":"software.html","id":"install-vs-code","chapter":"2 Software","heading":"2.2 VS Code","text":"Visual Studio Code free lightweight open-source editor strong support Python. Download installer platform follow instructions.Next, follow Getting Started Python VS Code tutorial. Skip Install Python interpreter section, already Python installation bundled PsychoPy. interpreter use Select Python interpreter section. case path C:\\Program Files\\PsychoPy3\\python.exe.Install enable linter, software highlights syntactical stylistic problems Python source code. Follow manual VS Code website.","code":""},{"path":"software.html","id":"jupyter-notebooks","chapter":"2 Software","heading":"2.3 Jupyter Notebooks","text":"Jupyter Notebooks offer convenient way mix text, figure code single document. also make easy play various small snippets parallel without running scripts. rely first chapter occasional exercises code testing later . two way can use : 1) VS Code using Jupyter extension, 2) browser using classical interface.","code":""},{"path":"software.html","id":"jupyter-notebooks-in-vs-code","chapter":"2 Software","heading":"2.3.1 Jupyter Notebooks in VS Code","text":"Follow manual install Jupyter package use notebooks VS Code.","code":""},{"path":"software.html","id":"jupyter-notebooks-in-anaconda","chapter":"2 Software","heading":"2.3.2 Jupyter Notebooks in Anaconda","text":"simplest way use Jupyter Notebooks along lot useful data science tools via Anaconda toolkit. However, note introduce second Python distribution system. , turn, lead confusion working scripts VS Code accidentally Anaconda interpreter active instead PsychoPy one. panic, follow Select Python interpreter instructions make sure PsychoPy interpreter active one.Otherwise, download install Anaconda. website excellent Getting started section.","code":""},{"path":"software.html","id":"files-folder","chapter":"2 Software","heading":"2.4 Keeping things tidy","text":"start, suggest create folder called games--python (something along lines). opted use Jupyter Notebooks via Anaconda, create user folder Anaconda expects find . , create new subfolder chapter / game. seminar, need zip upload folder files.","code":""},{"path":"programming-tips.html","id":"programming-tips","chapter":"3 Programming tips and tricks","heading":"3 Programming tips and tricks","text":"tips writing reading code. may sound cryptic read first time (become clear cover necessary material). feel like overkill simple projects implementing. suggest read section casually first time return frequently start program earnest. Unfortunately, tricks won’t work use ! always use become good habits, like using seat belt. seat belt nothing useful (hopefully, ) days wear might suddenly urgently become extremely useful can never sure happen. coding. Quite often tempted write “quick-n-dirty” code just “simple test,” temporary solution, prototype, pilot experiment, etc. , say Russia “nothing permanent temporary solution.” often , find toy code grew full blown experiment mess. want come back pilot experiment months ago realize easier start scratch understand monster works3. Thus, resist temptation! Form good habits future-grateful!","code":""},{"path":"programming-tips.html","id":"writing-tips","chapter":"3 Programming tips and tricks","heading":"3.1 Writing the code","text":"","code":""},{"path":"programming-tips.html","id":"use-a-linter","chapter":"3 Programming tips and tricks","heading":"3.1.1 Use a linter","text":"Linter program analyses code style highlights issues finds: spaces none, spaces , wrong names, overly long lines, etc. affect code runs following linter’s advice results consistent standard boring-looking4 Python code. Try address problems linter raised. However, use better judgment sometimes lines longer linter prefer readable two shorter ones. Similarly, “bad” variable name linter standards can meaningful name psychologist. Remember, code people, linter.","code":""},{"path":"programming-tips.html","id":"document-your-code","chapter":"3 Programming tips and tricks","heading":"3.1.2 Document your code","text":"Every time create new file: document update documentation whenever add/change/delete new functions classes. Every time create new function: document . New class: document . New constant: unless super clear name alone, document . learn NumPy way book.stress important documenting code . VS Code (editor use) smart enough parse NumPy docstring, show help whenever use functions (helps help !). importantly, writing documentation forces think formulate (human language!) function class , type arguments / attributes / methods , range valid values, defaults, function return, etc. often , realize overlooked important detail may apparent code .","code":""},{"path":"programming-tips.html","id":"add-some-air","chapter":"3 Programming tips and tricks","heading":"3.1.3 Add some air","text":"Separate chunks code empty lines. Think paragraphs normal text. wouldn’t want book single paragraph nightmare? Put comment chunk explains . E.g., typical PsychoPy-based game point draw stimuli redraw window. nice self-contained chunk can described # drawing stimuli. code provides details exactly drawn, drawing order, etc. single comment help understand chunk whether relevant moment. goes # processing key presses # checking gameover conditions, etc. careful make sure comment describes code correctly. E.g., comment says # drawing stimuli stimuli-drawing code anywhere else code something else!","code":""},{"path":"programming-tips.html","id":"write-your-code-one-teeny-tiny-step-a-time","chapter":"3 Programming tips and tricks","heading":"3.1.4 Write your code one teeny-tiny step a time","text":"motto “slow steady.” way guide games. Always start something extremely simple like static rectangle image. Make sure works. Add minor functionality: Change color, position, another rectangle, storing attribute, etc. Make sure works. Never go next step unless fully understand current code 100% certain5 behaves . tortoise-speed approach may feel silly overly slow still faster writing large chunk code trying make work. much easier solve simple problems one time lot simultaneously.","code":""},{"path":"programming-tips.html","id":"there-is-nothing-wrong-with-stackoverflow","chapter":"3 Programming tips and tricks","heading":"3.1.5 There is nothing wrong with StackOverflow","text":"Yes, can always try find solution problem StackOverflow6. time! However, use provided solution understand ! copy-paste code seems solve problem like . lucky, might work. , lucky, won’t work obvious manner. lucky, (sometimes) work incorrectly subtle way. , since really know code pasted , even confused. use StackOverflow source knowledge, source copy-pastable code!## Reading code {#reading-tips}\nReading code easy computers dumb smart. means instructions give computer must necessarily simple , therefore, easy understand human. Unfortunately, reading code also hard computers dumb smart. smart don’t even need read entire code understand , just read key bits fill gaps. Unfortunately, means tend read mistakes. unique programming, ever proofraed text, now hard find tipos. brain corrects fly using context read word , actually written7.experience programming general seminar particular problems get stuck simple point dumb obvious retrospect8. despair! , just consequence wonderfully brain wired pattern-recognition. several suggestions help make reading code robust.","code":""},{"path":"programming-tips.html","id":"think-like-a-computer","chapter":"3 Programming tips and tricks","heading":"3.1.6 Think like a computer","text":"Read code line--line “execute” way compute . Use pen--paper keep track variables. Trace chunks code can reached . Slow make sure understand line able keep track variables. easy spot mistake.","code":""},{"path":"programming-tips.html","id":"pretend-that-youve-never-seen-this-code-in-your-life","chapter":"3 Programming tips and tricks","heading":"3.1.7 Pretend that you’ve never seen this code in your life","text":"Assume idea code . wrote, quite often literally see mistake brain fills-details bends reality match expectations. know chunk code , instead reading skim , unless looks obviously terribly wrong, assume . Turning expectations hard immensely helpful.","code":""},{"path":"programming-tips.html","id":"do-not-search-only-under-the-street-lamp","chapter":"3 Programming tips and tricks","heading":"3.1.8 Do not search only under the street lamp","text":"Whenever using new code need implement something feels complicated code work , tend assume problem new fancy code. Simply new, fancy, complicated. , experience, error typically hide plain sight simpler “trivial” code nearby never properly look , simple trivial. Check everything, just places expect made mistake.","code":""},{"path":"programming-tips.html","id":"use-the-debugger","chapter":"3 Programming tips and tricks","heading":"3.1.9 Use the debugger","text":"book, learn pause execution game, can investigate state. Use knowledge! Put breakpoints execute code step--step. Check values variables using “Watch” tab. Use debug console check whether functions return results . complex conditions mathematical formulas, split small bits, copy execute bits debug console check whether numbers add . Make sure code chunk checks proceed analyze next one. Debugging particularly helpful identify code reached reached wrong moment.","code":""},{"path":"programming-tips.html","id":"zen-of-python","chapter":"3 Programming tips and tricks","heading":"3.2 Zen of Python","text":"found Zen Python good inspiration approach programming.","code":""},{"path":"python-basics.html","id":"python-basics","chapter":"4 Python basics","heading":"4 Python basics","text":"Hopefully, already created special folder book. Download exercise notebook, put chapter’s folder, open (see relevant instructions. need switch explanations exercises notebook, keep open.","code":""},{"path":"python-basics.html","id":"variables","chapter":"4 Python basics","heading":"4.1 Variables","text":"first fundamental concept need acquainted variable. Variables used store information can think box name tag, can put something . name tag box name variable value store . example, can create variable stores number legs game character . begin number typical human .Python, writeThe assignment statement simple structure:Variable name (name tag box) meaningful, can start letters _ can contain letters, numbers, _ symbol spaces, tabs, special characters, etc. Python recommends (well, actually, insists) use snake_case (lower-case, underscore spaces) format variable names. <value> right side complex story, can hard-coded (example ), computed using variables variable, returned function, etc.Using variables means can concentrate corresponding values mean rather worrying values . example, next time need compute something based number character’s legs (e.g., many pairs shoes character need), can compute based current value number_of_legs variable rather assume 1.Variables also give flexibility. values can change program run: player’s score increasing, number lives decreasing, number spells can cast grows falls depending use, etc. Yet, can always use value variable perform necessary computations. example, slightly extended number_of_shoes example.noted , can think variable labeled box can store something . means can always “throw away” old value put something new. case variables, “throwing away” part happens automatically, new value overwrites old one. Check , final value variable code ?exercise #1.already seen, can compute value instead specifying . answer ?exercise #2.","code":"number_of_legs = 2<variable-name> = <value># BAD: why 1? Is it because the character has two legs or\n# because we issue one pair of shoes per character irrespective of\n# their actual number of legs?\npairs_of_shoes = 1\n\n# BETTER (but what if our character has only one leg?)\npairs_of_shoes = number_of_legs / 2number_of_legs = 2\n\n# ...\n# something happens and our character is turned into an octopus\nnumber_of_legs = 8\n# ...\n\n# the same code still works and we still can compute the correct number of pairs of shoes\npairs_of_shoes = number_of_legs / 2number_of_legs = 2\nnumber_of_legs = 5\nnumber_of_legs = 1\nnumber_of_legsnumber_of_legs = 2 * 2\nnumber_of_legs = 7 - 2\nnumber_of_legs"},{"path":"python-basics.html","id":"assignments-are-not-equations","chapter":"4 Python basics","heading":"4.2 Assignments are not equations!","text":"important: although assignments look like mathematical equations, equations! follow important rule must keep mind understanding assignments: right side expression evaluated first final value computed, final value assigned variable specified left side (put box). means can use variable sides! Let’s take look code:happens computer evaluates last line? First, takes current values variables (2 x 5 y) puts expression. internal step, expression looks likeThen, computes expression right side , computation completed, stores new value xDo exercise #3 make sure understand .","code":"x = 2\ny = 5\nx = x + y - 4x = 2 + 5 - 4x = 3"},{"path":"python-basics.html","id":"constants","chapter":"4 Python basics","heading":"4.3 Constants","text":"Although real power variables can change value, use even value remains constant throughout program. true constants Python, rather agreement names UPPER_CASE. Accordingly, see SUCH_A_VARIABLE know change value. Technically, just recommendation, one can stop modifying value CONSTANT. However, much Python’s ease--use comes agreements (snake_case convention ). encounter agreements later, example, learning objects.Taking account, number legs stays constant throughout game, highlight constancy writeI strongly recommend using constants avoid hardcoding values. First, several identical values mean different things (2 legs, 2 eyes, 2 ears, 2 vehicles per character, etc.), seeing 2 code tell 2 mean (legs? ears? score multiplier?). can, course, figure based code uses number spare extra effort use properly named constant instead. , just read name meaning value becomes apparent meaning actual value mostly interested . Second, decide change value (say, main character now tripod), using constant means one place worry , rest code stays . hard-coded number, exciting9 definitely long search--replace throughout entire code.exercise #4.","code":"NUMBER_OF_LEGS = 2"},{"path":"python-basics.html","id":"value-types","chapter":"4 Python basics","heading":"4.4 Value types","text":"far, used integer numeric values (1, 2, 5, 1000…). Although, Python supports many different value types, first concentrate small subset :integer numbers, already used, e.g. -1, 100000, 42.float numbers can take real value, e.g. 42.0, 3.14159265359, 2.71828.strings can store text. text enclosed either paired quotes \"text\" apostrophes 'text'. means can use quotes apostrophes inside string, long enclosed alternative. E.g., \"students' homework\" (enclosed \", apostrophe ' inside) '\"generalizations false, including one.\" Mark Twain' (quotation enclosed apostrophes). much much strings cover material throughout course.logical / Boolean values either True False.using variable important know type value stores mostly . Python raise error, try computation using incompatible. cases, Python automatically convert values certain types, e.g. integer value also real value, conversion 1 1.0 mostly trivial automatic. However, cases may need use explicit conversion. Go exercise #5 try guessing code run throw error due incompatible types?exercise #5.Surprised last one? internally, True also 1 False 0!can explicitly convert one type another using special functions. example, turn number logical value string, simply write str(<value>). examples , result?exercise #6.Similarly, can convert logical/Boolean variable using bool(<value>) function. rules simple, numeric values 0 False, non-zero value converted True. string, empty string '' evaluated False non-empty string converted True. output examples ?exercise #7.Converting integer float numbers trickier. simplest case logical integer/float, True gives int(True) 1 float(True) 1.0 False gives 0/0.0. converting float integer, Python simply drops fractional part (rounding!). converting string, must valid number corresponding type error generated. E.g., can convert string like \"123\" integer float won’t work \"a123\". Moreover, can convert \"123.4\" floating-point number integer, fractional part . Given , cells work output produce?exercise #8.","code":"5 + 2.0\n'5' + 2\n'5' + '2'\n'5' + True\n5 + Truestr(10 / 2)\nstr(2.5 + True)\nstr(True)bool(-10)\nbool(0.0)\n\nsecret_message = ''\nbool(secret_message)\n\nbool('False')float(False)\nint(-3.3)\nfloat(\"67.8\")\nint(\"123+3\")"},{"path":"python-basics.html","id":"printing-output","chapter":"4 Python basics","heading":"4.5 Printing output","text":"print value, need use print() function (talk functions general later). simplest case, pass value printed .orOf course, already know variables, rather putting value directly, can pass variable instead value printed .orYou can also pass one value/variable print function values printed one another. example, want tell user breakfast just many , can doWhat printed code ?exercise #9.However, probably want explicit, print information. example, imagine three variables:, course print(meal, dish, count) nicer print “10 pancakes breakfast,” items bold inserted variables’ values. , need use string formatting. Please note string formatting specific printing, can create new string value via formatting store variable (without printing ) print (without storing ).","code":"print(5)\n#> 5print(\"five\")\n#> fivenumber_of_pancakes = 10\nprint(number_of_pancakes)\n#> 10breakfast = \"pancakes\"\nprint(breakfast)\n#> pancakesbreakfast = \"pancakes\"\nnumber_of_items = 10\nprint(breakfast, number_of_items)\n#> pancakes 10dinner = \"stake\"\ncount = 4\ndesert = \"cupcakes\"\n\nprint(count, dinner, count, desert)meal = \"breakfast\"\ndish = \"pancakes\"\ncount = 10"},{"path":"python-basics.html","id":"string-formatting","chapter":"4 Python basics","heading":"4.6 String formatting","text":"great resource string formatting Python pyformat.info. Python constantly evolves, now one way format strings. , introduce “old” format based classic string formatting used sprintf function C, Matlab, R, many programming languages. somewhat less flexible newer ones simple tasks difference negligible. Knowing old format useful generality. want learn alternatives, read link .general call \"string formatting\"%(tuple values used formatting).\"string formatting\", specify want put value via % symbol followed optional formatting info required symbol defines type value. type symbols ares stringd integerf float valueg “optimally” printed float value, scientific notation used large values (e.g., 10e5 instead 100000).example formatting string using integer:limited single value can put string. can specify locations via % must make sure pass right number values. running , can figure call actually work (output ) produce error?exercise #10.case real values two options: %f %g. latter uses scientific notation (e.g. 1e10 10000000000) make representation compact.exercise #11 get better feeling difference.much formatting can read pyformat.info. However, basics sufficient us start programming first game next seminar. Don’t forget submit exercise notebook see next time!","code":"print(\"I had %d pancakes for breakfast\"%(10))\n#> I had 10 pancakes for breakfastprint('I had %d pancakes and either %d  or %d stakes for dinner'%(2))\nprint('I had %d pancakes and %d stakes for dinner'%(7, 10))\nprint('I had %d pancakes and %d stakes for dinner'%(1, 7, 10))"}]
